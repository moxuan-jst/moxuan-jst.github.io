<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨轩技术糖</title>
  
  <subtitle>心性无染，温文儒雅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://moxuan.xyz/"/>
  <updated>2020-04-21T09:37:13.473Z</updated>
  <id>https://moxuan.xyz/</id>
  
  <author>
    <name>墨轩啊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试总结</title>
    <link href="https://moxuan.xyz/2020/04/21/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>https://moxuan.xyz/2020/04/21/面试总结/</id>
    <published>2020-04-21T09:37:13.000Z</published>
    <updated>2020-04-21T09:37:13.473Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>django商城部署</title>
    <link href="https://moxuan.xyz/2020/04/05/django%E5%95%86%E5%9F%8E%E9%83%A8%E7%BD%B2/"/>
    <id>https://moxuan.xyz/2020/04/05/django商城部署/</id>
    <published>2020-04-05T09:17:15.000Z</published>
    <updated>2020-04-06T02:25:32.422Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直跟淘宝店长有联络，昨天接到一个项目部署任务，要求将Django在本地先跑起来了，配合着把论文完善。拿到项目源码以后，其实是有点懵逼的状态的，因为好久没有碰过Django了，下面将部署步骤进行记录，留着备用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">系统：WSL——Ubuntu18.04</span><br><span class="line">MySQL：8</span><br><span class="line">python：3.6.9</span><br><span class="line"></span><br><span class="line">requirements.txt</span><br><span class="line">    asgiref==3.2.7</span><br><span class="line">    Django==2.1.4</span><br><span class="line">    Pillow==7.1.1</span><br><span class="line">    PyMySQL==0.9.3</span><br><span class="line">    pytz==2019.3</span><br><span class="line">    sqlparse==0.3.1</span><br></pre></td></tr></table></figure><a id="more"></a><p>首先受到项目源码以后，没有看到<code>requirements.txt</code>文件，估计做项目的哥们忘了。（如果有这个文件，可以使用下面的命令直接安装相应的库）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>如何得到<code>requirements.txt</code>这个文件呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>好久没有用python虚拟环境了，所以虚拟环境被我删了，借着这次机会，重新回顾虚拟环境安装过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装虚拟环境管理器</span></span><br><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualwrapper</span><br><span class="line"><span class="comment"># 添加环境变量（因为我用的zsh，所以配置文件是.zshrc，bash的配置文件是.bashrc）</span></span><br><span class="line">vim ~/.zshrc </span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=/mnt/d/Envs  <span class="comment"># 设置虚拟环境的存储位置</span></span><br><span class="line"><span class="built_in">export</span> PROJECT_HOME=/mnt/d/wenjian/demo/PYthon/project   <span class="comment"># 设置项目存储位置</span></span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_SCRIPT=/usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper_lazy.sh</span><br><span class="line">VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 <span class="comment"># 设置虚拟环境使用的python版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置虚拟环境</span></span><br><span class="line">mkvirtualenv shangcheng</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动虚拟环境</span></span><br><span class="line">workon shangcheng</span><br></pre></td></tr></table></figure><h2 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h2><p>由于电脑使用windows 10系统，安装了appserv， 所以使用下面命令启动MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld</span><br></pre></td></tr></table></figure><h2 id="调试部署"><a href="#调试部署" class="headerlink" title="调试部署"></a>调试部署</h2><p>首先执行Django启动命令，查看缺少哪些库，然后根据提示对库进行一一安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺啥补啥</span></span><br><span class="line">pip install ******</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直跟淘宝店长有联络，昨天接到一个项目部署任务，要求将Django在本地先跑起来了，配合着把论文完善。拿到项目源码以后，其实是有点懵逼的状态的，因为好久没有碰过Django了，下面将部署步骤进行记录，留着备用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;说明：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;系统：WSL——Ubuntu18.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MySQL：8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python：3.6.9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requirements.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    asgiref==3.2.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Django==2.1.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Pillow==7.1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PyMySQL==0.9.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pytz==2019.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sqlparse==0.3.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Django" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/Django/"/>
    
      <category term="Python" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/Django/Python/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Django" scheme="https://moxuan.xyz/tags/Django/"/>
    
      <category term="部署" scheme="https://moxuan.xyz/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>JS内部面试宝典</title>
    <link href="https://moxuan.xyz/2020/03/21/JS%E5%86%85%E9%83%A8%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/"/>
    <id>https://moxuan.xyz/2020/03/21/JS内部面试宝典/</id>
    <published>2020-03-21T12:19:24.000Z</published>
    <updated>2020-04-03T14:35:10.120Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/03/21/JS%E5%86%85%E9%83%A8%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/14004_13a3911b8a.jpg" alt></p><h2 id="原生JS"><a href="#原生JS" class="headerlink" title="原生JS"></a>原生JS</h2><ol><li><code>null</code> 和<code>undefined</code> 的区别：</li></ol><ul><li><code>null</code> 是一个表示”无“的对象，转为数值时为0；</li><li><code>undefined</code>是一个表示“无”的原始值，转为数值时为<code>NaN</code>，当声明的变量还未被初始化时，变量的默认值为<code>undefined</code></li><li><code>null</code>用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。</li><li><code>uindefined</code>表示“缺少值”。<ul><li>典型用法<ul><li>变量被声明了，但没有赋值。</li><li>调用函数时，应该提供的参数没有提供。</li><li>对象没有赋值的属性。</li><li>函数没有返回值时，默认返回。</li></ul></li></ul></li><li><code>null</code>表示“没有对象”<ul><li>典型用法<ul><li>作为函数的参数，表示该函数的参数不是对象。</li><li>作为对象原型链的终点。</li></ul></li></ul></li></ul><a id="more"></a><ol start="2"><li><p>对象的存储过程：</p><ol><li>开辟一个空间地址</li><li>把键值对存储到这个空间地址的堆内存中</li><li>把这个对象指针赋值给变量名</li></ol></li><li><p>基本数据类型是<strong>操作值</strong>，引用数据类型操作的是<strong>堆内存空间地址</strong></p></li><li><p>引用数据类型之间的比较就看是不是同一个内存地址。</p></li><li><p>闭包：</p><p>函数里面声明函数，本质上就是在函数内部和函数外部搭建起一座桥梁，使得子函数可以访问父函数中所有的局部变量，但是反之不可以。另一个作用则是保护变量不受外界污染，使其一直存在内存中。</p></li><li><p>new的执行过程是怎么回事？</p><ol><li>创建一个全新的对象</li><li>然后会被执行<code>prototype</code>链接</li><li>使<code>this</code>指向新创建的对象</li><li>通过<code>new</code>创建的每个对象将最终被<code>prototype</code>链接到这个函数的<code>prototype</code>对象上</li><li>如果函数没有返回对象类型<code>Object</code>，那么<code>new</code>表达式中的函数调用将返回该对象引用。</li></ol></li><li><p>改变<code>this</code>指向的方法（<strong>this永远指向最后调用它的那个对象</strong>）</p><ol><li>箭头函数</li><li>有意改变this指向</li><li>使用<code>apply、</code>call<code>、</code>bind`</li><li>new实例化一个对象</li></ol><p>全局作用域下的<code>this</code>指向<code>window</code></p></li><li><p>DOM回流：页面中的元素增加、删除、大小、位置的改变，会引起浏览器重新计算其他元素的位置。</p></li><li><p>DOM重绘：元素的某些 css 样式改变时，浏览器需要重新渲染这个元素。</p></li></ol><h2 id="HTTP-amp-amp-Ajax"><a href="#HTTP-amp-amp-Ajax" class="headerlink" title="HTTP &amp;&amp; Ajax"></a>HTTP &amp;&amp; Ajax</h2><ol><li>三次握手和四次挥手：</li></ol><p>第一次握手：客户端向服务端发送<code>SYN</code>码数据包，表示客户端要求和服务端建立连接</p><p>第二次握手：服务端收到客户端的连接请求后，会发送<code>ACK</code>数据包给客户端，表示连接请求已收到，询问客户端是否真的需要建立连接。</p><p>第三次握手：客户单收到<code>ACK</code>码以后会检查是否正确，如果正确，客户端会再次发送<code>ACK</code>码给服务器，表示确认简历连接。</p><p><strong>三次握手成功后才会建立连接，然后才会发送数据</strong></p><p>第一次挥手：当客户端发送数据结束后，会发送<code>FIN</code>码，数据包给服务端，表示告知服务端客户端的数据已经传递完成。</p><p>第二次挥手：当服务端收到<code>FIN</code>后，会发送<code>ACK</code>给客户端，表示服务端已经知道客户端传完了。客户端收到<code>ACK</code>以后就会把传递数据给服务端的通道关闭。</p><p>第三次挥手：当服务端把响应的数据发送完毕后，会发送一个<code>FIN</code>给客户端，告知客户端响应的数据已经发送完毕。</p><p>第四次挥手：当客户端收到<code>FIN</code>后，会发送一个<code>ACK</code>数据包给服务端，克制服务端，客户端已经知道数据发送完毕；服务端收到<code>ACK</code>码后，可以安心的把数据传递通道关闭。</p><ol start="2"><li>HTTP常用状态码</li></ol><table><thead><tr><th align="center">状态码</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">正常</td></tr><tr><td align="center">204</td><td align="center">请求成功，但服务端没有内容</td></tr><tr><td align="center">301</td><td align="center">永久重定向</td></tr><tr><td align="center">302</td><td align="center">临时重定向</td></tr><tr><td align="center">304</td><td align="center">缓存</td></tr><tr><td align="center">307</td><td align="center">临时重定向，在重定向时不会改变 method</td></tr><tr><td align="center">400</td><td align="center">参数传递不当</td></tr><tr><td align="center">401</td><td align="center">权限不够</td></tr><tr><td align="center">403</td><td align="center">拒绝响应</td></tr><tr><td align="center">404</td><td align="center">客户端请求的资源或者数据不存在</td></tr><tr><td align="center">500</td><td align="center">服务端内部错误</td></tr><tr><td align="center">502</td><td align="center">网关错误</td></tr></tbody></table><ol start="3"><li>HTTPS主要解决的三个安全问题</li></ol><ul><li>内容隐私</li><li>防篡改</li><li>确认对方身份</li></ul><ol start="4"><li>Ajax四步</li></ol><ul><li>创建<code>XMLHttpRequest</code>对象，也就是创建一个异步调用对象</li><li>创建一个新的HTTP请求，并制定该HTTP请求的方法、URL及验证信息</li><li>设置响应HTTP请求状态变化的函数</li><li>发送HTTP请求</li></ul><ol start="5"><li><code>cookie</code>、<code>localStorage</code>以及<code>sessionStorage</code>的异同点</li></ol><table><thead><tr><th align="center">分类</th><th align="center">生命周期</th><th align="center">存储容量</th><th align="center">存储位置</th></tr></thead><tbody><tr><td align="center">cookie</td><td align="center">默认保存在内存中，随浏览器关闭失效（如果设置过期时间，在到过期时间后失效）</td><td align="center">4KB</td><td align="center">保存在客户端，每次请求时都会带上</td></tr><tr><td align="center">localStorage</td><td align="center">理论上永久有效，除非主动清除</td><td align="center">4.98MB</td><td align="center">保存在客户端，不与服务端交互，节省网络流量</td></tr><tr><td align="center">sessionStorage</td><td align="center">仅在当前网页会话下有效，关闭页面或浏览器后会被清除</td><td align="center">4.98MB</td><td align="center">同上</td></tr></tbody></table><ol start="6"><li>Token相关</li></ol><ul><li>客户端使用用户名和密码请求登录</li><li>服务端收到请求，去验证用户名和密码</li><li>验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端</li><li>客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 token</li><li>服务端收到请求，然后去验证客户端请求里面带着 token，如果验证成功，就向客户端返回请求的数据</li></ul><ol start="7"><li>同源策略：</li></ol><p>客户端脚本（JavaScript）的重要的安全度量标准。其目的就是防止某个文档或者脚本从多个不同源装载。</p><p>同源策略指的是：协议、域名、端口相同。</p><ol start="8"><li><code>XSS</code>和<code>CSRF</code>区别;</li></ol><p>跨站脚本攻击（XSS）：恶意攻击者往Web页面里插入恶意 Script 代码，当用户浏览该页时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。</p><p>跨站请求伪造（CSRF）：伪造请求，冒充用户在站内正常的操作。</p><p><strong>区别</strong>：</p><p>原理不同，CSRF 是利用网站A本身的漏洞，去请求网站A 的api；XSS 是向目标网站注入 JS 代码，然后执行 JS 里的代码。</p><p>CSRF 需要用户先登录目标网站获取 cookie， 而 XSS 不需要登录；</p><p>CSRF 的目标是用户，XSS 的目标是服务器；</p><p>XSS 利用合法用户获取其信息，而 CSRF 是伪造成合法用户发起请求。</p><h1 id="Vue-相关"><a href="#Vue-相关" class="headerlink" title="Vue 相关"></a>Vue 相关</h1><ol><li><p>什么是生命周期：</p><p>Vue 实例从穿件到销毁的过程就是生命周期。也就是从开始创建、初始化数据、编译模板、挂在DOM→渲染、更新→渲染、卸载等一系列过程，就是Vue的生命周期。</p></li><li><p>第一次页面加载会触发那几个钩子函数？</p><p><code>beforeCreate</code>,<code>created</code>,<code>beforeMount</code>,<code>mounted</code></p></li><li><p><code>v-if</code>和<code>v-show</code>的区别：</p></li></ol><ul><li><code>v-show</code>是CSS切换，<code>v-if</code>是完整的销毁和重建</li><li>频繁切换时使用<code>v-show</code>，运行时较少改变时用<code>v-if</code></li></ul><ol start="4"><li><p><code>MVVM</code></p><p>M ——Model：表示数据模型，也可以在Model中定义数据修改和操作的业务逻辑；</p><p>V —— View：表示UI组件，负责将数据模型转化为 UI 展现出来；</p><p>VM —— ViewModel：监听数据模型的改变和控制视图行为、处理用户交互。</p><p><img src="/2020/03/21/JS%E5%86%85%E9%83%A8%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/clip_image002.png" alt="image.png"></p></li><li><p><code>MVC</code></p></li></ol><ul><li>View 接受用户交互请求</li><li>View 将请求转交给Controller 处理</li><li>Controller 操作 Mode 进行数据更新保存</li><li>View 更新变化数据使用户得到反馈</li></ul><p><img src="/2020/03/21/JS%E5%86%85%E9%83%A8%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/clip_image003.png" alt="image.png"></p><ol start="6"><li><code>SPA</code>单页应用</li></ol><ul><li>优点：<ul><li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li><li>基于上面一点，SPA 相对服务器压力小</li><li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理。</li></ul></li><li>缺点：<ul><li>初次加载耗时多：为实现单页 web 应用功能及显示效果，需要在加载页面的时候将 JS、CSS 统一加载，部分页面按需加载；</li><li>前进后退路由管理：由于单页引用在一个页面中显示所有内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li><li>SEO 难度较大：由于所有内容都在一个页面中动态替换显示，所以在 SEO 上有着天然的弱势。</li></ul></li></ul><ol start="7"><li><code>computed</code>和<code>watch</code>的区别和运用场景</li></ol><ul><li><p><code>computed</code>：计算属性，依赖其他属性值并且<code>computed</code>的值有缓存，只有它以来的属性值发生变化，下一次获取<code>computed</code>的值时才会重新计算。</p></li><li><p><code>watch</code>：更多的是“观察”的作用，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续操作。</p></li><li><p>应用场景：</p><ul><li>进行数值计算并且依赖于其它数据时使用<code>computed</code>，可以利用<code>computed</code>的缓存特性，便面每次获取值时都要重新计算。</li><li>需要在数据变化时执行异步操作或开销较大的操作时，使用<code>watch</code></li></ul></li></ul><ol start="8"><li><p>Vue 组件的 <code>data</code>为什么必须是函数？</p><p>因为组件是可以复用的，JS 里对象是引用关系，如果组件 data 是一个对象，那么子组件中的 data 属性会相互污染，产生副作用。</p></li><li><p>Vuex 的理解</p></li></ol><p>Vuex 是一个专门为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 <code>store</code>，<code>store</code>基本上就是一个容器，它包含着应用中大部分的状态（state）。</p><ul><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会高效更新。</li><li>改变 store 中的状态的唯一途径就是显示的提交 （commit）mutation。这样使得我们可以方便跟踪每一个状态的变化。</li></ul><ol start="10"><li><p>Vue 中的 <code>key</code> 有什么作用？</p><p>Vue 中的 <code>key</code>的作用是： <code>key</code> 是为了 Vue 中 <code>vnode</code> 的唯一标记，通过 <code>key</code>，我们的diff 操作可以更准确、更快速。</p></li><li><p><code>ref</code> 的作用</p></li></ol><ul><li>获取 dom 元素：<code>this.$refs.box</code></li><li>获取子组件中的 data：<code>this,$refs.box.msg</code></li><li>调用子组件中的方法：<code>this.$refs.box.open()</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/03/21/JS%E5%86%85%E9%83%A8%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/14004_13a3911b8a.jpg&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;原生JS&quot;&gt;&lt;a href=&quot;#原生JS&quot; class=&quot;headerlink&quot; title=&quot;原生JS&quot;&gt;&lt;/a&gt;原生JS&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; 和&lt;code&gt;undefined&lt;/code&gt; 的区别：&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; 是一个表示”无“的对象，转为数值时为0；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;是一个表示“无”的原始值，转为数值时为&lt;code&gt;NaN&lt;/code&gt;，当声明的变量还未被初始化时，变量的默认值为&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uindefined&lt;/code&gt;表示“缺少值”。&lt;ul&gt;
&lt;li&gt;典型用法&lt;ul&gt;
&lt;li&gt;变量被声明了，但没有赋值。&lt;/li&gt;
&lt;li&gt;调用函数时，应该提供的参数没有提供。&lt;/li&gt;
&lt;li&gt;对象没有赋值的属性。&lt;/li&gt;
&lt;li&gt;函数没有返回值时，默认返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;表示“没有对象”&lt;ul&gt;
&lt;li&gt;典型用法&lt;ul&gt;
&lt;li&gt;作为函数的参数，表示该函数的参数不是对象。&lt;/li&gt;
&lt;li&gt;作为对象原型链的终点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://moxuan.xyz/categories/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="笔记" scheme="https://moxuan.xyz/categories/%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://moxuan.xyz/categories/%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="面试" scheme="https://moxuan.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JavaScript" scheme="https://moxuan.xyz/tags/JavaScript/"/>
    
      <category term="笔记" scheme="https://moxuan.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="https://moxuan.xyz/2020/03/01/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://moxuan.xyz/2020/03/01/前端性能优化/</id>
    <published>2020-03-01T10:22:04.000Z</published>
    <updated>2020-04-03T14:35:10.850Z</updated>
    
    <content type="html"><![CDATA[<ol><li>URL 层面到显示页面，涉及到网络层面，有三个重要过程</li></ol><ul><li>DNS 解析</li><li>TCP 连接</li><li>HTTP 请求/响应（优化的核心）<ul><li>减少请求次数</li><li>减少单次请求所花费的时间</li></ul></li></ul><a id="more"></a><ol start="2"><li>浏览器缓存策略</li></ol><ul><li><p>浏览器缓存机制有四个方面：</p><ul><li><p>Memory Cache（内存）</p><ul><li>指存在于内存中的缓存，是浏览器最先尝试命中的一种缓存，也是响应速度最快的响应。</li><li>Base64 格式的图片以及较小的 JS，CSS 文件会使用。</li></ul></li><li><p>service Worker cache </p><ul><li>独立于主线程之外的 JS 线程，脱离于浏览器窗体，无法直接访问 DOM。</li><li>可实现离线缓存，消息推送和网络代理等。</li></ul></li><li><p>HTTP cache</p><ul><li><p>分为强缓存和协商缓存</p><ul><li>优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存</li></ul></li><li><p>强缓存是利用 http 头中的 <code>Expires</code>和<code>cache-control</code>两个字段来控制的</p><ul><li><code>cache-control</code>相对于<code>Expires</code>更加准确，优先级也更高，同时出现时以<code>cache-control</code>为准。</li></ul></li><li><p>协商缓存依赖于服务端与浏览器之间的通信。</p></li><li><p>HTTP 缓存策略</p><p><img src="/2020/03/01/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/HTTP%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5.png" alt></p></li><li><p>public 和 private</p><ul><li>public：既可以被浏览器缓存，也可以被代理服务器缓存。</li><li>private：只能被浏览器缓存（默认）。</li></ul></li><li><p>no-store 和 no-cache</p><ul><li>no-store：不适用任何缓存。</li><li>no-cache：直接向服务端确认该资源是否过期。</li></ul></li></ul></li><li><p>push cache</p><ul><li>只有当前三种均未命中时激活。</li><li>是一种存在于会话阶段的缓存，当 session 终止时，缓存也随之释放。</li><li>不同页面只要共享了同一个 HTTP2 连接，那么它们就共享同一个 push cache。</li></ul></li></ul></li></ul><ol start="3"><li>CDN 服务</li></ol><ul><li>CDN 往往被用来存放静态资源。</li><li>CDN 的域名必须和主业务服务器的域名不一样，避免不必要的 cookie 的出现。</li></ul><ol start="4"><li>图片优化</li></ol><ul><li>减少像素点</li><li>减少每个像素点能够显示的颜色</li></ul><ol start="5"><li>渲染优化</li></ol><ul><li><p>基于渲染流程的 CSS 优化。</p><ul><li>CSS 选择器是从右到左进行匹配。<ul><li>避免使用通配符。</li><li>避免重复匹配、重复定义。</li><li>少用标签选择器。</li><li>减少嵌套、最高不超过三层，尽可能使用类关联。</li></ul></li></ul></li><li><p>CSS 阻塞</p><p>将 CSS 放在 <code>head</code> 标签里和尽快启用CND实现静态资源加载速度的优化。</p></li><li><p>DOM 渲染优化</p><ul><li>重绘不一定导致回流，回流一定导致重绘。</li><li>尽可能把回流和重绘次数最小化。</li></ul></li></ul><ol start="6"><li>Event Loop（事件循环）</li></ol><ul><li>事件循环中的异步队列有两种：<ul><li>macro-task（宏任务）：<ul><li><code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>script</code>、<code>I/O</code>操作、UI 渲染等。</li></ul></li><li>micro-task（微任务）：<ul><li><code>process</code>、<code>nextTick</code>、<code>promise</code>、<code>mutationObserve</code>等</li></ul></li></ul></li></ul><ol start="7"><li><p>节流和防抖</p><p>对有可以被频繁触发的事件进行节流和防抖。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;URL 层面到显示页面，涉及到网络层面，有三个重要过程&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;DNS 解析&lt;/li&gt;
&lt;li&gt;TCP 连接&lt;/li&gt;
&lt;li&gt;HTTP 请求/响应（优化的核心）&lt;ul&gt;
&lt;li&gt;减少请求次数&lt;/li&gt;
&lt;li&gt;减少单次请求所花费的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://moxuan.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://moxuan.xyz/categories/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://moxuan.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://moxuan.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="性能优化" scheme="https://moxuan.xyz/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加tag cloud</title>
    <link href="https://moxuan.xyz/2020/02/29/hexo%E6%B7%BB%E5%8A%A0tag-cloud/"/>
    <id>https://moxuan.xyz/2020/02/29/hexo添加tag-cloud/</id>
    <published>2020-02-29T14:42:10.000Z</published>
    <updated>2020-04-03T14:35:07.919Z</updated>
    
    <content type="html"><![CDATA[<p>NexT主题自带的标签页中，标签以简单的列表形式进行展示，只加了随机字体大小，并没有其它特别的样式。当标签多了以后，页面被挤得满满当当，不是很美观。github 有相关的标签云插件，比如 <a href="https://github.com/MikeCoder/hexo-tag-cloud" target="_blank" rel="noopener">Hexo Tag Cloud</a> 这款，将标签以立体的效果进行展示，看起来还是不错的。按要求配置后，标签云显示在侧栏 sidebar 区域，之后因侧栏放了别的插件，我将其挪到了单独的标签页。<img src="/2020/02/29/hexo%E6%B7%BB%E5%8A%A0tag-cloud/tag_cloud.png" alt></p><a id="more"></a><h3 id="安装tag-cloud插件"><a href="#安装tag-cloud插件" class="headerlink" title="安装tag cloud插件"></a>安装tag cloud插件</h3><ul><li>进入到 hexo 的根目录，然后在 <code>package.json</code> 中添加依赖: <code>&quot;hexo-tag-cloud&quot;: &quot;2.1.*&quot;</code></li><li>然后执行 <code>npm install</code> 命令</li><li>然后需要你去修改主题的 tagcloud 的模板，这个依据你的主题而定。</li></ul><p><strong>注意</strong>：如果安装失败，将项目 clone 到博客下的 node_models 文件夹中即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:MikeCoder/hexo-tag-cloud.git</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>sidebar中添加：</p><h5 id="对于-swig-用户"><a href="#对于-swig-用户" class="headerlink" title="对于 swig 用户"></a>对于 swig 用户</h5><ul><li>这里以 Next 主题为例。</li><li>找到文件 <code>next/layout/_macro/sidebar.swig</code>, 然后添加如下内容。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&#123;&#123; url_for(&apos;/js/tagcloud.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&#123;&#123; url_for(&apos;/js/tagcanvas.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt;</span><br><span class="line">    &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class="line">        &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width:100%&quot;&gt;</span><br><span class="line">            &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">        &lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>tag页添加：</p><h5 id="在themes-next-layout-page-swig中添加代码效果如下："><a href="#在themes-next-layout-page-swig中添加代码效果如下：" class="headerlink" title="在themes/next/layout/page.swig中添加代码效果如下："></a>在themes/next/layout/page.swig中添加代码效果如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">   &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot; style=&quot;margin-left: 33%;&quot;&gt;</span><br><span class="line">      &lt;canvas width=&quot;400&quot; height=&quot;400&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt;</span><br><span class="line">           &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">      &lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125; </span><br><span class="line">&#123;% elif page.type === &apos;categories&apos; %&#125;</span><br><span class="line">&lt;div class=&quot;category-all-page&quot;&gt;</span><br><span class="line">&lt;div class=&quot;category-all-title&quot;&gt;</span><br><span class="line">&#123;&#123; _p(&apos;counter.categories&apos;, site.categories.length) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;category-all&quot;&gt;</span><br><span class="line">&#123;&#123; list_categories() &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><ul><li>在你的博客根目录，找到<code>_config.yml</code>文件最后然后添加如下的配置项:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># hexo-tag-cloud</span><br><span class="line">tag_cloud:</span><br><span class="line">    textFont: Trebuchet MS, Helvetica</span><br><span class="line">    textColor: &apos;#333&apos;</span><br><span class="line">    textHeight: 25</span><br><span class="line">    outlineColor: &apos;#E2E1D1&apos;</span><br><span class="line">    maxSpeed: 0.5</span><br></pre></td></tr></table></figure></li></ol><h6 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h6><p><a href="https://www.liaofuzhan.com/posts/4158923031.html" target="_blank" rel="noopener">https://www.liaofuzhan.com/posts/4158923031.html</a></p><p><a href="https://blog.csdn.net/Aoman_Hao/article/details/89416634" target="_blank" rel="noopener">https://blog.csdn.net/Aoman_Hao/article/details/89416634</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NexT主题自带的标签页中，标签以简单的列表形式进行展示，只加了随机字体大小，并没有其它特别的样式。当标签多了以后，页面被挤得满满当当，不是很美观。github 有相关的标签云插件，比如 &lt;a href=&quot;https://github.com/MikeCoder/hexo-tag-cloud&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo Tag Cloud&lt;/a&gt; 这款，将标签以立体的效果进行展示，看起来还是不错的。按要求配置后，标签云显示在侧栏 sidebar 区域，之后因侧栏放了别的插件，我将其挪到了单独的标签页。&lt;img src=&quot;/2020/02/29/hexo%E6%B7%BB%E5%8A%A0tag-cloud/tag_cloud.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://moxuan.xyz/categories/hexo/"/>
    
      <category term="美化" scheme="https://moxuan.xyz/categories/hexo/%E7%BE%8E%E5%8C%96/"/>
    
      <category term="记录" scheme="https://moxuan.xyz/categories/hexo/%E7%BE%8E%E5%8C%96/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="hexo" scheme="https://moxuan.xyz/tags/hexo/"/>
    
      <category term="美化" scheme="https://moxuan.xyz/tags/%E7%BE%8E%E5%8C%96/"/>
    
      <category term="tag_cloud" scheme="https://moxuan.xyz/tags/tag-cloud/"/>
    
  </entry>
  
  <entry>
    <title>前端面试总结二</title>
    <link href="https://moxuan.xyz/2020/02/27/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E4%BA%8C/"/>
    <id>https://moxuan.xyz/2020/02/27/前端面试总结二/</id>
    <published>2020-02-27T05:01:04.000Z</published>
    <updated>2020-04-03T14:35:08.289Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/27/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E4%BA%8C/14004_3c55926927.jpg" alt></p><a id="more"></a><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol><li>标准模式和兼容模式各有什么区别：</li></ol><ul><li>标准模式的排版和 JS 运作模式都是以浏览器支持的最高标准运行。</li><li>兼容模式以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作。</li></ul><ol start="2"><li>H5 为什么只需写<code>&lt;! DOCTYPE html&gt;</code></li></ol><ul><li>H5 不基于SGML， 因此不需要都 DTD 进行引用，但需要 doctype 来规范浏览器的行为。</li><li>而 H4.01 基于 SGML， 所以需要对 DTD 进行引用。</li></ul><ol start="3"><li>行内元素有哪些？块元素有哪些？空(void)元素有哪些？</li></ol><ul><li>首先，css 规定每个元素都有 display 属性。<code>block</code>、<code>inline</code>、<code>inline-block</code><ul><li>行内元素：a, b, span, img, input, select, strong</li><li>块元素：div, ul, li, dl, dt, dd, h1~h6, p</li><li>空元素：<code>&lt;br&gt;</code>,<code>&lt;hr&gt;</code>,<code>&lt;img&gt;</code>,<code>input</code>,<code>&lt;link&gt;</code>,<code>&lt;meta&gt;</code></li></ul></li></ul><ol start="4"><li>页面导入样式时，使用 <code>link</code>和<code>@import</code>有什么区别？</li></ol><ul><li><code>link</code>属于 XHTML 标签，除加载 CSS 外，还能用于定义 RSS， 定义 rel 连接属性等作用。而<code>@import</code>是 CSS 提供的，只能用于加载 CSS。</li><li>页面加载时，<code>link</code>同时加载，而<code>@import</code>是页面加载完成后才能加载。</li><li><code>link</code>无兼容问题。</li><li><code>link</code>支持使用 JS 控制 DOM 改变样式。</li></ul><ol start="5"><li>H5 的新特新移除了那些元素？如何解决兼容性问题？如何区分 H5 和 HTML？</li></ol><ul><li><p>主要是关于图像、位置、存储、多任务等功能的增加。</p><ul><li>绘图：canvas</li><li>音/视频：video、audio</li><li>存储：<ul><li>localStrong：长期存储，浏览器关闭后数据不丢失。</li><li>sessionStrong：浏览器关闭后数据自动删除。</li></ul></li><li>语义化标签：header、nav、article、section、footer</li><li>新的技术：WebWorker、WebSocket、Geolocation</li></ul></li><li><p>移除的元素：</p><ul><li>纯表现的元素：basefont、big、center、font、s</li><li>对可用性产生负面影响的元素：frame、frameset、noframes</li></ul></li><li><p>兼容性：</p><ul><li><pre><code class="html"><span class="comment">&lt;!-- [if it IE 9] --&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://html5shim.googlecode.com/svn/trunk/html5.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- [Endif] --&gt;</span><span class="comment"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 通过 `document.createElement`产生标签。</span><br><span class="line"></span><br><span class="line">- 区分H5:</span><br><span class="line"></span><br><span class="line">  - DOCTYPE 声明</span><br><span class="line">  - 新增结构元素</span><br><span class="line">  - 功能元素</span><br><span class="line"></span><br><span class="line">6. 对 HTML 语义化的理解：</span><br><span class="line"></span><br><span class="line">- 用正确的标签做正确的事。</span><br><span class="line">- 结构更清晰，便于浏览器、搜索引擎解析。</span><br><span class="line">- 易阅读。</span><br><span class="line">- 便于维护。</span><br><span class="line"></span><br><span class="line">7. H5 的离线存储。</span><br><span class="line"></span><br><span class="line">- 原理：基于 `appcache` 文件的缓存机制，通过这个文件上的解析清单离线存储资源，处于离线状态时，浏览器会通过被离线存储的数据进行页面展示。</span><br><span class="line"></span><br><span class="line">- 使用：</span><br><span class="line"></span><br><span class="line">  - 在页面都不加入一个`manifest`属性。</span><br><span class="line"></span><br><span class="line">    ```html</span><br><span class="line">    &lt;html manifest=&quot;xxx.appcache&quot;&gt;</span><br></pre></td></tr></table></figure></span></code></pre></li><li><p>新建一个<code>cache.manifest</code>或者<code>cache.appcache</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"># cache 之后的资源都会被缓存</span><br><span class="line">CACHE:</span><br><span class="line">main.html</span><br><span class="line">style.css</span><br><span class="line"># network 之后的资源不会缓存</span><br><span class="line">NETWORK:</span><br><span class="line">account/ # account 目录不会被缓存</span><br></pre></td></tr></table></figure></li><li><p>在离线状态时，操作 <code>window.applicathoncache</code>进行实现。</p></li></ul></li></ul><ol start="8"><li><code>iframe</code> 有哪些缺点：</li></ol><ul><li><code>iframe</code> 会阻塞主页面的 <code>onload</code>事件。</li><li>搜索引擎的检索程序无法解读，不利于 SEO。</li><li><code>iframe</code> 和主页面共享连接池，而浏览器对相同域的连接有限制，会影响页面的并行加载。</li><li>如果要是用 <code>iframe</code> ，最好通过 JS 动态给<code>iframe</code> 添加 <code>src</code> 属性。</li></ul><ol start="9"><li>H5 的 <code>form</code>如何关闭自动完成功能？</li></ol><ul><li>设置<code>autocomplete=off</code></li></ul><ol start="10"><li>如何实现浏览器内多个标签页之间的通信？</li></ol><ul><li>WebSocket、shared worker：</li><li>也可以调用 localStorage 、cookies 等本地存储方式：localStorage 会触发一个事件，通过监听该事件，控制它的值来进行页面通信。</li></ul><ol start="11"><li>页面验证码是干什么的？是为了解决什么安全问题？</li></ol><ul><li>区分用户是计算机还是人的公共全自动程序。</li><li>可以防止恶意破解密码、刷票、论坛灌水等。</li><li>有效防止黑客对某一特定注册用户用特定程序破解方式不断的登录尝试。</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol><li>CSS 选择器：</li></ol><ul><li>id选择器</li><li>类选择器</li><li>标签选择器</li><li>相邻选择器</li><li>子选择器</li><li>后代选择器</li><li>通配符选择器</li><li>属性选择器</li><li>伪类选择器</li><li>可继承样式：font-size、font-family、color、ul、li、dl、dd、dt</li><li>不可继承样式：border、padding、margin、width、height</li></ul><ol start="2"><li>CSS 优先级算法</li></ol><ul><li>优先级就近原则。</li><li>载入样式以最后载入的为准。</li><li>优先级：（同权重）<ul><li>内联 =&gt; 嵌入 =&gt; 外部</li><li>！import =&gt; id =&gt; class =&gt; tag</li><li>import 比内联优先级高。</li></ul></li></ul><ol start="3"><li>如何居中 div</li></ol><ul><li><p>水平居中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure></li><li><p>绝对定位居中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    width： 300px;</span><br><span class="line">    <span class="selector-tag">height</span>: 300<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 0;</span><br><span class="line">    <span class="selector-tag">left</span>: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>水平垂直居中（一）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置层的外边距 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">250px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">250px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>水平垂直居中（二）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 利用 transform 属性 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>水平垂直居中（三）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 利用 flex 布局 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>display 的值及作用：</li></ol><ul><li>block：块类型，可设置宽，高，换行显示。</li><li>none：元素不显示，并从文档流中移除。</li><li>inline：行内元素，不可设置宽，高，同行显示。</li><li>inline-block：行内块，可设置宽，高，同行显示。</li><li>list-item： 像块元素一样显示，并添加样式列表标记。</li><li>table：作为块级表格显示。</li><li>inherit：继承父类属性值。</li></ul><ol start="5"><li>CSS3 新特性：</li></ol><ul><li>圆角：<code>border-radius</code></li><li>阴影/反射：<code>shadow/reflect</code></li><li>多列布局：<code>multi-column，layout</code></li><li>文字特效：<code>text-shadow</code></li><li>文字渲染：<code>text-decoration</code></li><li>线性渐变：<code>gradient</code></li><li>旋转：<code>transform</code></li></ul><ol start="6"><li>解释 CSS3 的 <code>flexbox</code>（弹性盒模型）及适用场景。</li></ol><ul><li><code>flexbox</code>可以把列表放在同一个方向，并让列表能够延伸到占用可用的空间。</li><li>较为复杂的布局还可以通过嵌套一个伸缩容器（flex-container）来实现。</li><li>采用 flex 布局的元素称为容器。</li><li>它的所有子元素自动成员容器成员，称为项目。</li><li>常规布局是基于块和内联流动方向，而 flex 布局是基于 flex-flow 流，可以很方便的用来做居中，能对不同屏幕大小自适应，在布局上有了更灵活的空间。</li></ul><ol start="7"><li>用纯 CSS 创建一个三角形的原理是什么？</li></ol><ul><li><p>把上、左、右、三条边隐藏（颜色设置为transparent）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#demo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="8"><li>CSS 多列等高如何实现？</li></ol><ul><li>利用 padding-bottom | margin-bottom 正负值相乘；</li><li>设置父容器超出隐藏（<code>overflow：hidden</code>），这样子父容器的高度就还是它里面的列没有设定 padding-bottom 时的高度，当它里面的任一列高度增加，则父容器的高度被撑到里面最高那列的高度，其他比这列矮的列会用他们的 padding-bottom 补偿这部分高度差。</li></ul><ol start="9"><li>浏览器兼容性问题，原因，解决方法：</li></ol><ul><li><p>png 24位图片在 IE6 出现背景：</p><ul><li>做成 png 8。</li></ul></li><li><p>浏览器默认 padding 和 margin 不同：</p><ul><li><p>统一样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>IE6 双边距 bug：块属性标签 float 后，又有横行的 margin 的情况下，在 IE6 显示 margin 比设置大，浮动 IE 产生的双边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这种情况 IE6 会产生 20px 的距离 */</span></span><br><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>float 标签样式中加入 <code>_display: inline</code></li></ul></li><li><p>渐进识别的方式：从总体中逐渐排除局部。</p><ul><li><p>首先使用<strong><code>\9</code></strong>标记，将 IE 浏览器从所有情况中分离出来，接着再次使用<strong><code>+</code></strong> 将IE8，IE7，IE6分离出来，这样 IE8 已经独立识别。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;   <span class="comment">/* 所有识别 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#00deff</span> \<span class="number">9</span>;  <span class="comment">/* IE6,7,8识别 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#a200ff</span>;  <span class="comment">/* IE6,7识别 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1e0bfd</span>;  <span class="comment">/* IE6识别 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示。</p><ul><li><p>加入CSS 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">-webkit-text-size-adjust</span>: none;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="10"><li>li 与 li 之间看不见的空间间隔是什么原因引起的，如何解决？</li></ol><ul><li>行框的排列会受到中间空白（回车/空格）等的影响，因为空格也属于字符，这些空白也会被应用样式，占据空间，所有会有间隔。<ul><li>把字符大小设为0</li></ul></li></ul><ol start="11"><li>为什么要初始化样式？</li></ol><ul><li>因为浏览器的兼容问题，不同浏览器对有些标签默认值是不同的。</li></ul><ol start="12"><li><code>absolute</code>（绝对定位）的<code>containing block</code>（容器块）计算方式与正常流有什么不同？</li></ol><ul><li>无论属于哪种，都要先找到其祖先元素中最近的 <code>position</code> 值不为 <code>static</code> 的元素，然后判断<ul><li>若此元素为 <code>inline</code>元素，则<code>containing block</code>（容器块）为能够包含这个元素生成的第一个和最后一个 <code>inline box</code> 的 <code>padding box</code>（除 margin， border 外的区域）的最小矩形。</li><li>否则，则有这个祖先元素的 <code>padding box</code>构成。</li><li>如果都找不到，则为<code>initial containing block</code>。</li></ul></li></ul><ol start="13"><li><code>visibility</code>的<code>callapse</code>属性，不同浏览器会有什么不同？</li></ol><ul><li>对于普通元素，会将元素完全隐藏，不占据页面布局空间，与<code>display:none</code>表现相同。</li><li>如果目标元素为<code>table</code>,将<code>table</code>隐藏，但会占据页面布局空间，仅在Firefox起作用，IE会显示元素，Chrome会将元素隐藏，但会占据空间。</li></ul><ol start="14"><li><code>position</code>跟display、margin、collapes、overflow、float这些特性相加会怎样？</li></ol><ul><li><code>display:none</code>，则元素不被渲染，<code>position</code>、<code>float</code>不起作用。</li><li>position 为 absolute/fixed， 元素绝对定位，float不起作用。</li><li>float不是none，元素会脱离文档流，有浮动，绝对定位。</li></ul><ol start="15"><li>对 BFC（块级格式化上下文） 规范的理解：</li></ol><ul><li>一个页面由多个容器（box）组成，元素类型和 display 属性，决定了 box 类型，不同 box 类型，参与不同的渲染文档的容器，因此 box 内的元素会以不同的方式渲染，也就是说 BFC 内部与外部互不影响。</li></ul><ol start="16"><li>CSS 定义的权重：</li></ol><ul><li>标签为1，类为10，id为100， 其余累加。</li><li>如果权重相同，则最后定义的样式起作用。</li></ul><ol start="17"><li>CSS 优化，提高性能的方法：</li></ol><ul><li>关键选择器。选择器的最后面部分分为关键选择器（即用来匹配目标元素的部分）。</li><li>如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则。</li><li>提取项目的通用公有样式，增强可复用性，按模块编写组件，增强项目的协同开发性，可维护性和可扩展性。</li><li>使用预处理工具或构件工具。</li></ul><ol start="18"><li>浏览器是怎样解析CSS选择器的？</li></ol><ul><li>样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。</li><li>只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者因为不匹配而放弃该规则。</li></ul><ol start="19"><li><p>如果需要手写动画，最小时间间隔是多少？</p><p>多数显示器刷新默认频率是60Hz，即 1s 刷新60次，所以最小间隔为 1/60 * 1000 ms = 16.7 ms</p></li><li><p><code>overflow:scoll</code>不能平滑滚动的问题（iOS系统）</p></li></ol><ul><li><p>开启硬件加速特性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-overflow-scolling</span><span class="selector-pseudo">:auto</span> 1 <span class="selector-tag">touch</span>;</span><br></pre></td></tr></table></figure></li></ul><ol start="21"><li>什么是响应式设计，基本原理是什么？</li></ol><ul><li>可以智能根据用户行为以及使用设备环境进行相应的布局。</li><li>基本原理：通过媒体查询检测不同设备屏幕尺寸做处理。</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li><p>数组随机排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">arr.sort(fcuntion ()&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">Math</span>.random()<span class="number">-0.5</span>;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure></li><li><p>JS 继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'wang'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    thi.age = <span class="number">25</span>;</span><br><span class="line">&#125;;</span><br><span class="line">child.prototype = <span class="keyword">new</span> parent();</span><br><span class="line"><span class="keyword">var</span> demo =  <span class="keyword">new</span> child();</span><br><span class="line">alert(demo.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>,name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    getname() &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, grade)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;;</span><br><span class="line">    getgrade()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.grade)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建对象的方式</p></li></ol><ul><li>对象字面量方式</li><li>用 function 模拟无参的构造函数。</li><li>用 function 模拟有参的构造函数（用this构造上下文属性）</li><li>工厂模式</li><li>原型</li><li>混合方式</li></ul><ol start="4"><li>对<code>this</code>的理解：</li></ol><ul><li><code>this</code>总是指向函数的直接调用者。</li><li>如果有<code>new</code>关键字，指向<code>new</code>出来的对象。</li><li>在事件中，指向触发事件的对象。</li><li>IE中，<code>attachEvent</code>中的this指向全局window。</li></ul><ol start="5"><li><p><code>eval</code>是做什么的？</p><p>功能是把对应字符串解析成 JS 代码并运行。</p></li><li><p><code>window</code> 对象和 <code>document</code> 对象：</p></li></ol><ul><li><code>window</code>对象指浏览器的窗口</li><li><code>document</code> 对象是 HTML 文档对象，<code>window</code> 对象的一个属性。</li></ul><ol start="7"><li><code>null</code>、<code>undefined</code> 的区别</li></ol><ul><li><code>null</code> 表示一个对象是”没有值”的值，也就是“空”。</li><li><code>undefined</code>表示变量声明了但没有初始化（赋值）。</li><li><code>null</code>的类型是<code>Object</code>，一个空对象。</li></ul><ol start="8"><li><pre><code class="js">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>].map(<span class="built_in">parseInt</span>) <span class="comment">// [1, NaN, NaN]</span>&lt;!--￼<span class="number">15</span>--&gt;</code></pre></li><li><p>如何解决跨域问题？</p></li></ol><ul><li>jsonp：带有填充的 JS 对象表示。利用页面中脚本标记加载来自不同来源的代码来执行实现跨域请求的方法</li><li>iframe</li><li><code>window.name</code>、<code>window.postMessage</code></li><li>服务器上设置代理页面</li><li>response 添加 Header<ul><li><code>resp.setHeader(&quot;Access-control-Allow-Origin&quot;, &quot;*&quot;)</code></li></ul></li><li>Nginx 转发</li></ul><ol start="14"><li>AMD 与 CMD 的区别</li></ol><ul><li>对于依赖的模块：AMD 是提前执行，CMD是延迟执行，后来都改成延迟执行。</li><li>CMD 推崇依赖就近，AMD 推崇依赖前置。</li></ul><ol start="15"><li><code>call()</code>和<code>apply()</code>的区别</li></ol><ul><li>用法：调用一个对象的方法，用另一个对象替换当前对象。</li><li>两者穿的列表形式不一样<ul><li><code>call</code>可传入多个参数</li><li><code>apply</code>只能传入两个参数，且第二个必须是数组。</li></ul></li></ul><ol start="16"><li>检测浏览器版本的方式。</li></ol><ul><li>功能检测</li><li>userAgent特征检测</li></ul><ol start="17"><li>webpack 热更新实现原理。</li></ol><ul><li>webpack 编译期，为需要更新的 entry 注入热更新代码（<code>EventSource</code>通信）</li><li>页面首次打开后，服务端与客户端通过<code>EventSource建立通信渠道，把下一次的</code>hash`返回前端。</li><li>客户端获取到<code>hash</code>，这个<code>hash</code>将作为下一次请求服务端 <code>hot-update.js</code>和<code>hot-update.json</code>的<code>hash</code>。</li><li>修改页面后，webpack 监听到文件修改后开始编译，编译完成后，发送 <code>build</code> 消息给客户端。</li><li>客户端获取到 <code>hash</code> 成功后客户端构造<code>hot-upda.js</code> script 链接，然后插入文档。</li><li><code>hot-update.js</code>插入成功后，执行<code>hotAPI</code>的<code>createRecord</code>和<code>reload</code>方法，获取到 vue 的<code>render</code>方法，重新加载<code>render</code>组件，继而实现 UI 无刷新更新。</li></ul><ol start="18"><li>commonJS 规范特点：</li></ol><ul><li>所有模块都有单独作用域，不会污染全局作用域。</li><li>重复加载模块只会加载一次，后面从缓存中读取。</li><li>模块加载顺序按照代码中出现的顺序。</li><li>模块加载是同步的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/27/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E4%BA%8C/14004_3c55926927.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://moxuan.xyz/categories/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="笔记" scheme="https://moxuan.xyz/categories/%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="https://moxuan.xyz/categories/%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="总结" scheme="https://moxuan.xyz/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="前端" scheme="https://moxuan.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://moxuan.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端面试笔记总结一</title>
    <link href="https://moxuan.xyz/2020/02/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
    <id>https://moxuan.xyz/2020/02/24/前端面试笔记总结/</id>
    <published>2020-02-24T06:11:21.000Z</published>
    <updated>2020-04-03T14:35:12.821Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/14004_3bd3e42071.jpg" alt></p><a id="more"></a><ol><li><p>一个200 X 200 的 div 在不同分辨率屏幕上下左右居中，用css实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>清除浮动的几种方式：</p><p>清除浮动主要是为了解决父元素因为紫苑寺浮动引起的内部高度为0的问题（高度塌陷）。</p><ol><li><p>额外标签法：即与父盒子同级简历一个标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clear</span>&#123;</span></span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>优点： 方便。</li><li>缺点：添加无意义标签，语义化差。</li></ul></li><li><p>父元素添加 <code>overflow: hidden</code>（触发BFC模式）</p><ul><li>优点：代码简洁。</li><li>缺点：内容增多时容易造成不会自动换行，导致内容被隐藏，无法显示溢出元素。</li></ul></li><li><p>使用<code>after</code>伪元素清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">cleat</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line"><span class="comment">/*触发IE6 haslagout*/</span>    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>before</code>和<code>after</code>双伪元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>: <span class="selector-tag">after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">*zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>什么是盒子模型。</p><p>​        包括边距margin、边框border、填充padding和实际内容content的盒子。</p></li><li><p><code>px</code>和<code>em</code>的区别。</p><p>​        <code>px</code>值是固定的，计算比较容易；</p><p>​        <code>em</code>值不固定，继承父元素字体大小；</p><p>​        <code>1em=16px</code></p></li><li><p>优雅降级和渐进增强。</p><ol><li>优雅降级：一开始构建完备功能，向低版本兼容。</li><li>渐进增强：针对低版本构建页面，保证基本功能，然后再针对高版本进行效果、交互等改进和追加功能。</li></ol></li><li><p>浏览器内核：</p><table><thead><tr><th align="center">浏览器</th><th align="center">内核</th></tr></thead><tbody><tr><td align="center">IE</td><td align="center">trident</td></tr><tr><td align="center">Firefox</td><td align="center">gecko</td></tr><tr><td align="center">Safari</td><td align="center">webkit</td></tr><tr><td align="center">Opera、Chrome</td><td align="center">blink</td></tr></tbody></table></li><li><p><code>cookie</code>、<code>sessionStorage</code>、<code>localStorage</code>区别：</p><ol><li>相同点：都存储在客户端</li><li>不同点：<ol><li>存储大小<ul><li><code>cookie</code>：不超过4K</li><li><code>sessionStorage</code>和<code>localStorage</code>：可以达到5M</li></ul></li><li>有效时间<ul><li><code>localStorage</code>：主动删除</li><li><code>sessionStorage</code>：浏览器关闭自动删除</li><li><code>cookie</code>：过期时间之前一直存放。</li></ul></li><li>数据交互方式<ul><li><code>cookie</code>：数据自动传递</li><li><code>sessionStorage</code>、<code>localStorage</code>：仅本地保存</li></ul></li></ol></li></ol></li><li><p>添加、移除、移动、复制、创建和查找节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新节点</span></span><br><span class="line">createDocumentFragment() <span class="comment">// 创建DOM片段</span></span><br><span class="line">createElement() <span class="comment">// 创建具体元素</span></span><br><span class="line">createTextNode() <span class="comment">// 创建文本节点</span></span><br><span class="line"><span class="comment">// 增、删、改、插</span></span><br><span class="line">appendChild()</span><br><span class="line">removeChild()</span><br><span class="line">replaceChild()</span><br><span class="line">insertBefore()</span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line">getElementById()  <span class="comment">// Id,唯一性</span></span><br><span class="line">getElementByName() <span class="comment">// 元素 Name 属性</span></span><br><span class="line">getElementByTagName() <span class="comment">// 标签</span></span><br><span class="line">getElementAttribute() <span class="comment">// 元素节点属性值</span></span><br></pre></td></tr></table></figure></li><li><p>如何消除一个数组里面重复的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr1.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr2.indexOf(arr1[i])&lt;<span class="number">0</span>)&#123;</span><br><span class="line">arr2.push(arr1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br></pre></td></tr></table></figure></li><li><p>什么是伪数组，如何将伪数组转化为标准数组？</p><ol><li><p>伪数组（类数组）：无法直接调用数组方法或期望<code>length</code>属性有什么特殊的行为，但仍可以使用真正数组遍历方法遍历。</p></li><li><p>典型的是函数的<code>argument</code>参数，还有像调用<code>getElementByTagName</code>、<code>document.childNodes</code>之类的，他们都返回<code>NodeList</code>对象都属于伪数组。</p></li><li><p>可使用<code>Array.prototype.slice.call(fakeArray)</code>转化为标准数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 为了使用 unshift 数组方法，将 argument 转化为数组</span></span><br><span class="line">    args.unshift(<span class="string">'app'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>JS 基本数据类型：</p><ol><li>原始数据类型：<code>number</code>、<code>null</code>、<code>string</code>、<code>boolean</code>、<code>underfine</code></li><li>引用类型：<code>Object</code>、<code>Array</code></li></ol><ul><li><strong>注意</strong>：<code>typeOf</code>对<code>null</code>类型返回的是<code>Object</code></li></ul></li><li><p>作用域链</p><p>​        当执行一段JS代码（全局代码/函数）时，JS引擎会创建一个作用域，又称为执行上下文，在页面加载后会首先创建一个全局的作用域，从而形成了一条作用域链，链头就是当前函数作用域。</p><p>​        作用域链的作用是用于解析标识符，当函数被<strong>创建</strong>时，会将<code>this.arguments</code>、命名参数和该函数中的所有局部变量添加到该当前作用域中。当JS需要查找变量 x 的时候（变量解析），它首先会从作用域链中的链尾也就是当前作用域查找是否有 x 属性，如果没有找到就顺着作用域链继续查找，找到链头，找不到则说明不存在 x 变量，抛出引用错误（<code>ReferenceError</code>）异常。</p></li><li><p>原型链</p><p>​        JS中的每个对象都有一个<code>prototype</code>属性，称为<strong>原型</strong>。而原型的值也是一个对象，原型链的链头是<code>Object</code>，它的<code>prototype</code>值为<code>null</code>。</p><p>​        原型链的作用是用于对象继承，函数 A 的原型属性（<code>prototype property</code>）是一个对象，当这个函数被用作构造函数创建实例时，该函数的原型属性将被作为原型赋值给所有对象实例。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/14004_3bd3e42071.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://moxuan.xyz/categories/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="笔记" scheme="https://moxuan.xyz/categories/%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="总结" scheme="https://moxuan.xyz/categories/%E9%9D%A2%E8%AF%95/%E7%AC%94%E8%AE%B0/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端" scheme="https://moxuan.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://moxuan.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>负能量的一天</title>
    <link href="https://moxuan.xyz/2020/02/23/%E8%B4%9F%E8%83%BD%E9%87%8F%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
    <id>https://moxuan.xyz/2020/02/23/负能量的一天/</id>
    <published>2020-02-23T08:58:47.000Z</published>
    <updated>2020-04-03T14:35:11.240Z</updated>
    
    <content type="html"><![CDATA[<p>自从12月底回家以后，没出去过几次，再加上这次新冠肺炎的居家隔观察更是没有机会出去了。今天其实心里挺乱的，总是在想我学的这些到头来能用上的有多少？还没有找工作，毕业以后怎么办？回老家还是去大城市发展？我女朋友要不要跟我一起去等等的一些问题，也可能是我自己给自己无形中增加的压力吧，也在想要不今天就算了，不学了，放松一下，看看电影，打打游戏之类的。</p><a id="more"></a><p>可是转念再想想，做了这么多到头来什么也不是，好像停不下来，可是又没有什么可以替代的。我总是在找事情做，不敢停下来，害怕空虚，害怕自己停下来就会内心充满罪恶感。可是我现在做的这些让我觉得我在敷衍着这一切，心想只要我在忙，只要我有事情可以做就不会找不到工作，就不会没有以后。</p><p>静下心来好好想想，所有的付出，所有的委屈，在这一刻终于忍不住了。都说成年人的崩溃是一瞬间的，只有身临其境，才能体会到那种孤独与无助，过去的一幕幕在眼前一遍又一遍地上演，过去受过的伤，爱过的人，所有的一切，也不过如此。</p><p>又是慢慢负能量的一天，但也是敞开心扉，重新拥抱世界的一天，加油，所有的付出，所有的汗水，都将会得到应有归属。</p><p>2020年2月23日</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从12月底回家以后，没出去过几次，再加上这次新冠肺炎的居家隔观察更是没有机会出去了。今天其实心里挺乱的，总是在想我学的这些到头来能用上的有多少？还没有找工作，毕业以后怎么办？回老家还是去大城市发展？我女朋友要不要跟我一起去等等的一些问题，也可能是我自己给自己无形中增加的压力吧，也在想要不今天就算了，不学了，放松一下，看看电影，打打游戏之类的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="https://moxuan.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="https://moxuan.xyz/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS提升笔记</title>
    <link href="https://moxuan.xyz/2020/02/23/JS%E6%8F%90%E5%8D%87/"/>
    <id>https://moxuan.xyz/2020/02/23/JS提升/</id>
    <published>2020-02-23T06:59:38.000Z</published>
    <updated>2020-04-03T14:35:07.749Z</updated>
    
    <content type="html"><![CDATA[<p>边看教程边记得笔记，便于以后复查，只是记录了一些自己记忆比较模糊的内容以及提高的内容。</p><a id="more"></a><h3 id="第一部分：js基础"><a href="#第一部分：js基础" class="headerlink" title="第一部分：js基础"></a>第一部分：js基础</h3><ol><li>变量冻结</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> HOST = <span class="string">"host"</span>;</span><br><span class="line"><span class="built_in">Object</span>.freeze(HOST);</span><br><span class="line"><span class="keyword">let</span> HOST = <span class="string">"sws"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(HOST);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>传值、传址</p><p> 基本类型的复制是值的复制，互相不影响。</p><p> 引用类型变量保存的是引用对象的指针。</p></li><li><p>严格模式</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript"><span class="meta">    "use strict"</span>  <span class="comment">// 开启严格模式</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 严格模式的作用域向下查找。</p></li></ol><h3 id="第二部分：运算符和流程控制"><a href="#第二部分：运算符和流程控制" class="headerlink" title="第二部分：运算符和流程控制"></a>第二部分：运算符和流程控制</h3><ol><li><p>for循环跳出使用标签形式</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">houdunren: <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    sws: <span class="keyword">for</span> (<span class="keyword">let</span> n=<span class="number">0</span>; n&lt;<span class="number">10</span>; n++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i, n)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n+i &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span> houdunren;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在循环前面添加标签，可以在条件满足后直接跳出循环。</p></li><li><p><code>for-in</code>、<code>for-of</code>区别</p><p> <code>for-in</code>:遍历取索引，按索引取值</p><p> <code>for-of</code>:遍历取值</p></li></ol><h3 id="第三部分：值类型使用"><a href="#第三部分：值类型使用" class="headerlink" title="第三部分：值类型使用"></a>第三部分：值类型使用</h3><ol><li><p>标签模板</p><p> 在模板语法前面加一个函数名，然后通过该函数对模板进行二次处理。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"墨轩"</span></span><br><span class="line">    link <span class="string">`我的博客是`</span>&lt;a href=<span class="string">"www.moxuan.xyz"</span>&gt;$&#123;str&#125;&lt;<span class="regexp">/a&gt;``</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function link(strings, ...vars)&#123;</span></span><br><span class="line"><span class="regexp">    console.log(strings)</span></span><br><span class="line"><span class="regexp">    console.log(vars)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串截取</p><p> <code>slice()</code>、<code>substring()</code>、<code>substr()</code>的区别</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"www.moxuan.xyz"</span>;</span><br><span class="line">str.slice(<span class="number">1</span>)  <span class="comment">// "ww.moxuan.xyz"</span></span><br><span class="line">str.slice(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment">// "ww."</span></span><br><span class="line">str.substring(<span class="number">1</span>)  <span class="comment">// "ww.moxuan.xyz"</span></span><br><span class="line">str.substring(<span class="number">1</span>,<span class="number">4</span>)  <span class="comment">// "ww."</span></span><br><span class="line">str.substr(<span class="number">1</span>)  <span class="comment">// "ww.moxuan.xyz"</span></span><br><span class="line">str.substr(<span class="number">1</span>,<span class="number">4</span>)  <span class="comment">// "ww.m"</span></span><br></pre></td></tr></table></figure><p> 如果只有一个参数，且该参数为正数，那么三个函数作用相同，都是以该参数为下标向后截取。</p><p> 如果有两个参数，第二个参数为截断位置，<code>slice()</code>和<code>substring()</code>作用相同，都截取到第二个参数的前一个，<code>substr()</code>包括第二个参数。</p><p> 如果参数为负数，<code>substring()</code>一直为空，<code>slice()</code>和<code>substr()</code>从后往前截取，<code>substring()</code>多一位。</p></li><li><p>重复生成指定字符串：<code>repeat()</code>函数</p></li><li><p>数值计算</p><ul><li>四舍五入：<code>Math.toFixed()</code></li><li>向上取整：<code>Math.ceil()</code></li><li>向下取整：<code>Math.floor()</code></li><li>指定区间：<code>Math.floor(Math.random() * (Max+1))</code></li></ul></li><li><p>时间处理的库：<code>moment.js</code></p></li></ol><h3 id="第四部分：数组"><a href="#第四部分：数组" class="headerlink" title="第四部分：数组"></a>第四部分：数组</h3><ol><li><p>调试时可以使用<code>console.table(arr)</code>以表格的形式在控制台输出。</p></li><li><p>通过<code>new Array()</code>创建对象</p><ul><li>如果是多个元素，正常创建。</li><li>如果数组中只有一个元素，则需要通过<code>Array.of()</code>来创建。</li></ul></li><li><p>清空数组</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> hd = arr</span><br><span class="line">hd = []</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">hd.length = <span class="number">0</span></span><br></pre></td></tr></table></figure><p> 两种方法的区别：</p><ul><li><code>hd = []</code>会新开辟一块内存地址，元素为空。</li><li><code>hd.length = 0</code>是将原数组清空，<code>arr</code>和<code>hd</code>都为空。</li></ul></li><li><p>查找元素</p><ul><li>indexOf：返回索引，如果找不到，返回 -1；</li><li>includes：找到返回true，找不到返回false；</li><li>lastindexOf：从右侧开始查找，返回索引，找不到返回 -1；</li><li>find：返回值。找不到返回 undefined</li><li>findIndex:返回索引</li></ul></li></ol><h3 id="第五部分：Symbol"><a href="#第五部分：Symbol" class="headerlink" title="第五部分：Symbol"></a>第五部分：Symbol</h3><ol><li><p>定义为Symbol具有唯一性</p></li><li><p>可以用于定义对象的私有属性。</p></li></ol><h3 id="第六部分：set和WeakSet类型"><a href="#第六部分：set和WeakSet类型" class="headerlink" title="第六部分：set和WeakSet类型"></a>第六部分：set和WeakSet类型</h3><ol><li><p>set的方法</p><ul><li>add：添加</li><li>has：判断是否存在</li><li>size：统计元素个数</li><li>values：显示元素</li><li>delete：删除元素</li><li>clear：清空集合</li></ul></li><li><p>集合元素不重复。</p></li><li><p>使用<code>forEach</code>遍历set。</p></li><li><p>并集、交集、差集</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]));</span><br><span class="line"><span class="comment">// Set(5) &#123;1, 2, 3, 4, 8&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Set</span>(</span><br><span class="line">        [...a].filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 差集</span></span><br><span class="line">            <span class="comment">// return !b.has(item)</span></span><br><span class="line">            <span class="comment">// Set(1) &#123;8&#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 并集</span></span><br><span class="line">            <span class="keyword">return</span> b.has(item)</span><br><span class="line">            <span class="comment">// Set(4) &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>WeakSet()里面填的必须是引用类型。</p></li><li><p>WeakSet有<strong>弱引用</strong>特性。</p></li></ol><h3 id="第七部分：Map和WeakMap"><a href="#第七部分：Map和WeakMap" class="headerlink" title="第七部分：Map和WeakMap"></a>第七部分：Map和WeakMap</h3><ol><li><p>添加元素使用set()</p></li><li><p>遍历使用<code>for-of</code>或者<code>forEach</code></p></li><li><p>WeakMap的键只能是对象。</p></li><li><p>与WeakSet类似，都是弱引用类型。</p></li></ol><h3 id="第八部分：函数"><a href="#第八部分：函数" class="headerlink" title="第八部分：函数"></a>第八部分：函数</h3><ol><li><p>函数参数可以接受任何类型</p></li><li><p>递归</p><ul><li>考虑两层即可</li><li>考虑返回的条件</li></ul></li><li><p>this指<strong>当前</strong>对象的引用</p></li><li><p><code>call/call/bind</code> 改变 this 指针。</p><ul><li><p><code>call</code>与<code>apply</code>用于显示的设置函数的上下文，两种方法作用一样，都是将对象绑定到this，只是在传递参数上有所不同。</p></li><li><p><code>call</code>与<code>apply</code> 会立即执行。</p></li><li><p><code>bind</code> 是将函数绑定到某个对象上。</p></li><li><p><code>bind</code> 不会立即执行，复制函数返回新函数。</p></li></ul></li></ol><h3 id="第九部分：闭包和作用域"><a href="#第九部分：闭包和作用域" class="headerlink" title="第九部分：闭包和作用域"></a>第九部分：闭包和作用域</h3><ol><li><p>全局环境不会被回收。</p></li><li><p>var关键字没有块级作用域</p></li><li><p>闭包内存泄漏的解决方法：将对象指向 null，手动清除。</p></li><li><p>闭包中<code>this</code>指向<code>window</code>,可以使用变量将<code>this</code>进行保存,或者使用箭头函数。</p></li><li><p>闭包指子函数可以访问外部作用域变量的函数特征，即使在子函数作用域外也可以访问。</p><ul><li>JS中的所有函数都是闭包。</li><li>闭包一般在子函数本事作用域以外执行，即延伸作用域。</li></ul></li></ol><h3 id="第十部分：对象"><a href="#第十部分：对象" class="headerlink" title="第十部分：对象"></a>第十部分：对象</h3><ol><li><p>对象属性检测</p><ul><li><code>hasOwnProperty()</code>：只检测自己本身的属性</li><li><code>in</code>：检测本身和父级属性</li></ul></li><li><p>深拷贝和浅拷贝</p></li></ol><ul><li><p>浅拷贝：只对对象属性的一层进行复制。</p><ul><li>直接赋值给变量;</li><li><code>Object.assign({}, hd)</code>;</li><li>解构赋值。</li><li><code>for-in</code>循环</li></ul></li><li><p>深拷贝：对对象属性的所有层级进行复制。</p><ul><li><p>递归对象;</p></li><li><p><code>Object.entries()</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断需要复制的是数组还是对象;</span></span><br><span class="line">    <span class="keyword">let</span> res = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [k,v] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj))&#123;</span><br><span class="line">        res[k] = <span class="keyword">typeof</span> v == <span class="string">"object"</span>?copy(v):v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="3"><li><p>控制对象属性是否可更改</p><ul><li><code>Object.preventExtensible()</code>阻止修改对象属性。</li><li><code>Object.seal()</code>封闭对象。</li><li><code>Object.freeze()</code>冻结对象。</li></ul></li></ol><h5 id="访问器"><a href="#访问器" class="headerlink" title="访问器"></a>访问器</h5><ol start="4"><li><p>使用访问器保护数据<code>set</code>和<code>get</code>关键字</p></li><li><p>可以使用访问器伪造属性</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Lesson = &#123;</span><br><span class="line">    lists: [</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"js"</span>, <span class="attr">price</span>:<span class="number">100</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"css"</span>, <span class="attr">price</span>:<span class="number">200</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"html"</span>, <span class="attr">price</span>:<span class="number">20</span>&#125;, </span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 使用访问器伪造属性</span></span><br><span class="line">    <span class="keyword">get</span> total()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.lists.reduce(<span class="function">(<span class="params">t, l</span>) =&gt;</span> t+l.price, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Lesson.total)</span><br></pre></td></tr></table></figure></li><li><p>对于构造函数使用<code>Object.defineProperties()</code>创建访问器。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;name,age&#125;；</span><br><span class="line">    <span class="built_in">Object</span>.defineProperties(<span class="keyword">this</span>, &#123;</span><br><span class="line">        name: &#123;</span><br><span class="line">            <span class="comment">// 访问器</span></span><br><span class="line">            <span class="keyword">get</span>()&#123;&#125;,</span><br><span class="line">            <span class="keyword">set</span>()&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="代理Proxy对象"><a href="#代理Proxy对象" class="headerlink" title="代理Proxy对象"></a>代理<code>Proxy对象</code></h5><ol start="7"><li><p>对象代理</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hd = &#123;<span class="attr">name</span>: <span class="string">"墨轩"</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(hd, &#123;</span><br><span class="line">    <span class="keyword">get</span>(obj, property)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj[property];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(obj, property, value)&#123;</span><br><span class="line">         obj[property] = value;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.name);</span><br><span class="line"><span class="comment">// 墨轩</span></span><br></pre></td></tr></table></figure></li><li><p>函数代理</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"墨轩"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(a, &#123;</span><br><span class="line">    apply(fun, obj, args)&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h5 id="JSON数据处理-序列化"><a href="#JSON数据处理-序列化" class="headerlink" title="JSON数据处理(序列化)"></a>JSON数据处理(序列化)</h5><ol start="9"><li><p><code>JSON.stringify()</code>将数据转换成JSON。</p></li><li><p><code>JSON.parse()</code>将JSON转换成js对象。</p></li><li><p>JSON序列化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    name: <span class="string">"墨轩"</span>,</span><br><span class="line">    toJSON: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="keyword">this</span>,name  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> json = <span class="built_in">JSON</span>.stringify(json)</span><br></pre></td></tr></table></figure></li></ol><h3 id="第十一部分：原型和继承"><a href="#第十一部分：原型和继承" class="headerlink" title="第十一部分：原型和继承"></a>第十一部分：原型和继承</h3><ol><li>每个对象都有一个原型<code>prototype</code>对象，通过函数创建的对象也将拥有这个原型对象，原型是一个指向对象的指针。</li></ol><ul><li>所有函数的原型默认是<code>Object</code>的实例。</li><li>使用原型对象为多个对象共享属性或方法。</li><li>使用原型可以解决通过构造函数创建对象时复制多个函数造成的内存占用问题。</li><li>如果对象本身不存在属性或方法将到原型上查找。</li><li>原型包含<code>constructor</code>属性，指向构造函数。</li><li>对象包含<code>__proto__</code>指向他的原型对象。</li></ul><ol start="2"><li><p>函数拥有多个原型，<code>prototype</code>用于实例对象使用，<code>__proto__</code>用于函数对象使用。</p></li><li><p>可以使用<code>setPrototypeOf</code>和<code>getPrototypeOf</code>设置与获取原型。</p></li><li><p>原型链是通过引用类型的原型，继承另一个引用类型的属性和方法，这也是实现继承的步骤。</p></li><li><p>原型链检测</p><ul><li><code>instanceof</code>检测<strong>构造函数</strong>的<code>prototype</code>属性是否出现杂某个实例对象的原型链上。</li><li><code>isPrototypeOf()</code>检测一个<strong>对象</strong>是否在另一个对象的原型链中。</li></ul></li><li><p><code>this</code>和原型没有关系。</p></li><li><p>继承是原型的继承。</p></li><li><p>JS没有多继承。</p></li><li><p><code>super</code>就等于<code>this.__proto__</code>,指当前类的原型。</p></li></ol><h3 id="第十二部分：ES6的类"><a href="#第十二部分：ES6的类" class="headerlink" title="第十二部分：ES6的类"></a>第十二部分：ES6的类</h3><ol><li><p>类的内部工作机制就是原型操作。</p></li><li><p>用<code>static</code>关键字申明静态属性或方法。</p></li><li><p>使用类直接调用的是静态方法，而实例化以后调用的是原型方法。</p></li><li><p>私有属性在变量前加<code>#</code>。</p></li><li><p><code>super()</code>继承，访问父类的方法。</p></li></ol><h3 id="第十三部分：模块化"><a href="#第十三部分：模块化" class="headerlink" title="第十三部分：模块化"></a>第十三部分：模块化</h3><ol><li><p>使用<code>script</code>标签进行模块导入时，需要加<code>type=&quot;module&quot;</code>属性。</p></li><li><p>模块使用<strong>后加载</strong>。</p></li><li><p>默认导出只能有一个。</p></li><li><p>使用<code>import()函数</code>，使用<code>permise</code>按需动态加载。</p></li></ol><h3 id="第十四部分：js正则"><a href="#第十四部分：js正则" class="headerlink" title="第十四部分：js正则"></a>第十四部分：js正则</h3><ol><li><p>常用正则表达式 <a href="https://mubu.com/doc/2u4pVMd5y_s" target="_blank" rel="noopener">https://mubu.com/doc/2u4pVMd5y_s</a></p></li><li><p><code>lastIndex</code>属性用于控制正则表达式开始的位置。使用<code>exec()</code>方法</p></li><li><p><code>[]</code>中的字符不解析。</p></li><li><p>匹配所有内容可以使用<code>[\s\S]</code>或者<code>[\d\D]</code>。</p></li><li><p>分组后，使用<code>?:</code>可以忽略匹配到的分组，不能使用<code>\1</code>或者<code>$1</code>获取分组内容。</p></li><li><p><code>$&amp;</code>表示正则表达式的内容。</p></li><li><p>别名<code>$&lt;名称&gt;</code>，使用<code>$&lt;名称&gt;</code></p></li><li><p>断言匹配</p></li></ol><ul><li><code>($=条件)</code>：匹配后面满足条件的</li><li><code>($&lt;=条件)</code>：匹配前面满足条件的</li><li><code>(?!条件)</code>：限制后面不是条件的</li><li><code>(?&lt;!条件)</code>：限制前面不是条件的</li></ul><h3 id="第十五部分：异步"><a href="#第十五部分：异步" class="headerlink" title="第十五部分：异步"></a>第十五部分：异步</h3><ol><li><p>任务：先进先执行。</p></li><li><p><code>Promise</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Ppromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">"成功状态"</span>);</span><br><span class="line">    <span class="comment">// reject("失败状态") </span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">&#125;, reason=&gt; &#123;</span><br><span class="line">    <span class="comment">// 失败</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>微任务优于宏任务执行。</p></li><li><p>执行顺序：主线程 -&gt; 微任务 -&gt; 宏任务 -&gt; setTimeout</p></li><li><p>错误监测</p></li></ol><ul><li>本身的reject</li><li>catch()方法 </li><li>finally()：无论状态是成功还是失败都会执行，也就是与状态无关。</li></ul><ol start="6"><li><p><code>Promise.resolve()</code>和<code>Promise.reject()</code>默认执行方法。</p></li><li><p><code>Promise.all()</code>批量处理Promise。</p></li><li><p><code>Promise.race()</code>:可以定义多个Promise，处理返回最快的结果。</p></li><li><p><code>async</code>和<code>await</code>异步处理。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> ajax(<span class="string">`http://localhost:8888/php/user.php?name=<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span>("墨轩").then(user =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="10"><li><p>async 内部发生错误，会将 promise 对象变为<code>reject</code>状态，所以使用<code>catch()</code>方法来处理。</p></li><li><p>标准错误处理使用<code>try-catch</code>。</p></li><li><p>使用<code>Promise.all()</code>可以处理多个 promise 并行执行。</p></li></ol><h3 id="第十六部分：任务管理"><a href="#第十六部分：任务管理" class="headerlink" title="第十六部分：任务管理"></a>第十六部分：任务管理</h3><ol><li><p>JS是单线程。</p></li><li><p>定时器模块是代码执行就开始计时。</p></li><li><p>使用定时器或者Promise的方式来进行任务的拆分，减少对主线程的干扰。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"runtime"</span>);</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">987654321</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    count += num--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    setTimeout(hd);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="built_in">console</span>.log(count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">hd();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"houdunren.com"</span>); <span class="comment">//立刻显示出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">      count += num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br><span class="line">hd(<span class="number">987654321</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"后盾人"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;边看教程边记得笔记，便于以后复查，只是记录了一些自己记忆比较模糊的内容以及提高的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://moxuan.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://moxuan.xyz/categories/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://moxuan.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://moxuan.xyz/tags/JavaScript/"/>
    
      <category term="笔记" scheme="https://moxuan.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python3下载并合并m3u8文件</title>
    <link href="https://moxuan.xyz/2020/01/28/Python3%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%90%88%E5%B9%B6m3u8%E6%96%87%E4%BB%B6/"/>
    <id>https://moxuan.xyz/2020/01/28/Python3下载并合并m3u8文件/</id>
    <published>2020-01-28T02:37:54.000Z</published>
    <updated>2020-04-03T14:35:10.910Z</updated>
    
    <content type="html"><![CDATA[<p>前两天看见鬼刀在B站发的一个视频，然后网上找了好久没有找到，决定自己动手从他的官网下载一份，说干就干。</p><p><img src="/2020/01/28/Python3%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%90%88%E5%B9%B6m3u8%E6%96%87%E4%BB%B6/wolp.png" alt></p><a id="more"></a><h2 id="什么是m3u8文件"><a href="#什么是m3u8文件" class="headerlink" title="什么是m3u8文件"></a>什么是m3u8文件</h2><p><strong>M3U8文件是指UTF-8编码格式的M3U文件。</strong></p><p>M3U文件是记录了一个索引纯文本文件，打开它时播放软件并不是播放它，而是根据它的索引找到对应的音视频文件的网络地址进行在线播放。</p><p>原视频数据分割为很多个TS流，每个TS流的地址记录在m3u8文件列表中。</p><p>下面这个就是一个m3u8文件</p><blockquote><p><strong>#EXTM3U</strong></p><p><strong>#EXT-X-VERSION:3</strong></p><p><strong>#EXT-X-MEDIA-SEQUENCE:0</strong></p><p><strong>#EXT-X-ALLOW-CACHE:YES</strong></p><p><strong>#EXT-X-TARGETDURATION:15</strong></p><p><strong>#EXTINF:6.916667,</strong></p><p><strong>out000.ts</strong></p><p><strong>#EXTINF:10.416667,</strong></p><p><strong>out001.ts</strong></p><p><strong>#EXTINF:10.416667,</strong></p><p><strong>out002.ts</strong></p><p><strong>#EXTINF:1.375000,</strong></p><p><strong>out003.ts</strong></p><p><strong>#EXTINF:1.541667,</strong></p></blockquote><h3 id="关于m3u8格式的视频文件ts转mp4下载和key加密问题"><a href="#关于m3u8格式的视频文件ts转mp4下载和key加密问题" class="headerlink" title="关于m3u8格式的视频文件ts转mp4下载和key加密问题"></a><a href="https://www.cnblogs.com/String-Lee/p/11391893.html" target="_blank" rel="noopener">关于m3u8格式的视频文件ts转mp4下载和key加密问题</a></h3><h2 id="视频下载"><a href="#视频下载" class="headerlink" title="视频下载"></a>视频下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> m3u8</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> iglob</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> natsort <span class="keyword">import</span> natsorted</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">UserAgent = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownLoadM3U8</span><span class="params">(object)</span>:</span></span><br><span class="line">    m3u8_url: str</span><br><span class="line">    file_name: str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__post_init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建线程池</span></span><br><span class="line">        self.thread_pool = ThreadPoolExecutor(max_workers=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.file_name:</span><br><span class="line">            self.file_name = <span class="string">'new.mp4'</span></span><br><span class="line">        <span class="comment"># 加载m3u8的URL</span></span><br><span class="line">        self.m3u8_obj = m3u8.load(self.m3u8_url)</span><br><span class="line">        <span class="comment"># 解密</span></span><br><span class="line">        self.cryptor = self.get_key()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取key进行解密，这里可以获取method加密方式进行解密</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.m3u8_obj.keys <span class="keyword">and</span> self.m3u8_obj.keys[<span class="number">0</span>]:</span><br><span class="line">            res = requests.get(self.m3u8_obj.keys[<span class="number">0</span>].absolute_uri, headers=&#123;<span class="string">'User-Agent'</span>: UserAgent&#125;)</span><br><span class="line">            <span class="comment"># AES 解密</span></span><br><span class="line">            <span class="keyword">return</span> AES.new(res.content, AES.MODE_CBC, res.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_ts_url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> seg <span class="keyword">in</span> self.m3u8_obj.segments:</span><br><span class="line">            <span class="keyword">yield</span> urljoin(self.m3u8_obj.base_uri, seg.uri)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_ts</span><span class="params">(self, url_info)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        下载ts文件，写入时如果有加密需要解密</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        url, ts_name = url_info</span><br><span class="line">        res = requests.get(url, headers=&#123;<span class="string">'User-Agent'</span>: UserAgent&#125;)</span><br><span class="line">        <span class="keyword">with</span> open(ts_name, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">if</span> self.cryptor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                fp.write(self.cryptor.decrypt(res.content))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fp.write(res.content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_all_ts</span><span class="params">(self)</span>:</span></span><br><span class="line">        ts_urls = self.get_ts_url()</span><br><span class="line">        <span class="comment"># enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标</span></span><br><span class="line">        <span class="keyword">for</span> index, ts_url <span class="keyword">in</span> enumerate(ts_urls):</span><br><span class="line">            self.thread_pool.submit(self.download_ts, [ts_url, <span class="string">f'<span class="subst">&#123;index&#125;</span>.ts'</span>])</span><br><span class="line">        <span class="comment"># 此方式可能使视频合并时顺序错乱</span></span><br><span class="line">        <span class="comment"># for file in self.m3u8_obj.files:</span></span><br><span class="line">        <span class="comment">#     url = urljoin(self.m3u8_obj.base_uri, file)</span></span><br><span class="line">        <span class="comment">#     self.thread_pool.submit(self.download_ts, [url, url[url.rfind("/") + 1:]])</span></span><br><span class="line">        self.thread_pool.shutdown()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 如果是第一层M3U8文件，那么就获取第二层的url</span></span><br><span class="line">        <span class="keyword">if</span> self.m3u8_obj.playlists <span class="keyword">and</span> self.m3u8_obj.data.get(<span class="string">"playlists"</span>):</span><br><span class="line">            self.m3u8_url = urljoin(self.m3u8_obj.base_uri, self.m3u8_obj.data.get(<span class="string">"playlists"</span>)[<span class="number">0</span>][<span class="string">"uri"</span>])</span><br><span class="line">            self.__post_init__()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.m3u8_obj.segments <span class="keyword">or</span> <span class="keyword">not</span> self.m3u8_obj.files:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"m3u8数据不正确，请检查"</span>)</span><br><span class="line">        self.download_all_ts()</span><br><span class="line">        ts_path = <span class="string">'*.ts'</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file_name, <span class="string">'wb'</span>) <span class="keyword">as</span> fn:</span><br><span class="line">            <span class="comment"># 将下载的所有 ts 文件进行排序，iglob获取文件路径，一次只获取一个</span></span><br><span class="line">            <span class="keyword">for</span> ts <span class="keyword">in</span> natsorted(iglob(ts_path)):</span><br><span class="line">                <span class="keyword">with</span> open(ts, <span class="string">'rb'</span>) <span class="keyword">as</span> ft:</span><br><span class="line">                    sc_line = ft.read()</span><br><span class="line">                    fn.write(sc_line)</span><br><span class="line">        [os.remove(ts) <span class="keyword">for</span> ts <span class="keyword">in</span> iglob(ts_path)]</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">"key.key"</span>):</span><br><span class="line">            os.remove(<span class="string">"key.key"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># aHR0cHM6Ly93d3cuMTAyNHV1LmNjL3ZvZC9saXN0aW5nLTQtMC0wLTAtMC0wLTAtMC0wLTEuaHRtbA==</span></span><br><span class="line">    m3u8_url = <span class="string">'https://sxlt.snscz.com/s2/video/2020/01/07/22/a_zh/index.m3u8'</span></span><br><span class="line">    file_name = <span class="string">'wolp.mp4'</span></span><br><span class="line"></span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    M3U8 = DownLoadM3U8(m3u8_url, file_name)</span><br><span class="line">    M3U8.run()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'耗时:'</span>, end - start)</span><br></pre></td></tr></table></figure><h6 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h6><p><a href="https://www.bajins.com/Python/Python爬虫.html#m3u8解析下载解密合并" target="_blank" rel="noopener">https://www.bajins.com/Python/Python%E7%88%AC%E8%99%AB.html#m3u8%E8%A7%A3%E6%9E%90%E4%B8%8B%E8%BD%BD%E8%A7%A3%E5%AF%86%E5%90%88%E5%B9%B6</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天看见鬼刀在B站发的一个视频，然后网上找了好久没有找到，决定自己动手从他的官网下载一份，说干就干。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/01/28/Python3%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%90%88%E5%B9%B6m3u8%E6%96%87%E4%BB%B6/wolp.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://moxuan.xyz/categories/Python/"/>
    
      <category term="下载" scheme="https://moxuan.xyz/categories/Python/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="m3u8" scheme="https://moxuan.xyz/categories/Python/%E4%B8%8B%E8%BD%BD/m3u8/"/>
    
    
      <category term="Python" scheme="https://moxuan.xyz/tags/Python/"/>
    
      <category term="m3u8" scheme="https://moxuan.xyz/tags/m3u8/"/>
    
      <category term="下载" scheme="https://moxuan.xyz/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>hexo从Linux迁移至windows的问题解决办法</title>
    <link href="https://moxuan.xyz/2020/01/27/hexo%E4%BB%8ELinux%E8%BF%81%E7%A7%BB%E8%87%B3windows%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://moxuan.xyz/2020/01/27/hexo从Linux迁移至windows的问题解决办法/</id>
    <published>2020-01-27T07:30:43.000Z</published>
    <updated>2020-04-03T14:35:08.680Z</updated>
    
    <content type="html"><![CDATA[<p>换了新电脑以后，回到了windows系统，然后将原来电脑的所有东西都做了迁移，但是今天在进行博客恢复的时候，发现执行<code>hexo d</code>的时候无法提交到GitHub仓库去，提示：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nothing to commit, working directory clean</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from git@github.com:moxuan-jst/moxuan-jst.github.io.git.</span><br><span class="line">Everything up-to-<span class="built_in">date</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">Permission denied (publickey).</span><br><span class="line"><span class="function">fatal: <span class="title">Could</span> <span class="title">not</span> <span class="title">read</span> <span class="title">from</span> <span class="title">remote</span> <span class="title">repository</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Please</span> <span class="title">make</span> <span class="title">sure</span> <span class="title">you</span> <span class="title">have</span> <span class="title">the</span> <span class="title">correct</span> <span class="title">access</span> <span class="title">rights</span></span></span><br><span class="line"><span class="function"><span class="title">and</span> <span class="title">the</span> <span class="title">repository</span> <span class="title">exists</span>.</span></span><br><span class="line"><span class="function"><span class="title">FATAL</span> <span class="title">Something</span>'<span class="title">s</span> <span class="title">wrong</span>. <span class="title">Maybe</span> <span class="title">you</span> <span class="title">can</span> <span class="title">find</span> <span class="title">the</span> <span class="title">solution</span> <span class="title">here</span>: <span class="title">https</span>://<span class="title">hexo.io</span>/<span class="title">docs</span>/<span class="title">troubleshooting.html</span></span></span><br><span class="line"><span class="function"><span class="title">Error</span>: <span class="title">Spawn</span> <span class="title">failed</span></span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">ChildProcess</span>.&lt;<span class="title">anonymous</span>&gt; (<span class="title">D</span>:\<span class="title">wenjian</span>\<span class="title">demo</span>\<span class="title">blog</span>\<span class="title">node_modules</span>\<span class="title">hexo</span>-<span class="title">util</span>\<span class="title">lib</span>\<span class="title">spawn.js</span>:51:21)</span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">ChildProcess.emit</span> (<span class="title">events.js</span>:223:5)</span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">ChildProcess.cp.emit</span> (<span class="title">D</span>:\<span class="title">wenjian</span>\<span class="title">demo</span>\<span class="title">blog</span>\<span class="title">node_modules</span>\<span class="title">cross</span>-<span class="title">spawn</span>\<span class="title">lib</span>\<span class="title">enoent.js</span>:34:29)</span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">Process.ChildProcess._handle.onexit</span> (<span class="title">internal</span>/<span class="title">child_process.js</span>:272:12)</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>网上找了好多方案，但是都没有成功，没有办法，只能将原来的GitHub仓库删除重新创建一个，然后将ssh-key也重新上传，完了以后还是不行。</p><p>快要放弃重新再从头做一遍的时候，突然想起来在<code>_config.yml</code>中配置过两个仓库地址，一个GitHub的，还有一个是coding的仓库，将coding的仓库删除以后，再次执行<code>hexo d</code>运行成功。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">    github:</span> <span class="string">git@github.com:xxxxxx/xxxxxxx.github.io.git</span></span><br><span class="line"><span class="attr">    coding:</span> <span class="string">git@git.dev.tencent.com:xxxxxx/xxxxxxx.coding.me.git(删除)</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;换了新电脑以后，回到了windows系统，然后将原来电脑的所有东西都做了迁移，但是今天在进行博客恢复的时候，发现执行&lt;code&gt;hexo d&lt;/code&gt;的时候无法提交到GitHub仓库去，提示：&lt;/p&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nothing to commit, working directory clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Branch master &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; up to track remote branch master from git@github.com:moxuan-jst/moxuan-jst.github.io.git.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Everything up-to-&lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;On branch master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nothing to commit, working directory clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Permission denied (publickey).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;fatal: &lt;span class=&quot;title&quot;&gt;Could&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remote&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;repository&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Please&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sure&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rights&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exists&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;FATAL&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Something&lt;/span&gt;&#39;&lt;span class=&quot;title&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wrong&lt;/span&gt;. &lt;span class=&quot;title&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;here&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;https&lt;/span&gt;://&lt;span class=&quot;title&quot;&gt;hexo.io&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;docs&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;troubleshooting.html&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Error&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Spawn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;failed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;span class=&quot;title&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ChildProcess&lt;/span&gt;.&amp;lt;&lt;span class=&quot;title&quot;&gt;anonymous&lt;/span&gt;&amp;gt; (&lt;span class=&quot;title&quot;&gt;D&lt;/span&gt;:\&lt;span class=&quot;title&quot;&gt;wenjian&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;demo&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;blog&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;node_modules&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;hexo&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;util&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;lib&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;spawn.js&lt;/span&gt;:51:21)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;span class=&quot;title&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ChildProcess.emit&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;events.js&lt;/span&gt;:223:5)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;span class=&quot;title&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ChildProcess.cp.emit&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;D&lt;/span&gt;:\&lt;span class=&quot;title&quot;&gt;wenjian&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;demo&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;blog&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;node_modules&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;cross&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;spawn&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;lib&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;enoent.js&lt;/span&gt;:34:29)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;span class=&quot;title&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Process.ChildProcess._handle.onexit&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;internal&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;child_process.js&lt;/span&gt;:272:12)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://moxuan.xyz/categories/hexo/"/>
    
      <category term="记录" scheme="https://moxuan.xyz/categories/hexo/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="hexo" scheme="https://moxuan.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>http/2的新特性</title>
    <link href="https://moxuan.xyz/2020/01/01/http-2%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://moxuan.xyz/2020/01/01/http-2的新特性/</id>
    <published>2020-01-01T08:28:33.000Z</published>
    <updated>2020-04-03T14:35:07.559Z</updated>
    
    <content type="html"><![CDATA[<h3 id="http-1-1的缺陷"><a href="#http-1-1的缺陷" class="headerlink" title="http/1.1的缺陷"></a>http/1.1的缺陷</h3><ul><li>高延迟——带来页面加载速度的降低</li><li>无状态特性——巨大的 http 头部</li><li>明文传输——不安全</li><li>不支持服务器推送消息</li></ul><h3 id="http-2"><a href="#http-2" class="headerlink" title="http/2"></a>http/2</h3><p>基于<code>SPDY</code>，专注于性能，最大的目标是在用户与网站间只用一个链接。</p><p>特性：</p><ol><li><p>二进制传输和 Header 压缩</p><p>http/2将请求和响应数据分割为更小的帧，并且采用二进制编码。</p><p>多个帧之间可以乱序发送，根据帧受不得流标识可以重新组装。</p></li><li><p>多路复用</p><p>同个域名只需要占用一个 TCP 连接，并行发送多个请求和响应。</p><p>并行交错地发送多个请求/响应，请求/响应之间互不影响。</p></li><li><p>serverPush</p><p>服务器主动把部分文件推送到客户端。</p><p>遵守同源策略。</p></li><li><p>提高安全性</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;http-1-1的缺陷&quot;&gt;&lt;a href=&quot;#http-1-1的缺陷&quot; class=&quot;headerlink&quot; title=&quot;http/1.1的缺陷&quot;&gt;&lt;/a&gt;http/1.1的缺陷&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;高延迟——带来页面加载速度的降低&lt;/li&gt;
&lt;li&gt;无状
      
    
    </summary>
    
    
      <category term="记录" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="网络" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="网络" scheme="https://moxuan.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>2019年终总结</title>
    <link href="https://moxuan.xyz/2019/12/30/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://moxuan.xyz/2019/12/30/2019年终总结/</id>
    <published>2019-12-30T08:16:27.000Z</published>
    <updated>2020-04-03T14:35:13.551Z</updated>
    
    <content type="html"><![CDATA[<p>转眼间，2019年已经接近尾声，而我计划的完成进度与我的预期还是有一定的差距，一整年的时间进入开发学习，从刚开始的Python爬虫开始入门，一直到现在的web开发，前后台知识都已了解，接下来的任务则是要扎实基础。</p><p>今年，是我开始学习编程的第一年，而这一年，也是我自认为过得最充实的一年，这么长时间，我没想到我会坚持下来，一发不可收拾，我真的很爱这个东西，很喜欢这种感觉，也很享受。</p><a id="more"></a><p>在这一年里，我开了公众号，也开了博客，虽然粉丝不多，但还是很满足，博客更像是自己的孩子一样，虽然上面的内容都是自己写的，但还是想要进去看看，看着慢慢增加的文章数量，心里也很满足。博客，是自己记录笔记，记录心事的地方，这里我不需要考虑什么，写我所想，写我所感。</p><p>一年的时间，总觉得还有好多事情在等着我完成，我把自己所有的热情都投了进来，我觉得，这件事我喜欢，那我就去做，并且做好，也正是因为喜欢，所以才有了现在的我。在公众号上看曹大，看张哥他们的公众号，感觉收获还是很多的，从上面认识学校外面的世界，了解行业的发展动向，个人认为给我的启发还是很多的。并不是所有事情都会如我所愿，但不管这件事情有多难，我都会尽我最大的努力去完成它，哪怕最后失败了，那我也尽力了，问心无愧即可。</p><p>接下来的2020年，就要面临毕业了，毕业论文，毕业设计，答辩，实习，继续学习，做项目，从项目中学习一些方法，这些便是接下来一年的任务。明年也是决定我到底要去哪里的一年了，虽然学习了这么多，但是心里总有一种畏惧的感觉，需要考虑的东西好多，不管怎样，该来的迟早回来，面对就是了。</p><p>心无旁骛，方能展翅高飞，认定的事情就做下去吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼间，2019年已经接近尾声，而我计划的完成进度与我的预期还是有一定的差距，一整年的时间进入开发学习，从刚开始的Python爬虫开始入门，一直到现在的web开发，前后台知识都已了解，接下来的任务则是要扎实基础。&lt;/p&gt;&lt;p&gt;今年，是我开始学习编程的第一年，而这一年，也是我自认为过得最充实的一年，这么长时间，我没想到我会坚持下来，一发不可收拾，我真的很爱这个东西，很喜欢这种感觉，也很享受。&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="总结" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="https://moxuan.xyz/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构与算法——BitMap</title>
    <link href="https://moxuan.xyz/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94BitMap/"/>
    <id>https://moxuan.xyz/2019/12/16/javascript数据结构与算法——BitMap/</id>
    <published>2019-12-16T12:37:59.000Z</published>
    <updated>2020-04-03T14:35:07.379Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p><code>BitMap</code>是利用了二进制来描述状态的数据结构，是一种基于位做映射的数据结构，能够用很少的内存存储数据。和数组不同，它只能表示某个数是否存在。</p></blockquote><h6 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h6><ul><li>大数据去重。</li><li>大数据排序。</li><li>两个集合取交集。</li></ul><p>需要注意的是 <code>BitMap</code> 不能处理重复的数据，且仅对证书有效。</p><p>可以通过哈希函数将字符串转换为整型。</p><a id="more"></a><h6 id="位运算介绍："><a href="#位运算介绍：" class="headerlink" title="位运算介绍："></a>位运算介绍：</h6><ul><li>按位与<code>&amp;</code>：两位同时为1则为1，否则为0。<code>3&amp;7=3</code>【<code>011 &amp; 111 --&gt; 011</code>】</li><li>按位或<code>|</code>：两位同时为0则为0，否则为1。<code>3|7=7</code>【<code>011 | 111 --&gt; 111</code>】</li><li>左移<code>&lt;&lt;</code>：将1向左移动几位。<code>1&lt;&lt;3=8</code>【<code>1 --&gt; 1000</code>】</li></ul><h6 id="BitMap-的方法"><a href="#BitMap-的方法" class="headerlink" title="BitMap 的方法"></a><code>BitMap</code> 的方法</h6><ul><li><code>addMember</code>：添加元素。</li><li><code>isExist</code>：判断元素是否存在。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BitMap</span>(<span class="params">size</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bit_arr = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</span><br><span class="line">    <span class="comment">// 初始化,将所有为置0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;bit_arr.length; i++)&#123;</span><br><span class="line">        bit_arr[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">this</span>.addMember = <span class="function"><span class="keyword">function</span> (<span class="params">member</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr_index = <span class="built_in">Math</span>.floor(member/<span class="number">32</span>);   <span class="comment">// 确定在数组中的索引</span></span><br><span class="line">        <span class="keyword">var</span> bit_index = member%<span class="number">32</span>;               <span class="comment">// 确定在整数中bit位的索引</span></span><br><span class="line"></span><br><span class="line">        bit_arr[arr_index] = bit_arr[arr_index] | <span class="number">1</span> &lt;&lt; bit_index;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断元素是否存在</span></span><br><span class="line">    <span class="keyword">this</span>.isExist = <span class="function"><span class="keyword">function</span> (<span class="params">member</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr_index = <span class="built_in">Math</span>.floor(member/<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">var</span> bit_index = member%<span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> value = bit_arr[arr_index] &amp; <span class="number">1</span> &lt;&lt; bit_index;</span><br><span class="line">        <span class="keyword">if</span>(value !=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> BitMap(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">35</span>,<span class="number">33</span>,]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    b.addMember(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.isExist(<span class="number">2</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b.isExist(<span class="number">22</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h6 id="两个集合取交集"><a href="#两个集合取交集" class="headerlink" title="两个集合取交集"></a>两个集合取交集</h6><p><strong>要求</strong>：两个数组，内容分别为[1, 4, 6, 8, 9, 10, 15], [6, 14, 9, 2, 0, 7]，请用BitMap计算他们的交集。</p><p><strong>分析</strong>：利用<code>isExist()</code>来筛选相同项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">6</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">const</span> intersectionArr = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bitMap = <span class="keyword">new</span> BitMap();</span><br><span class="line">arr1.forEach(<span class="function"><span class="params">item</span> =&gt;</span> bitMap.addMember(item))</span><br><span class="line"></span><br><span class="line">arr2.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(bitMap.isExist(item))&#123;</span><br><span class="line">        intersectionArr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(intersectionArr);   <span class="comment">// [6, 9]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;BitMap&lt;/code&gt;是利用了二进制来描述状态的数据结构，是一种基于位做映射的数据结构，能够用很少的内存存储数据。和数组不同，它只能表示某个数是否存在。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h6 id=&quot;适用场景：&quot;&gt;&lt;a href=&quot;#适用场景：&quot; class=&quot;headerlink&quot; title=&quot;适用场景：&quot;&gt;&lt;/a&gt;适用场景：&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;大数据去重。&lt;/li&gt;
&lt;li&gt;大数据排序。&lt;/li&gt;
&lt;li&gt;两个集合取交集。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;需要注意的是 &lt;code&gt;BitMap&lt;/code&gt; 不能处理重复的数据，且仅对证书有效。&lt;/p&gt;&lt;p&gt;可以通过哈希函数将字符串转换为整型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://moxuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="js" scheme="https://moxuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/js/"/>
    
      <category term="记录" scheme="https://moxuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/js/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="数据结构" scheme="https://moxuan.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="js" scheme="https://moxuan.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构与算法——链表</title>
    <link href="https://moxuan.xyz/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/"/>
    <id>https://moxuan.xyz/2019/12/16/javascript数据结构与算法——链表/</id>
    <published>2019-12-16T12:37:42.000Z</published>
    <updated>2020-04-03T14:35:13.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h4 id="表的分类："><a href="#表的分类：" class="headerlink" title="表的分类："></a>表的分类：</h4><p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8-1576546269180.png" alt></p><h6 id="顺序表两种形式"><a href="#顺序表两种形式" class="headerlink" title="顺序表两种形式"></a>顺序表两种形式</h6><ol><li><p>基本形式</p><p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8-1576546752109.png" alt></p></li><li><p>数据外置：保存地址，由地址指向数据。</p><p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217094211601.png" alt="image-20191217094211601"></p></li></ol><h4 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h4><blockquote><p>链表是一种物理上非连续的，非顺序的存储结构，数据元素之间的顺序是通过每个元素的指针关联的。</p></blockquote><h6 id="链表的类型："><a href="#链表的类型：" class="headerlink" title="链表的类型："></a>链表的类型：</h6><ul><li><p>单向链表</p><p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217100402699.png" alt="image-20191217100402699"></p></li><li><p>双向链表</p><p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217100952639.png" alt="image-20191217100952639"></p><p>一般优先使用双向链表。</p></li><li><p>单向循环链表</p></li></ul><h6 id="链表的特点："><a href="#链表的特点：" class="headerlink" title="链表的特点："></a>链表的特点：</h6><ul><li>空间不连续，导致空间开销更大。</li><li>运行时可动态添加。</li><li>查找元素按顺序查找，当链表较长时，效率低。</li><li>操作较复杂。</li></ul><a id="more"></a><h6 id="链表的优势："><a href="#链表的优势：" class="headerlink" title="链表的优势："></a>链表的优势：</h6><ul><li>克服了数组需要提前设置长度的不足。</li><li>可以灵活的使用存储空间，还能更好的对计算机内存进行动态管理。</li></ul><h6 id="链表的方法："><a href="#链表的方法：" class="headerlink" title="链表的方法："></a>链表的方法：</h6><ul><li><p><code>insert</code>：在链表头部插入节点（头插法）</p><p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217102203300.png" alt="image-20191217102203300"></p></li><li><p><code>append</code>：在链表尾部添加节点（尾插法）</p><p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217102647307.png" alt="image-20191217102647307"></p></li><li><p><code>removeAt</code>：删除指定位置节点</p></li><li><p><code>indexOf</code>：返回指定节点的位置</p></li><li><p><code>size</code>：返回链表长度</p></li><li><p><code>isEmpty</code>：判断链表是否为空</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节点类，定义节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表类，定义链表方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link_list</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data = null) &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="literal">null</span> <span class="comment">// 链表的head指针</span></span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">0</span>; <span class="comment">// 链表的长度</span></span><br><span class="line">        <span class="keyword">if</span>(data)&#123;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">new</span> Node(data);</span><br><span class="line">            <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在链表尾部添加节点</span></span><br><span class="line">    append(data)&#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> Node(data); <span class="comment">// 创建节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.head === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> curr = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">while</span>(curr.next)&#123;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">            &#125;</span><br><span class="line">            curr.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length += <span class="number">1</span>; <span class="comment">// 整个链表的长度增加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定位置的节点</span></span><br><span class="line">    removeAt(position)&#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="keyword">this</span>.length || position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>)&#123;  <span class="comment">// 删除头节点</span></span><br><span class="line">            <span class="keyword">this</span>.head = curr.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; position)&#123;</span><br><span class="line">                prev = curr;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">                index += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev.next = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length -= <span class="number">1</span>;  <span class="comment">// 长度减少</span></span><br><span class="line">        <span class="keyword">return</span> curr.data;  <span class="comment">// 返回删除节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在置顶位置插入节点</span></span><br><span class="line">    insert(position, data)&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &gt;= <span class="keyword">this</span>.length || position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span>(position === <span class="number">0</span>)&#123; <span class="comment">// 插入位置在头节点</span></span><br><span class="line">            node.next = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> curr = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; position)&#123;</span><br><span class="line">                prev = curr;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">                index += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node.next = curr;</span><br><span class="line">            prev.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指定节点的位置</span></span><br><span class="line">    indexOf(data, start=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= <span class="keyword">this</span>.length)&#123; <span class="comment">// 判断起始位置是否合法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; <span class="keyword">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curr.data === data &amp;&amp; index &gt;= start)&#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回链表的长度</span></span><br><span class="line">    size()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>,length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表是否为空</span></span><br><span class="line">    isEmpty()&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> l = <span class="keyword">new</span> Link_list();</span><br><span class="line">l.append(<span class="number">1</span>);</span><br><span class="line">l.append(<span class="number">2</span>);</span><br><span class="line">l.append(<span class="number">3</span>);</span><br><span class="line">l.append(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// console.log(l)</span></span><br><span class="line"></span><br><span class="line">l.removeAt(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// console.log(l)</span></span><br><span class="line"></span><br><span class="line">l.insert(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(l)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(l.indexOf(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(l.isEmpty())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;h4 id=&quot;表的分类：&quot;&gt;&lt;a href=&quot;#表的分类：&quot; class=&quot;headerlink&quot; title=&quot;表的分类：&quot;&gt;&lt;/a&gt;表的分类：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8-1576546269180.png&quot; alt&gt;&lt;/p&gt;&lt;h6 id=&quot;顺序表两种形式&quot;&gt;&lt;a href=&quot;#顺序表两种形式&quot; class=&quot;headerlink&quot; title=&quot;顺序表两种形式&quot;&gt;&lt;/a&gt;顺序表两种形式&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基本形式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8-1576546752109.png&quot; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据外置：保存地址，由地址指向数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217094211601.png&quot; alt=&quot;image-20191217094211601&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;链表-1&quot;&gt;&lt;a href=&quot;#链表-1&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;链表是一种物理上非连续的，非顺序的存储结构，数据元素之间的顺序是通过每个元素的指针关联的。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h6 id=&quot;链表的类型：&quot;&gt;&lt;a href=&quot;#链表的类型：&quot; class=&quot;headerlink&quot; title=&quot;链表的类型：&quot;&gt;&lt;/a&gt;链表的类型：&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单向链表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217100402699.png&quot; alt=&quot;image-20191217100402699&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双向链表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217100952639.png&quot; alt=&quot;image-20191217100952639&quot;&gt;&lt;/p&gt;
&lt;p&gt;一般优先使用双向链表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单向循环链表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h6 id=&quot;链表的特点：&quot;&gt;&lt;a href=&quot;#链表的特点：&quot; class=&quot;headerlink&quot; title=&quot;链表的特点：&quot;&gt;&lt;/a&gt;链表的特点：&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;空间不连续，导致空间开销更大。&lt;/li&gt;
&lt;li&gt;运行时可动态添加。&lt;/li&gt;
&lt;li&gt;查找元素按顺序查找，当链表较长时，效率低。&lt;/li&gt;
&lt;li&gt;操作较复杂。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://moxuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="记录" scheme="https://moxuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="js" scheme="https://moxuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%AE%B0%E5%BD%95/js/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="数据结构" scheme="https://moxuan.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="js" scheme="https://moxuan.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构与算法——队列</title>
    <link href="https://moxuan.xyz/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%98%9F%E5%88%97/"/>
    <id>https://moxuan.xyz/2019/12/16/javascript数据结构与算法——队列/</id>
    <published>2019-12-16T12:37:28.000Z</published>
    <updated>2020-04-03T14:35:08.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列（FIFO）先进先出"><a href="#队列（FIFO）先进先出" class="headerlink" title="队列（FIFO）先进先出"></a>队列（FIFO）先进先出</h2><ol><li><p>队列是一种受限的数据结构，从队尾插入，从队头移除。</p></li><li><p>队列的实现方式有两种，数组和链表</p><p>用数组实现队列有两种方式：</p><ul><li>顺序队列</li><li>循环队列</li></ul></li><li><p>一般在循环队列中规定队列的长度只能为数组总长度减1，即有一个位置不放元素。因此，当 head 等于 tail 的时候，说明队列为空，而当 head 等于 <code>( tail + 1 ) %length</code>（length为数组长度）的时候，说明队满。</p></li><li><p>适用场景：</p><p>一般程序中会将队列作为缓冲器或者解耦使用。</p><ol><li>秒杀应用</li><li>生产者与消费者模式</li></ol></li></ol><a id="more"></a><h4 id="队列的方法"><a href="#队列的方法" class="headerlink" title="队列的方法"></a>队列的方法</h4><ul><li><code>enqueue</code>：从队尾添加一个元素。</li><li><code>dequeue</code>：从队头删除一个元素。</li><li><code>head</code>：返回头部的元素，不删除。</li><li><code>size</code>：返回队列大小。</li><li><code>clear</code>：清空队列。</li><li><code>isEmpty</code>：队列是否为空。</li><li><code>tail</code>：返回队列尾节点。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> items = []; <span class="comment">// 存储数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队尾添加元素</span></span><br><span class="line"><span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">items.push(item);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头删除一个元素</span></span><br><span class="line"><span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.shift();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回队列头部的元素</span></span><br><span class="line"><span class="keyword">this</span>.head = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items[<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回队列大小</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空队列</span></span><br><span class="line"><span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">items = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列是否为空</span></span><br><span class="line"><span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length == <span class="string">"0"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回队尾元素</span></span><br><span class="line"><span class="keyword">this</span>.tail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items[items.length<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ol><li><h6 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h6><p>有一个数组a[100]存放0-99；要求每隔两个数删掉一个数，到末尾是循环至开头继续进行，求最后一个被删除的数。</p><p>思路：</p><p>​        先将100个数放入队列，然后使用<code>while</code>循环，终止条件是队列里只有一个元素，使用一个变量从0开始计数。</p><ul><li>从队列头部删除一个元素，计数 +1；</li><li>因为是每三个数删除一个，所以计数%3==0，则说明这个元素是需要被删除的元素，否则就把它添加到队尾。</li></ul><p>最后剩下的一个元素就是最后一个被删除的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 构造100个数</span></span><br><span class="line"><span class="keyword">var</span> arr_list = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">101</span>; i++)&#123;</span><br><span class="line">arr_list.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del_ring</span>(<span class="params">arr_list</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 将数放入队列</span></span><br><span class="line"><span class="keyword">var</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr_list.length; i++)&#123;</span><br><span class="line">queue.enqueue(arr_list[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(queue.size() != <span class="number">1</span> )&#123;</span><br><span class="line"><span class="comment">// 弹出一个元素，判断是否需要被删除</span></span><br><span class="line"><span class="keyword">var</span> item = queue.dequeue();</span><br><span class="line"></span><br><span class="line">count += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(count%<span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">queue.enqueue(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> queue.head();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(del_ring(arr_list));</span><br></pre></td></tr></table></figure></li><li><h6 id="用两个队列实现一个栈"><a href="#用两个队列实现一个栈" class="headerlink" title="用两个队列实现一个栈"></a>用两个队列实现一个栈</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QueueStack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> queue_1 = <span class="keyword">new</span> Queue();</span><br><span class="line"><span class="keyword">var</span> queue_2 = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data_queue = <span class="literal">null</span>;  <span class="comment">// 存放数据的队列标志</span></span><br><span class="line"><span class="keyword">var</span> empty_queue = <span class="literal">null</span>;<span class="comment">// 空队列标志</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化队列标志位,</span></span><br><span class="line"><span class="keyword">var</span> init_queue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 如果都为空，默认队列 1 为有数据的队列</span></span><br><span class="line"><span class="keyword">if</span>(queue_1.isEmpty() &amp;&amp; queue_2.isEmpty())&#123;</span><br><span class="line">data_queue = queue_1;</span><br><span class="line">empty_queue = queue_2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(queue_1.isEmpty())&#123;</span><br><span class="line">data_queue = queue_2;</span><br><span class="line">empty_queue = queue_1;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">data_queue = queue_1;</span><br><span class="line">empty_queue = queue_2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push方法</span></span><br><span class="line"><span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">init_queue();</span><br><span class="line">data_queue.enqueue(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// top方法</span></span><br><span class="line"><span class="keyword">this</span>.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">init_queue();</span><br><span class="line"><span class="keyword">return</span> data_queue.tail()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">弹出的栈顶元素就是队列的队尾元素</span></span><br><span class="line"><span class="comment">交换数据队列和空队列</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">init_queue();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(data_queue.size &gt; <span class="number">1</span>)&#123;</span><br><span class="line">empty_queue.enqueue(data_queue.dequeue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data_queue.dequeue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> queueStack = <span class="keyword">new</span> QueueStack();</span><br><span class="line">queueStack.push(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(queueStack.top())</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;队列（FIFO）先进先出&quot;&gt;&lt;a href=&quot;#队列（FIFO）先进先出&quot; class=&quot;headerlink&quot; title=&quot;队列（FIFO）先进先出&quot;&gt;&lt;/a&gt;队列（FIFO）先进先出&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;队列是一种受限的数据结构，从队尾插入，从队头移除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;队列的实现方式有两种，数组和链表&lt;/p&gt;
&lt;p&gt;用数组实现队列有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序队列&lt;/li&gt;
&lt;li&gt;循环队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般在循环队列中规定队列的长度只能为数组总长度减1，即有一个位置不放元素。因此，当 head 等于 tail 的时候，说明队列为空，而当 head 等于 &lt;code&gt;( tail + 1 ) %length&lt;/code&gt;（length为数组长度）的时候，说明队满。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;适用场景：&lt;/p&gt;
&lt;p&gt;一般程序中会将队列作为缓冲器或者解耦使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;秒杀应用&lt;/li&gt;
&lt;li&gt;生产者与消费者模式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://moxuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="js" scheme="https://moxuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/js/"/>
    
      <category term="记录" scheme="https://moxuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/js/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="数据结构" scheme="https://moxuan.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="js" scheme="https://moxuan.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构与算法——栈</title>
    <link href="https://moxuan.xyz/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E6%A0%88/"/>
    <id>https://moxuan.xyz/2019/12/16/javascript数据结构与算法——栈/</id>
    <published>2019-12-16T12:37:02.000Z</published>
    <updated>2020-04-03T14:35:12.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组、集合、散列表"><a href="#数组、集合、散列表" class="headerlink" title="数组、集合、散列表"></a>数组、集合、散列表</h2><blockquote><p>数组是指定位置元素的值，是通过下标获取的，下标在大部分语句中是从0开始的。</p></blockquote><h4 id="数组的特点："><a href="#数组的特点：" class="headerlink" title="数组的特点："></a>数组的特点：</h4><ul><li>定长：数组长度固定。</li><li>按顺序访问：必须从第一个元素开始按顺序访问。</li></ul><blockquote><p>散列表，又叫哈希表，是能够通过给定的关键字的值直接访问到具体对应的值的一个数据结构</p></blockquote><h4 id="散列表的特点："><a href="#散列表的特点：" class="headerlink" title="散列表的特点："></a>散列表的特点：</h4><ul><li>访问速度很快。</li><li>需要额外的空间</li><li>无序</li><li>可能产生碰撞</li></ul><a id="more"></a><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><blockquote><p>栈是一种后进先出（LIFO）的数据结构，只能从一段进行操作，栈一般使用一段<strong>连续</strong>的空间进行存储。</p></blockquote><h4 id="栈的适用场景："><a href="#栈的适用场景：" class="headerlink" title="栈的适用场景："></a>栈的适用场景：</h4><ul><li>逆序输出。</li><li>语法检测，符号成对出现</li><li>数制转换。</li></ul><h4 id="栈的方法："><a href="#栈的方法：" class="headerlink" title="栈的方法："></a>栈的方法：</h4><ul><li><code>push</code>：添加元素到栈顶，也叫压栈。</li><li><code>pop</code>：弹出栈顶元素。</li><li><code>top</code>：返回栈顶元素。</li><li><code>isEmpty</code> ：判断栈是否为空。</li><li><code>size</code>：返回栈中元素个数。</li><li><code>clear</code>：清空栈。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> items = []  <span class="comment">// 使用数组存储数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// push</span></span><br><span class="line"><span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">items.push(item);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line"><span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.pop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// top</span></span><br><span class="line"><span class="keyword">this</span>.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items[items.length<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty</span></span><br><span class="line"><span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// size</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear</span></span><br><span class="line"><span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">items =[];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h4><ol><li><h6 id="判断括号是否合法。"><a href="#判断括号是否合法。" class="headerlink" title="判断括号是否合法。"></a>判断括号是否合法。</h6><p>思路：</p><p>使用for循环遍历每一个字符，对于每一个符号：</p><ul><li>遇到左括号，就把左括号压入栈中。</li><li>遇到右括号，判断栈是否为空，为空则说明没有左括号与之对应，括号不合法；如果栈不为空，则把栈顶元素移除，与这对括号抵消。</li></ul><p>for循环结束以后，如果栈为空，则把所有括号抵消完了，说明括号合法；如果还有元素，则说明括号不合法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_leagl_brackets</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;string.length; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> item = string[i];</span><br><span class="line"><span class="comment">// 遇到左括号做入栈操作</span></span><br><span class="line"><span class="keyword">if</span> (item == <span class="string">"("</span>)&#123;</span><br><span class="line">stack.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item == <span class="string">")"</span>)&#123;</span><br><span class="line"><span class="comment">// 遇到右括号，判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">stack.pop();  <span class="comment">// 弹出左括号</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果栈为空，则泽富川括号合法</span></span><br><span class="line"><span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串是否合法测试用例</span></span><br><span class="line"><span class="built_in">console</span>.log(is_leagl_brackets(<span class="string">"dwadsd(wa(dw)dwad(dwa))"</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(is_leagl_brackets(<span class="string">"dwadsd(wa(dw)dwa(d(dwa))"</span>));  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><h6 id="写一个求栈中最小值的方法"><a href="#写一个求栈中最小值的方法" class="headerlink" title="写一个求栈中最小值的方法"></a>写一个求栈中最小值的方法</h6><p>思路：</p><p>需要两个栈，一个用来存储数据，一个用来存储最小值。</p><p>如果最小值的栈为空或者栈顶元素大于数据元素，就把这个数据元素压入栈中，否则就把最小值栈的栈顶元素弹出再压入栈中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Minstack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> data_stack = <span class="keyword">new</span> Stack();</span><br><span class="line"><span class="keyword">var</span> min_stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line"><span class="comment">// push方法</span></span><br><span class="line"><span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">data_stack.push(item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// min_stack如果为空或者栈顶元素大于item</span></span><br><span class="line"><span class="keyword">if</span>(min_stack.isEmpty()|| item &lt; min_stack.top())&#123;</span><br><span class="line">min_stack.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">min_stack.push(min_stack.top());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出栈顶元素</span></span><br><span class="line"><span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">data_stack.pop();</span><br><span class="line">min_stack.pop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回栈中最小值</span></span><br><span class="line"><span class="keyword">this</span>.min = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> min_stack.top();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">minstack = <span class="keyword">new</span> Minstack();</span><br><span class="line">minstack.push(<span class="number">2</span>);</span><br><span class="line">minstack.push(<span class="number">5</span>);</span><br><span class="line">minstack.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(minstack.min())  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><h6 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h6><blockquote><p>所谓的后缀表达式，就是将要计算的数放在前面，运算符放到后面。计算时，遇到运算符，从左到右，将距离运算符最近的两个数参与运算，将结果与刚才拿出的进行替换。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">后缀表达式：[&quot;4&quot;, &quot;12&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]   中缀表达式：(4+(12/5))=6</span><br><span class="line">[&quot;4&quot;, &quot;2&quot;, &quot;+&quot;]</span><br><span class="line">[&quot;6&quot;]     计算结果</span><br></pre></td></tr></table></figure><p>思路：</p><p>使用for循环遍历每一个元素，做如下操作：</p><ul><li>如果元素不是<code>+ - * /</code>中的某一个，就将元素压入栈中。</li><li>如果元素是<code>+ - * /</code>中的一个，则从栈中连续弹出两个元素，然后对这两个元素进行计算，并将结果压入栈中。</li></ul><p>for循环结束后，栈里只有一个元素，这个元素就是结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc_exp</span>(<span class="params">exp</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; exp.length; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> item = exp[i]</span><br><span class="line"><span class="keyword">if</span>([<span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"*"</span>, <span class="string">"/"</span>].indexOf(item) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> value_1 = stack.pop();</span><br><span class="line"><span class="keyword">var</span>value_2 = stack.pop();</span><br><span class="line"><span class="comment">// 第一次弹出来的数放在运算符的右边，第二个弹出的数放在运算左边</span></span><br><span class="line"><span class="keyword">var</span> exp_str = value_2 + item + value_1;</span><br><span class="line"><span class="comment">// 计算并取整</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">parseInt</span>(<span class="built_in">eval</span>(exp_str));</span><br><span class="line"><span class="comment">// 将计算结果压入栈中</span></span><br><span class="line">stack.push(res.toString());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">stack.push(item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calc_exp([<span class="string">"4"</span>, <span class="string">"12"</span>, <span class="string">"5"</span>, <span class="string">"/"</span>, <span class="string">"+"</span>] )) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li><li><h6 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存放运算符优先级</span></span><br><span class="line"><span class="keyword">var</span> priority_map = &#123;</span><br><span class="line"><span class="string">"+"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"-"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"*"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"/"</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infix_exp_2_postfix_exp</span>(<span class="params">exp</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postfix_lst = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;exp.length; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> item = exp[i];</span><br><span class="line"><span class="comment">// 如果是数字，直接放入postfix_lst</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(item))&#123;</span><br><span class="line">postfix_lst.push(item)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (item == <span class="string">"("</span>)&#123;</span><br><span class="line"><span class="comment">// 如果遇到左括号</span></span><br><span class="line">stack.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item == <span class="string">")"</span>)&#123;</span><br><span class="line"><span class="comment">// 如果遇到右括号</span></span><br><span class="line"><span class="keyword">while</span>(stack.top() != <span class="string">"("</span>)&#123;</span><br><span class="line">postfix_lst.push(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line">stack.pop(); <span class="comment">// 左括号出栈</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 遇到运算符，把栈顶运算符弹出，直到栈顶的运算符优先级小于当前运算符</span></span><br><span class="line"><span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; [<span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"*"</span>, <span class="string">"/"</span>].indexOf(stack.top()) &gt;= <span class="number">0</span> &amp;&amp; priority_map[stack.top()] &gt;= priority_map[item])&#123;</span><br><span class="line"><span class="comment">// 把弹出的运算符加入到postfix_lst中</span></span><br><span class="line">postfix_lst.push(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前的运算符入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for循环结束后，栈里可能还有元素，都弹出放入到postfix_lst中</span></span><br><span class="line"><span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">postfix_lst.push(stack.pop())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> postfix_lst</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(infix_exp_2_postfix_exp([<span class="string">"12"</span>, <span class="string">"+"</span>, <span class="string">"2"</span>]));  <span class="comment">// [ '12', '2', '+' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(infix_exp_2_postfix_exp([<span class="string">"12"</span>, <span class="string">"+"</span>, <span class="string">"2"</span>, <span class="string">"/"</span>, <span class="string">"1"</span>]));  <span class="comment">// [ '12', '2', '1', '/', '+' ]</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组、集合、散列表&quot;&gt;&lt;a href=&quot;#数组、集合、散列表&quot; class=&quot;headerlink&quot; title=&quot;数组、集合、散列表&quot;&gt;&lt;/a&gt;数组、集合、散列表&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;数组是指定位置元素的值，是通过下标获取的，下标在大部分语句中是从0开始的。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h4 id=&quot;数组的特点：&quot;&gt;&lt;a href=&quot;#数组的特点：&quot; class=&quot;headerlink&quot; title=&quot;数组的特点：&quot;&gt;&lt;/a&gt;数组的特点：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定长：数组长度固定。&lt;/li&gt;
&lt;li&gt;按顺序访问：必须从第一个元素开始按顺序访问。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;p&gt;散列表，又叫哈希表，是能够通过给定的关键字的值直接访问到具体对应的值的一个数据结构&lt;/p&gt;
&lt;/blockquote&gt;&lt;h4 id=&quot;散列表的特点：&quot;&gt;&lt;a href=&quot;#散列表的特点：&quot; class=&quot;headerlink&quot; title=&quot;散列表的特点：&quot;&gt;&lt;/a&gt;散列表的特点：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;访问速度很快。&lt;/li&gt;
&lt;li&gt;需要额外的空间&lt;/li&gt;
&lt;li&gt;无序&lt;/li&gt;
&lt;li&gt;可能产生碰撞&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://moxuan.xyz/categories/js/"/>
    
      <category term="数据结构与算法" scheme="https://moxuan.xyz/categories/js/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="记录" scheme="https://moxuan.xyz/categories/js/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="数据结构" scheme="https://moxuan.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="js" scheme="https://moxuan.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue源码分析（一）</title>
    <link href="https://moxuan.xyz/2019/12/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://moxuan.xyz/2019/12/13/vue源码分析（一）/</id>
    <published>2019-12-13T10:46:40.000Z</published>
    <updated>2020-04-03T14:35:07.179Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue源码分析之分析vue源码前的准备工作"><a href="#vue源码分析之分析vue源码前的准备工作" class="headerlink" title="vue源码分析之分析vue源码前的准备工作"></a>vue源码分析之分析vue源码前的准备工作</h3><img src="/2019/12/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/准备工作.png" style="zoom:80%;"><a id="more"></a><h4 id="认识Flow"><a href="#认识Flow" class="headerlink" title="认识Flow"></a>认识Flow</h4><ul><li>Flow的工作方式<ul><li>类型推断：通过上下文推断</li><li>类型注释：事先注释好期待的类型</li></ul></li><li>类型注释是在需要的变量后面加：写明变量类型<ul><li>数组类型为Array<number></number></li><li>Null<ul><li>：？string=null</li></ul></li></ul></li></ul><h4 id="vue源码目录设计"><a href="#vue源码目录设计" class="headerlink" title="vue源码目录设计"></a>vue源码目录设计</h4><ul><li>源码位于src目录下<ul><li>src<ul><li>compiler：编译相关</li><li>core：核心代码</li><li>platforms：不同平台支持</li><li>server：服务端渲染</li><li>sfc：.vue文件的解析</li><li>shared：共享代码</li></ul></li><li>服务器端渲染主要的工作是把组件渲染为服务器端的HTML字符串，将其直接发送到浏览器，最后将静态标记“混合”为客户端上完全交互的应用程序。</li></ul></li></ul><h4 id="vue源码构建"><a href="#vue源码构建" class="headerlink" title="vue源码构建"></a>vue源码构建</h4><ul><li><p>vue源码基于Rollup构建</p></li><li><p>构建脚本</p><ul><li>script字段为npm执行脚本。</li></ul></li><li><p>构建过程</p><ul><li><p>构建入口文件scripts/build.js</p><ul><li>读取配置文件，通过命令行参数对构建配置进行过滤</li></ul></li><li><p>配置文件scripts/config.js</p><ul><li>对于单个配置，遵循Rollup构建规则。<ul><li>entry：构建的入口js文件地址</li><li>dest：构建后的js文件地址</li><li>format：构建格式<ul><li>cjs：表示构建后的文件遵循CommonJS规范</li><li>es：表示构建出来的文件遵循ES Module规范</li><li>umd：表示构建出来的文件遵循UMD规范</li></ul></li></ul></li></ul></li><li><p>vue-cli构建项目时的runtime-only和runtime+compiler版本</p><ul><li><p>runtime+compiler</p><p><img src="/2019/12/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/44947a0b-ffab-46f5-8e98-011082cb5c12-1693052.jpg" alt="img"></p><ul><li>解析<ul><li>当把vue模板template传给vue实例的时候，vue内部会保存在options里面。</li><li>解析成抽象语法树（ast）</li><li>编译成render函数</li><li>由render函数生成虚拟DOM</li><li>将虚拟DOM渲染成真实DOM</li></ul></li></ul></li><li><p>runtim-only</p><ul><li>执行render函数</li><li>生成虚拟DOM</li><li>渲染成真实DOM</li></ul></li><li><p>runtime-only的性能更高，通常需要借助webpack的vue-loader工具把.vue文件编译成JS。</p></li><li><p>render函数</p><ul><li><p>回调createElement（）有两种用法。</p><p><img src="/2019/12/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/390a0078-b482-491b-9faf-4da027fc4973-1693052.jpg" alt="img"></p></li></ul></li></ul></li></ul></li></ul><h4 id="从vue入口开始（src-platforms-web-entry-runtome-with-compiler-js）"><a href="#从vue入口开始（src-platforms-web-entry-runtome-with-compiler-js）" class="headerlink" title="从vue入口开始（src/platforms/web/entry-runtome-with-compiler.js）"></a>从vue入口开始（src/platforms/web/entry-runtome-with-compiler.js）</h4><ul><li>根据import Vue from xxx文件一步步找到src/core/instance/index.js这个Vue的主文件。<ul><li>Vue是一个用function定义的类，所有模块按功能都通过xxxMixin(vue)进行封装，给vue的prototype扩展一些方法。</li><li>initGlobalAPI<ul><li>为vue添加全局静态方法。（src/core/global-api/index.js）</li><li>所有的全局方法都在这个文件里</li><li>需要注意的是vue.util中的方法是不稳定的，不建议使用。</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue源码分析之分析vue源码前的准备工作&quot;&gt;&lt;a href=&quot;#vue源码分析之分析vue源码前的准备工作&quot; class=&quot;headerlink&quot; title=&quot;vue源码分析之分析vue源码前的准备工作&quot;&gt;&lt;/a&gt;vue源码分析之分析vue源码前的准备工作&lt;/h3&gt;&lt;img src=&quot;/2019/12/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/准备工作.png&quot; style=&quot;zoom:80%;&quot;&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="前端" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="前端" scheme="https://moxuan.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://moxuan.xyz/tags/vue/"/>
    
      <category term="源码" scheme="https://moxuan.xyz/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>vue文档笔记</title>
    <link href="https://moxuan.xyz/2019/12/06/vue%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/"/>
    <id>https://moxuan.xyz/2019/12/06/vue文档笔记/</id>
    <published>2019-12-06T11:00:59.000Z</published>
    <updated>2020-04-03T14:35:11.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><p>1、vue的特性之一是其非侵入性的响应式系统。数据实现双向绑定。</p><p>2、当把一个普通的js对象传入vue实例作为data选项时，vu将遍历此对象的所有属性，并使用<code>object.defineProperty</code> 把这些属性全部转为<code>getter/setter</code>。由于<code>object.defineProperty</code>是ES5中无法shim的特性，所以vue不支持IE8及更低版本浏览器的原因。</p><a id="more"></a><h3 id="声明响应式属性"><a href="#声明响应式属性" class="headerlink" title="声明响应式属性"></a>声明响应式属性</h3><p>1、vue无法检测到对象属性的添加或删除</p><p>2、对于已建立的实例，vue不允许动态添加根级别的响应式属性。但是，可以使用<code>vm.$set</code>实例方法向嵌套对象添加响应式属性。</p><p>3、基于上一条原因，必须在初始化实例前声明所有根级响应式属性。</p><h3 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h3><p>1、vue更新DOM是异步执行的。</p><p>2、同一个<code>watcher</code>被多次触发，只会被推入队列一次。</p><p>3、vue鼓励使用“数据驱动”的方式，避免直接接触DOM，但不得不操作DOM时，为了在数据变化之后等待vue完成更新DOM，可以在数据变化之后使用<code>Vue.nextTick(callback)</code>。这样回调函数将在DOM更新完成后被调用。<br>4、在组件中使用<code>vm.$nextTick()</code>实例方法，不需要全局Vue，并且回调函数中的<code>this</code>自动绑定到当前Vue实例上。<br>5、<code>$nextTick()</code>返回一个<code>Promise</code>对象，可以使用<code>async/await</code>语法处理。</p><h2 id="vue实例"><a href="#vue实例" class="headerlink" title="vue实例"></a>vue实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'hi'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Object.freeze()</code>会阻止修改现有属性，也意味着响应系统无法再追踪变化</p><h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><p><code>beforeCreate</code></p><p><code>created</code></p><p><code>beforeMount</code></p><p><code>mounted</code></p><p><code>beforeUpdate</code></p><p><code>updated</code></p><p><code>beforeDestroy</code></p><p><code>destroy</code></p><h4 id="vue生命周期钩子函数"><a href="#vue生命周期钩子函数" class="headerlink" title="vue生命周期钩子函数"></a>vue生命周期钩子函数</h4><p>1、vue钩子函数就是在生命周期不同阶段被调用。</p><p>2、生命周期钩子的<code>this</code>上下文指向调用它的vue实例。</p><p>3、不要在选项属性或回调上使用箭头函数。因为箭头函数的<code>this</code>指向<code>window</code>。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>1.插值 </p><p>使用<code>{ {}}</code>进行数据绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; &#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过<code>v-once</code>指令，只执行一次性的数据插入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>&#123; &#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要输出真正的HTML，可以使用<code>v-html</code>指令</p><p>在<code>{ {}}</code>中可以写js表达式，但只能包含单个表达式</p><p>2.指令</p><p>指令是带有<code>v-</code>前缀的特殊特性。响应式的作用与DOM。</p><ul><li><p>参数</p><ul><li>一个指令更够接受一个参数，在指令名称前以冒号<code>：</code>表示。</li></ul></li><li><p>动态参数</p><ul><li><p>在指令后用<code>[]</code>表示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">'url'</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>动态参数求出的是<code>字符串</code>，异常时为<code>null</code></p></li><li><p>空格和引号在参数中是无效的，会触发编译警告。可以使用计算属性代替复杂表达式。</p></li><li><p>使用模板是避免使用大写字符，应为在渲染时会被浏览器强制转换为小写。</p></li></ul></li></ul></li></ul><h2 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性<code>computed</code></h2><p>首先，将同一函数定义成计算属性<code>computed</code>或者方法<code>methods</code>，两种方式得到的最终结果是一致的，不同的是计算属性可以基于响应式依赖进行缓存。也就是多次访问计算属性时会立即返回结果，不必在执行函数。</p><p>由于<code>Date.now()</code>不是响应式依赖，所以每次重新渲染时总会执行。(eg:computed.html)</p><p>计算属性默认是getter，在需要时可以提供setter。(eg:getter_setter.html)</p><h2 id="监听属性watch"><a href="#监听属性watch" class="headerlink" title="监听属性watch"></a>监听属性<code>watch</code></h2><p>当需要异步操作或者开销较大时，可以使用<code>watch</code>属性对状态进行监听，可以设置一个中间状态。</p><h2 id="class和style绑定"><a href="#class和style绑定" class="headerlink" title="class和style绑定"></a><code>class</code>和<code>style</code>绑定</h2><p>因为class和style都是属性，所以可以使用<code>v-bind</code>处理：可以是对象，也可以是数组。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span> =<span class="string">"class"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:class</span>=<span class="string">"&#123;active: true&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-bind:class</code>可以与普通class属性共存。</p><p>如果想要根据条件切换列表中的class，可以使用三元表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123;active: isActive&#125;, errorClass]"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>style</code>的语法与<code>class</code>一致。</p><p>当<code>v-bind：style</code>使用需要添加浏览器前缀的CSS属性时，Vue会 自动添加相应的前缀。</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>1、<code>v-if</code>：条件性的渲染一块内容，这块内容只会在指令的表达式返回 <code>truthy</code> 值的时候被渲染。可与<code>v-else</code>，<code>v-else-if</code>搭配使用。</p><p>当需要切换多个元素时，可以与<code>&lt;template&gt;</code>标签搭配使用，最终渲染结果不包括标签。</p><p><code>key</code>属性可以将个元素相互独立。</p><p>2、<code>v-show</code>：与v-if类似，不同的是，<code>v-if</code>会适当的将组件销毁，如果初始渲染时条件为<code>false</code>，则不会渲染，知道使用时才会渲染。而<code>v-show</code>只是简单的切换元素的CSS属性的<code>display</code>，会在初始化时就渲染元素。</p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>1、<code>v-for</code></p><p>可以对一个数组或者对象进行遍历，然后对其进行渲染。</p><ul><li>对于数组，可以有两个参数：（item， index）</li><li>对于对象，可以有三个参数：（name，value, index）</li></ul><p>当重用或者重新排序现有元素时，需要为每一项提供一个唯一的<code>key</code>属性。需要注意的是，key的值需要使用字符串或数值类型的值。</p><p>2、数组更新检测</p><p>vue对数组的一些方法进行包装，使其可以触发视图更新。</p><p><code>push()</code>,<code>pop()</code>,<code>shift()</code>,<code>unshift()</code>,<code>splice()</code>,<code>sort()</code>,<code>reverse()</code></p><p><code>filter()</code>,<code>concat()</code>,<code>slice()</code></p><p><strong>注意</strong><br>1、数组变更检测</p><p>当利用索引对数组进行直接设置时，和修改数组长度时，vue检测不到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        items:[<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这些vue不会响应</span></span><br><span class="line">vm.items[<span class="number">1</span>] = <span class="string">'x'</span>;</span><br><span class="line">vm.items.length = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>为了索引问题，可以使用全局方法<code>Vue.set</code>,或者实例方法<code>vm.$set</code>。</p><p>为了修改数组长度，可以使用<code>splice</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure><p>2、对象变更检测</p><p>Vue不能检测对象属性的添加或删除。</p><p>可以使用全局方法<code>Vue.set</code>,或者实例方法<code>Vue.$set</code>进行对台设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$<span class="keyword">set</span>(vm.userProfile, 'age', 23)</span><br></pre></td></tr></table></figure><p>如果需要对已有对象赋值多个新属性，可以使用<code>Object.assign()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.userProfile = <span class="built_in">Object</span>.assign(&#123;&#125;, vm.userProfile, &#123;</span><br><span class="line">    age:<span class="number">23</span>,</span><br><span class="line">    like: <span class="string">'Vue'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>不推荐在同一元素上使用<code>v-for</code>和<code>v-if</code></p></blockquote><p>在同一节点下，<code>v-for</code>的优先级比<code>v-if</code>更高。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;响应式原理&quot;&gt;&lt;a href=&quot;#响应式原理&quot; class=&quot;headerlink&quot; title=&quot;响应式原理&quot;&gt;&lt;/a&gt;响应式原理&lt;/h2&gt;&lt;p&gt;1、vue的特性之一是其非侵入性的响应式系统。数据实现双向绑定。&lt;/p&gt;
&lt;p&gt;2、当把一个普通的js对象传入vue实例作为data选项时，vu将遍历此对象的所有属性，并使用&lt;code&gt;object.defineProperty&lt;/code&gt; 把这些属性全部转为&lt;code&gt;getter/setter&lt;/code&gt;。由于&lt;code&gt;object.defineProperty&lt;/code&gt;是ES5中无法shim的特性，所以vue不支持IE8及更低版本浏览器的原因。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://moxuan.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://moxuan.xyz/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
      <category term="记录" scheme="https://moxuan.xyz/categories/%E5%89%8D%E7%AB%AF/vue/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="前端" scheme="https://moxuan.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://moxuan.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo中使用{{}}报错的解决方案</title>
    <link href="https://moxuan.xyz/2019/12/02/%E5%85%B3%E4%BA%8Ehexo%E4%B8%AD%E4%BD%BF%E7%94%A8-%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://moxuan.xyz/2019/12/02/关于hexo中使用-报错的解决方案/</id>
    <published>2019-12-02T11:42:05.000Z</published>
    <updated>2020-04-03T14:35:10.500Z</updated>
    
    <content type="html"><![CDATA[<p>今天在发博客的时候，因为vue的有些内容需要用到<code>{ {}}</code>，所以在执行<code>hexo generate</code>初始化的时候总是报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">at formatNunjucksError (/mnt/wendang/demo/blog/moxuan/node_modules/hexo/lib/extend/tag.js:99:13)</span><br><span class="line"> at /mnt/wendang/demo/blog/moxuan/node_modules/hexo/lib/extend/tag.js:121:34</span><br><span class="line"> at tryCatcher (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line"> at Promise._settlePromiseFromHandler (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class="line"> at Promise._settlePromise (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class="line"> at Promise._settlePromise0 (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class="line"> at Promise._settlePromises (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:725:18)</span><br><span class="line"> at _drainQueueStep (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:93:12)</span><br><span class="line"> at _drainQueue (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:86:9)</span><br><span class="line"> at Async._drainQueues (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:102:5)</span><br><span class="line"> at Immediate.Async.drainQueues [as _onImmediate] (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:15:14)</span><br><span class="line"> at processImmediate (internal/timers.js:439:21)</span><br></pre></td></tr></table></figure><a id="more"></a><p>由于刚开始的额时候动了hexo的配置文件，所以一度错以为是配置文件出了问题，无奈又将配置文件恢复到原来的状态，但还是没有效果，依旧报错，这是只能讲vue的博客先暂时移出文件夹，在进行初始化时就可以正常通过了，所以可以断定就是vue这这篇博客的问题，但是这篇在将博客切分以后,一部分一部分的进行比较，执行初始化命令，最后将问题定位在了<code>{ {}}</code>上面。查阅资料以后，现解决方案如下：</p><blockquote><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4></blockquote><p>如果想要不对{ { } }进行解析 ，只想显示{ { user.name } }，可以用这种方式写在你的文章中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123;user.name&#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4></blockquote><p>将前面的两个括号拆开即可，也就是破坏原来的结构。我就是用的这种方法，如果仔细看的话，我的前面两个括号实际上中间是有一个空格的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &#123;uer.name&#125;&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p> <a href="https://link.jianshu.com/?t=http%3A%2F%2Fhbson.cn%2F2018%2F04%2F23%2FDouble_brace_parsing%2F" target="_blank" rel="noopener">http://hbson.cn/2018/04/23/Double_brace_parsing/</a></p><p><a href="https://www.v2ex.com/t/510207" target="_blank" rel="noopener">https://www.v2ex.com/t/510207</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在发博客的时候，因为vue的有些内容需要用到&lt;code&gt;{ {}}&lt;/code&gt;，所以在执行&lt;code&gt;hexo generate&lt;/code&gt;初始化的时候总是报错。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;at formatNunjucksError (/mnt/wendang/demo/blog/moxuan/node_modules/hexo/lib/extend/tag.js:99:13)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at /mnt/wendang/demo/blog/moxuan/node_modules/hexo/lib/extend/tag.js:121:34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at tryCatcher (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/util.js:16:23)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at Promise._settlePromiseFromHandler (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:547:31)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at Promise._settlePromise (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:604:18)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at Promise._settlePromise0 (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:649:10)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at Promise._settlePromises (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:725:18)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at _drainQueueStep (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:93:12)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at _drainQueue (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:86:9)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at Async._drainQueues (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:102:5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at Immediate.Async.drainQueues [as _onImmediate] (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:15:14)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; at processImmediate (internal/timers.js:439:21)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="hexo" scheme="https://moxuan.xyz/categories/%E8%AE%B0%E5%BD%95/hexo/"/>
    
    
      <category term="记录" scheme="https://moxuan.xyz/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="hexo" scheme="https://moxuan.xyz/tags/hexo/"/>
    
  </entry>
  
</feed>
