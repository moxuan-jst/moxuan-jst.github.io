<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python3下载并合并m3u8文件</title>
    <url>/2020/01/28/Python3%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%90%88%E5%B9%B6m3u8%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>前两天看见鬼刀在B站发的一个视频，然后网上找了好久没有找到，决定自己动手从他的官网下载一份，说干就干。</p>
<p><img src="/2020/01/28/Python3%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%90%88%E5%B9%B6m3u8%E6%96%87%E4%BB%B6/wolp.png" alt></p>
<a id="more"></a>

<h2 id="什么是m3u8文件"><a href="#什么是m3u8文件" class="headerlink" title="什么是m3u8文件"></a>什么是m3u8文件</h2><p><strong>M3U8文件是指UTF-8编码格式的M3U文件。</strong></p>
<p>M3U文件是记录了一个索引纯文本文件，打开它时播放软件并不是播放它，而是根据它的索引找到对应的音视频文件的网络地址进行在线播放。</p>
<p>原视频数据分割为很多个TS流，每个TS流的地址记录在m3u8文件列表中。</p>
<p>下面这个就是一个m3u8文件</p>
<blockquote>
<p><strong>#EXTM3U</strong></p>
<p><strong>#EXT-X-VERSION:3</strong></p>
<p><strong>#EXT-X-MEDIA-SEQUENCE:0</strong></p>
<p><strong>#EXT-X-ALLOW-CACHE:YES</strong></p>
<p><strong>#EXT-X-TARGETDURATION:15</strong></p>
<p><strong>#EXTINF:6.916667,</strong></p>
<p><strong>out000.ts</strong></p>
<p><strong>#EXTINF:10.416667,</strong></p>
<p><strong>out001.ts</strong></p>
<p><strong>#EXTINF:10.416667,</strong></p>
<p><strong>out002.ts</strong></p>
<p><strong>#EXTINF:1.375000,</strong></p>
<p><strong>out003.ts</strong></p>
<p><strong>#EXTINF:1.541667,</strong></p>
</blockquote>
<h3 id="关于m3u8格式的视频文件ts转mp4下载和key加密问题"><a href="#关于m3u8格式的视频文件ts转mp4下载和key加密问题" class="headerlink" title="关于m3u8格式的视频文件ts转mp4下载和key加密问题"></a><a href="https://www.cnblogs.com/String-Lee/p/11391893.html" target="_blank" rel="noopener">关于m3u8格式的视频文件ts转mp4下载和key加密问题</a></h3><h2 id="视频下载"><a href="#视频下载" class="headerlink" title="视频下载"></a>视频下载</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> m3u8</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> iglob</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> natsort <span class="keyword">import</span> natsorted</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">UserAgent = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownLoadM3U8</span><span class="params">(object)</span>:</span></span><br><span class="line">    m3u8_url: str</span><br><span class="line">    file_name: str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__post_init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建线程池</span></span><br><span class="line">        self.thread_pool = ThreadPoolExecutor(max_workers=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.file_name:</span><br><span class="line">            self.file_name = <span class="string">'new.mp4'</span></span><br><span class="line">        <span class="comment"># 加载m3u8的URL</span></span><br><span class="line">        self.m3u8_obj = m3u8.load(self.m3u8_url)</span><br><span class="line">        <span class="comment"># 解密</span></span><br><span class="line">        self.cryptor = self.get_key()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取key进行解密，这里可以获取method加密方式进行解密</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.m3u8_obj.keys <span class="keyword">and</span> self.m3u8_obj.keys[<span class="number">0</span>]:</span><br><span class="line">            res = requests.get(self.m3u8_obj.keys[<span class="number">0</span>].absolute_uri, headers=&#123;<span class="string">'User-Agent'</span>: UserAgent&#125;)</span><br><span class="line">            <span class="comment"># AES 解密</span></span><br><span class="line">            <span class="keyword">return</span> AES.new(res.content, AES.MODE_CBC, res.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_ts_url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> seg <span class="keyword">in</span> self.m3u8_obj.segments:</span><br><span class="line">            <span class="keyword">yield</span> urljoin(self.m3u8_obj.base_uri, seg.uri)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_ts</span><span class="params">(self, url_info)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        下载ts文件，写入时如果有加密需要解密</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        url, ts_name = url_info</span><br><span class="line">        res = requests.get(url, headers=&#123;<span class="string">'User-Agent'</span>: UserAgent&#125;)</span><br><span class="line">        <span class="keyword">with</span> open(ts_name, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">if</span> self.cryptor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                fp.write(self.cryptor.decrypt(res.content))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fp.write(res.content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_all_ts</span><span class="params">(self)</span>:</span></span><br><span class="line">        ts_urls = self.get_ts_url()</span><br><span class="line">        <span class="comment"># enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标</span></span><br><span class="line">        <span class="keyword">for</span> index, ts_url <span class="keyword">in</span> enumerate(ts_urls):</span><br><span class="line">            self.thread_pool.submit(self.download_ts, [ts_url, <span class="string">f'<span class="subst">&#123;index&#125;</span>.ts'</span>])</span><br><span class="line">        <span class="comment"># 此方式可能使视频合并时顺序错乱</span></span><br><span class="line">        <span class="comment"># for file in self.m3u8_obj.files:</span></span><br><span class="line">        <span class="comment">#     url = urljoin(self.m3u8_obj.base_uri, file)</span></span><br><span class="line">        <span class="comment">#     self.thread_pool.submit(self.download_ts, [url, url[url.rfind("/") + 1:]])</span></span><br><span class="line">        self.thread_pool.shutdown()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 如果是第一层M3U8文件，那么就获取第二层的url</span></span><br><span class="line">        <span class="keyword">if</span> self.m3u8_obj.playlists <span class="keyword">and</span> self.m3u8_obj.data.get(<span class="string">"playlists"</span>):</span><br><span class="line">            self.m3u8_url = urljoin(self.m3u8_obj.base_uri, self.m3u8_obj.data.get(<span class="string">"playlists"</span>)[<span class="number">0</span>][<span class="string">"uri"</span>])</span><br><span class="line">            self.__post_init__()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.m3u8_obj.segments <span class="keyword">or</span> <span class="keyword">not</span> self.m3u8_obj.files:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"m3u8数据不正确，请检查"</span>)</span><br><span class="line">        self.download_all_ts()</span><br><span class="line">        ts_path = <span class="string">'*.ts'</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file_name, <span class="string">'wb'</span>) <span class="keyword">as</span> fn:</span><br><span class="line">            <span class="comment"># 将下载的所有 ts 文件进行排序，iglob获取文件路径，一次只获取一个</span></span><br><span class="line">            <span class="keyword">for</span> ts <span class="keyword">in</span> natsorted(iglob(ts_path)):</span><br><span class="line">                <span class="keyword">with</span> open(ts, <span class="string">'rb'</span>) <span class="keyword">as</span> ft:</span><br><span class="line">                    sc_line = ft.read()</span><br><span class="line">                    fn.write(sc_line)</span><br><span class="line">        [os.remove(ts) <span class="keyword">for</span> ts <span class="keyword">in</span> iglob(ts_path)]</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">"key.key"</span>):</span><br><span class="line">            os.remove(<span class="string">"key.key"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># aHR0cHM6Ly93d3cuMTAyNHV1LmNjL3ZvZC9saXN0aW5nLTQtMC0wLTAtMC0wLTAtMC0wLTEuaHRtbA==</span></span><br><span class="line">    m3u8_url = <span class="string">'https://sxlt.snscz.com/s2/video/2020/01/07/22/a_zh/index.m3u8'</span></span><br><span class="line">    file_name = <span class="string">'wolp.mp4'</span></span><br><span class="line"></span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    M3U8 = DownLoadM3U8(m3u8_url, file_name)</span><br><span class="line">    M3U8.run()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'耗时:'</span>, end - start)</span><br></pre></td></tr></table></figure>

<h6 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h6><p><a href="https://www.bajins.com/Python/Python爬虫.html#m3u8解析下载解密合并" target="_blank" rel="noopener">https://www.bajins.com/Python/Python%E7%88%AC%E8%99%AB.html#m3u8%E8%A7%A3%E6%9E%90%E4%B8%8B%E8%BD%BD%E8%A7%A3%E5%AF%86%E5%90%88%E5%B9%B6</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>下载</category>
        <category>m3u8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>m3u8</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo从Linux迁移至windows的问题解决办法</title>
    <url>/2020/01/27/hexo%E4%BB%8ELinux%E8%BF%81%E7%A7%BB%E8%87%B3windows%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>换了新电脑以后，回到了windows系统，然后将原来电脑的所有东西都做了迁移，但是今天在进行博客恢复的时候，发现执行<code>hexo d</code>的时候无法提交到GitHub仓库去，提示：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nothing to commit, working directory clean</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from git@github.com:moxuan-jst/moxuan-jst.github.io.git.</span><br><span class="line">Everything up-to-<span class="built_in">date</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">Permission denied (publickey).</span><br><span class="line"><span class="function">fatal: <span class="title">Could</span> <span class="title">not</span> <span class="title">read</span> <span class="title">from</span> <span class="title">remote</span> <span class="title">repository</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Please</span> <span class="title">make</span> <span class="title">sure</span> <span class="title">you</span> <span class="title">have</span> <span class="title">the</span> <span class="title">correct</span> <span class="title">access</span> <span class="title">rights</span></span></span><br><span class="line"><span class="function"><span class="title">and</span> <span class="title">the</span> <span class="title">repository</span> <span class="title">exists</span>.</span></span><br><span class="line"><span class="function"><span class="title">FATAL</span> <span class="title">Something</span>'<span class="title">s</span> <span class="title">wrong</span>. <span class="title">Maybe</span> <span class="title">you</span> <span class="title">can</span> <span class="title">find</span> <span class="title">the</span> <span class="title">solution</span> <span class="title">here</span>: <span class="title">https</span>://<span class="title">hexo.io</span>/<span class="title">docs</span>/<span class="title">troubleshooting.html</span></span></span><br><span class="line"><span class="function"><span class="title">Error</span>: <span class="title">Spawn</span> <span class="title">failed</span></span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">ChildProcess</span>.&lt;<span class="title">anonymous</span>&gt; (<span class="title">D</span>:\<span class="title">wenjian</span>\<span class="title">demo</span>\<span class="title">blog</span>\<span class="title">node_modules</span>\<span class="title">hexo</span>-<span class="title">util</span>\<span class="title">lib</span>\<span class="title">spawn.js</span>:51:21)</span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">ChildProcess.emit</span> (<span class="title">events.js</span>:223:5)</span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">ChildProcess.cp.emit</span> (<span class="title">D</span>:\<span class="title">wenjian</span>\<span class="title">demo</span>\<span class="title">blog</span>\<span class="title">node_modules</span>\<span class="title">cross</span>-<span class="title">spawn</span>\<span class="title">lib</span>\<span class="title">enoent.js</span>:34:29)</span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">Process.ChildProcess._handle.onexit</span> (<span class="title">internal</span>/<span class="title">child_process.js</span>:272:12)</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<p>网上找了好多方案，但是都没有成功，没有办法，只能将原来的GitHub仓库删除重新创建一个，然后将ssh-key也重新上传，完了以后还是不行。</p>
<p>快要放弃重新再从头做一遍的时候，突然想起来在<code>_config.yml</code>中配置过两个仓库地址，一个GitHub的，还有一个是coding的仓库，将coding的仓库删除以后，再次执行<code>hexo d</code>运行成功。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:xxxxxx/xxxxxxx.github.io.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">git@git.dev.tencent.com:xxxxxx/xxxxxxx.coding.me.git(删除)</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>http/2的新特性</title>
    <url>/2020/01/01/http-2%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="http-1-1的缺陷"><a href="#http-1-1的缺陷" class="headerlink" title="http/1.1的缺陷"></a>http/1.1的缺陷</h3><ul>
<li>高延迟——带来页面加载速度的降低</li>
<li>无状态特性——巨大的 http 头部</li>
<li>明文传输——不安全</li>
<li>不支持服务器推送消息</li>
</ul><h3 id="http-2"><a href="#http-2" class="headerlink" title="http/2"></a>http/2</h3><p>基于<code>SPDY</code>，专注于性能，最大的目标是在用户与网站间只用一个链接。</p><p>特性：</p><ol>
<li><p>二进制传输和 Header 压缩</p>
<p>http/2将请求和响应数据分割为更小的帧，并且采用二进制编码。</p>
<p>多个帧之间可以乱序发送，根据帧受不得流标识可以重新组装。</p>
</li>
<li><p>多路复用</p>
<p>同个域名只需要占用一个 TCP 连接，并行发送多个请求和响应。</p>
<p>并行交错地发送多个请求/响应，请求/响应之间互不影响。</p>
</li>
<li><p>serverPush</p>
<p>服务器主动把部分文件推送到客户端。</p>
<p>遵守同源策略。</p>
</li>
<li><p>提高安全性</p>
</li>
</ol>]]></content>
      <categories>
        <category>记录</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年终总结</title>
    <url>/2019/12/30/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>转眼间，2019年已经接近尾声，而我计划的完成进度与我的预期还是有一定的差距，一整年的时间进入开发学习，从刚开始的Python爬虫开始入门，一直到现在的web开发，前后台知识都已了解，接下来的任务则是要扎实基础。</p><p>今年，是我开始学习编程的第一年，而这一年，也是我自认为过得最充实的一年，这么长时间，我没想到我会坚持下来，一发不可收拾，我真的很爱这个东西，很喜欢这种感觉，也很享受。</p><a id="more"></a>

<p>在这一年里，我开了公众号，也开了博客，虽然粉丝不多，但还是很满足，博客更像是自己的孩子一样，虽然上面的内容都是自己写的，但还是想要进去看看，看着慢慢增加的文章数量，心里也很满足。博客，是自己记录笔记，记录心事的地方，这里我不需要考虑什么，写我所想，写我所感。</p>
<p>一年的时间，总觉得还有好多事情在等着我完成，我把自己所有的热情都投了进来，我觉得，这件事我喜欢，那我就去做，并且做好，也正是因为喜欢，所以才有了现在的我。在公众号上看曹大，看张哥他们的公众号，感觉收获还是很多的，从上面认识学校外面的世界，了解行业的发展动向，个人认为给我的启发还是很多的。并不是所有事情都会如我所愿，但不管这件事情有多难，我都会尽我最大的努力去完成它，哪怕最后失败了，那我也尽力了，问心无愧即可。</p>
<p>接下来的2020年，就要面临毕业了，毕业论文，毕业设计，答辩，实习，继续学习，做项目，从项目中学习一些方法，这些便是接下来一年的任务。明年也是决定我到底要去哪里的一年了，虽然学习了这么多，但是心里总有一种畏惧的感觉，需要考虑的东西好多，不管怎样，该来的迟早回来，面对就是了。</p>
<p>心无旁骛，方能展翅高飞，认定的事情就做下去吧。</p>
]]></content>
      <categories>
        <category>记录</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript数据结构与算法——BitMap</title>
    <url>/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94BitMap/</url>
    <content><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p><code>BitMap</code>是利用了二进制来描述状态的数据结构，是一种基于位做映射的数据结构，能够用很少的内存存储数据。和数组不同，它只能表示某个数是否存在。</p>
</blockquote><h6 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h6><ul>
<li>大数据去重。</li>
<li>大数据排序。</li>
<li>两个集合取交集。</li>
</ul><p>需要注意的是 <code>BitMap</code> 不能处理重复的数据，且仅对证书有效。</p><p>可以通过哈希函数将字符串转换为整型。</p><a id="more"></a>



<h6 id="位运算介绍："><a href="#位运算介绍：" class="headerlink" title="位运算介绍："></a>位运算介绍：</h6><ul>
<li>按位与<code>&amp;</code>：两位同时为1则为1，否则为0。<code>3&amp;7=3</code>【<code>011 &amp; 111 --&gt; 011</code>】</li>
<li>按位或<code>|</code>：两位同时为0则为0，否则为1。<code>3|7=7</code>【<code>011 | 111 --&gt; 111</code>】</li>
<li>左移<code>&lt;&lt;</code>：将1向左移动几位。<code>1&lt;&lt;3=8</code>【<code>1 --&gt; 1000</code>】</li>
</ul>
<h6 id="BitMap-的方法"><a href="#BitMap-的方法" class="headerlink" title="BitMap 的方法"></a><code>BitMap</code> 的方法</h6><ul>
<li><code>addMember</code>：添加元素。</li>
<li><code>isExist</code>：判断元素是否存在。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BitMap</span>(<span class="params">size</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bit_arr = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</span><br><span class="line">    <span class="comment">// 初始化,将所有为置0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;bit_arr.length; i++)&#123;</span><br><span class="line">        bit_arr[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">this</span>.addMember = <span class="function"><span class="keyword">function</span> (<span class="params">member</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr_index = <span class="built_in">Math</span>.floor(member/<span class="number">32</span>);   <span class="comment">// 确定在数组中的索引</span></span><br><span class="line">        <span class="keyword">var</span> bit_index = member%<span class="number">32</span>;               <span class="comment">// 确定在整数中bit位的索引</span></span><br><span class="line"></span><br><span class="line">        bit_arr[arr_index] = bit_arr[arr_index] | <span class="number">1</span> &lt;&lt; bit_index;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断元素是否存在</span></span><br><span class="line">    <span class="keyword">this</span>.isExist = <span class="function"><span class="keyword">function</span> (<span class="params">member</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr_index = <span class="built_in">Math</span>.floor(member/<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">var</span> bit_index = member%<span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> value = bit_arr[arr_index] &amp; <span class="number">1</span> &lt;&lt; bit_index;</span><br><span class="line">        <span class="keyword">if</span>(value !=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> BitMap(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">35</span>,<span class="number">33</span>,]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    b.addMember(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.isExist(<span class="number">2</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b.isExist(<span class="number">22</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h6 id="两个集合取交集"><a href="#两个集合取交集" class="headerlink" title="两个集合取交集"></a>两个集合取交集</h6><p><strong>要求</strong>：两个数组，内容分别为[1, 4, 6, 8, 9, 10, 15], [6, 14, 9, 2, 0, 7]，请用BitMap计算他们的交集。</p>
<p><strong>分析</strong>：利用<code>isExist()</code>来筛选相同项。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">6</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">const</span> intersectionArr = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bitMap = <span class="keyword">new</span> BitMap();</span><br><span class="line">arr1.forEach(<span class="function"><span class="params">item</span> =&gt;</span> bitMap.addMember(item))</span><br><span class="line"></span><br><span class="line">arr2.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(bitMap.isExist(item))&#123;</span><br><span class="line">        intersectionArr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(intersectionArr);   <span class="comment">// [6, 9]</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构</category>
        <category>js</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>数据结构</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript数据结构与算法——链表</title>
    <url>/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h4 id="表的分类："><a href="#表的分类：" class="headerlink" title="表的分类："></a>表的分类：</h4><p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8-1576546269180.png" alt></p><h6 id="顺序表两种形式"><a href="#顺序表两种形式" class="headerlink" title="顺序表两种形式"></a>顺序表两种形式</h6><ol>
<li><p>基本形式</p>
<p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8-1576546752109.png" alt></p>
</li>
<li><p>数据外置：保存地址，由地址指向数据。</p>
<p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217094211601.png" alt="image-20191217094211601"></p>
</li>
</ol><h4 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h4><blockquote>
<p>链表是一种物理上非连续的，非顺序的存储结构，数据元素之间的顺序是通过每个元素的指针关联的。</p>
</blockquote><h6 id="链表的类型："><a href="#链表的类型：" class="headerlink" title="链表的类型："></a>链表的类型：</h6><ul>
<li><p>单向链表</p>
<p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217100402699.png" alt="image-20191217100402699"></p>
</li>
<li><p>双向链表</p>
<p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217100952639.png" alt="image-20191217100952639"></p>
<p>一般优先使用双向链表。</p>
</li>
<li><p>单向循环链表</p>
</li>
</ul><h6 id="链表的特点："><a href="#链表的特点：" class="headerlink" title="链表的特点："></a>链表的特点：</h6><ul>
<li>空间不连续，导致空间开销更大。</li>
<li>运行时可动态添加。</li>
<li>查找元素按顺序查找，当链表较长时，效率低。</li>
<li>操作较复杂。</li>
</ul><a id="more"></a>




<h6 id="链表的优势："><a href="#链表的优势：" class="headerlink" title="链表的优势："></a>链表的优势：</h6><ul>
<li>克服了数组需要提前设置长度的不足。</li>
<li>可以灵活的使用存储空间，还能更好的对计算机内存进行动态管理。</li>
</ul>
<h6 id="链表的方法："><a href="#链表的方法：" class="headerlink" title="链表的方法："></a>链表的方法：</h6><ul>
<li><p><code>insert</code>：在链表头部插入节点（头插法）</p>
<p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217102203300.png" alt="image-20191217102203300"></p>
</li>
<li><p><code>append</code>：在链表尾部添加节点（尾插法）</p>
<p><img src="/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/image-20191217102647307.png" alt="image-20191217102647307"></p>
</li>
<li><p><code>removeAt</code>：删除指定位置节点</p>
</li>
<li><p><code>indexOf</code>：返回指定节点的位置</p>
</li>
<li><p><code>size</code>：返回链表长度</p>
</li>
<li><p><code>isEmpty</code>：判断链表是否为空</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节点类，定义节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表类，定义链表方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link_list</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data = null) &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="literal">null</span> <span class="comment">// 链表的head指针</span></span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">0</span>; <span class="comment">// 链表的长度</span></span><br><span class="line">        <span class="keyword">if</span>(data)&#123;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">new</span> Node(data);</span><br><span class="line">            <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在链表尾部添加节点</span></span><br><span class="line">    append(data)&#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> Node(data); <span class="comment">// 创建节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.head === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> curr = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">while</span>(curr.next)&#123;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">            &#125;</span><br><span class="line">            curr.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length += <span class="number">1</span>; <span class="comment">// 整个链表的长度增加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定位置的节点</span></span><br><span class="line">    removeAt(position)&#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="keyword">this</span>.length || position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>)&#123;  <span class="comment">// 删除头节点</span></span><br><span class="line">            <span class="keyword">this</span>.head = curr.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; position)&#123;</span><br><span class="line">                prev = curr;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">                index += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev.next = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length -= <span class="number">1</span>;  <span class="comment">// 长度减少</span></span><br><span class="line">        <span class="keyword">return</span> curr.data;  <span class="comment">// 返回删除节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在置顶位置插入节点</span></span><br><span class="line">    insert(position, data)&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &gt;= <span class="keyword">this</span>.length || position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span>(position === <span class="number">0</span>)&#123; <span class="comment">// 插入位置在头节点</span></span><br><span class="line">            node.next = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> curr = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; position)&#123;</span><br><span class="line">                prev = curr;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">                index += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node.next = curr;</span><br><span class="line">            prev.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指定节点的位置</span></span><br><span class="line">    indexOf(data, start=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= <span class="keyword">this</span>.length)&#123; <span class="comment">// 判断起始位置是否合法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; <span class="keyword">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curr.data === data &amp;&amp; index &gt;= start)&#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回链表的长度</span></span><br><span class="line">    size()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>,length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表是否为空</span></span><br><span class="line">    isEmpty()&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> l = <span class="keyword">new</span> Link_list();</span><br><span class="line">l.append(<span class="number">1</span>);</span><br><span class="line">l.append(<span class="number">2</span>);</span><br><span class="line">l.append(<span class="number">3</span>);</span><br><span class="line">l.append(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// console.log(l)</span></span><br><span class="line"></span><br><span class="line">l.removeAt(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// console.log(l)</span></span><br><span class="line"></span><br><span class="line">l.insert(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(l)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(l.indexOf(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(l.isEmpty())</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>数据结构</category>
        <category>记录</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>数据结构</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript数据结构与算法——队列</title>
    <url>/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="队列（FIFO）先进先出"><a href="#队列（FIFO）先进先出" class="headerlink" title="队列（FIFO）先进先出"></a>队列（FIFO）先进先出</h2><ol>
<li><p>队列是一种受限的数据结构，从队尾插入，从队头移除。</p>
</li>
<li><p>队列的实现方式有两种，数组和链表</p>
<p>用数组实现队列有两种方式：</p>
<ul>
<li>顺序队列</li>
<li>循环队列</li>
</ul>
</li>
<li><p>一般在循环队列中规定队列的长度只能为数组总长度减1，即有一个位置不放元素。因此，当 head 等于 tail 的时候，说明队列为空，而当 head 等于 <code>( tail + 1 ) %length</code>（length为数组长度）的时候，说明队满。</p>
</li>
<li><p>适用场景：</p>
<p>一般程序中会将队列作为缓冲器或者解耦使用。</p>
<ol>
<li>秒杀应用</li>
<li>生产者与消费者模式</li>
</ol>
</li>
</ol><a id="more"></a>
<h4 id="队列的方法"><a href="#队列的方法" class="headerlink" title="队列的方法"></a>队列的方法</h4><ul>
<li><code>enqueue</code>：从队尾添加一个元素。</li>
<li><code>dequeue</code>：从队头删除一个元素。</li>
<li><code>head</code>：返回头部的元素，不删除。</li>
<li><code>size</code>：返回队列大小。</li>
<li><code>clear</code>：清空队列。</li>
<li><code>isEmpty</code>：队列是否为空。</li>
<li><code>tail</code>：返回队列尾节点。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> items = []; <span class="comment">// 存储数据</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从队尾添加元素</span></span><br><span class="line">	<span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">		items.push(item);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从队头删除一个元素</span></span><br><span class="line">	<span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.shift();</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回队列头部的元素</span></span><br><span class="line">	<span class="keyword">this</span>.head = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items[<span class="number">0</span>]</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回队列大小</span></span><br><span class="line">	<span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.length;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 清空队列</span></span><br><span class="line">	<span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		items = []</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 队列是否为空</span></span><br><span class="line">	<span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.length == <span class="string">"0"</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回队尾元素</span></span><br><span class="line">	<span class="keyword">this</span>.tail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items[items.length<span class="number">-1</span>]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ol>
<li><h6 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h6><p>有一个数组a[100]存放0-99；要求每隔两个数删掉一个数，到末尾是循环至开头继续进行，求最后一个被删除的数。</p>
<p>思路：</p>
<p>​        先将100个数放入队列，然后使用<code>while</code>循环，终止条件是队列里只有一个元素，使用一个变量从0开始计数。</p>
<ul>
<li>从队列头部删除一个元素，计数 +1；</li>
<li>因为是每三个数删除一个，所以计数%3==0，则说明这个元素是需要被删除的元素，否则就把它添加到队尾。</li>
</ul>
<p>最后剩下的一个元素就是最后一个被删除的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 构造100个数</span></span><br><span class="line"><span class="keyword">var</span> arr_list = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">101</span>; i++)&#123;</span><br><span class="line">	arr_list.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del_ring</span>(<span class="params">arr_list</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// 将数放入队列</span></span><br><span class="line">	<span class="keyword">var</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr_list.length; i++)&#123;</span><br><span class="line">		queue.enqueue(arr_list[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 计数</span></span><br><span class="line">	<span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(queue.size() != <span class="number">1</span> )&#123;</span><br><span class="line">		<span class="comment">// 弹出一个元素，判断是否需要被删除</span></span><br><span class="line">		<span class="keyword">var</span> item = queue.dequeue();</span><br><span class="line"></span><br><span class="line">		count += <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(count%<span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">			queue.enqueue(item);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> queue.head();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(del_ring(arr_list));</span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="用两个队列实现一个栈"><a href="#用两个队列实现一个栈" class="headerlink" title="用两个队列实现一个栈"></a>用两个队列实现一个栈</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QueueStack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> queue_1 = <span class="keyword">new</span> Queue();</span><br><span class="line">	<span class="keyword">var</span> queue_2 = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> data_queue = <span class="literal">null</span>;  <span class="comment">// 存放数据的队列标志</span></span><br><span class="line">	<span class="keyword">var</span> empty_queue = <span class="literal">null</span>;	<span class="comment">// 空队列标志</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化队列标志位,</span></span><br><span class="line">	<span class="keyword">var</span> init_queue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">// 如果都为空，默认队列 1 为有数据的队列</span></span><br><span class="line">		<span class="keyword">if</span>(queue_1.isEmpty() &amp;&amp; queue_2.isEmpty())&#123;</span><br><span class="line">			data_queue = queue_1;</span><br><span class="line">			empty_queue = queue_2;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(queue_1.isEmpty())&#123;</span><br><span class="line">			data_queue = queue_2;</span><br><span class="line">			empty_queue = queue_1;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data_queue = queue_1;</span><br><span class="line">			empty_queue = queue_2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// push方法</span></span><br><span class="line">	<span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">		init_queue();</span><br><span class="line">		data_queue.enqueue(item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// top方法</span></span><br><span class="line">	<span class="keyword">this</span>.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		init_queue();</span><br><span class="line">		<span class="keyword">return</span> data_queue.tail()</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// pop方法</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		弹出的栈顶元素就是队列的队尾元素</span></span><br><span class="line"><span class="comment">		交换数据队列和空队列</span></span><br><span class="line"><span class="comment">	*/</span> </span><br><span class="line">	<span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		init_queue();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(data_queue.size &gt; <span class="number">1</span>)&#123;</span><br><span class="line">			empty_queue.enqueue(data_queue.dequeue());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> data_queue.dequeue();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> queueStack = <span class="keyword">new</span> QueueStack();</span><br><span class="line">queueStack.push(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(queueStack.top())</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>js</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>数据结构</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript数据结构与算法——栈</title>
    <url>/2019/12/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E6%A0%88/</url>
    <content><![CDATA[<h2 id="数组、集合、散列表"><a href="#数组、集合、散列表" class="headerlink" title="数组、集合、散列表"></a>数组、集合、散列表</h2><blockquote>
<p>数组是指定位置元素的值，是通过下标获取的，下标在大部分语句中是从0开始的。</p>
</blockquote><h4 id="数组的特点："><a href="#数组的特点：" class="headerlink" title="数组的特点："></a>数组的特点：</h4><ul>
<li>定长：数组长度固定。</li>
<li>按顺序访问：必须从第一个元素开始按顺序访问。</li>
</ul><blockquote>
<p>散列表，又叫哈希表，是能够通过给定的关键字的值直接访问到具体对应的值的一个数据结构</p>
</blockquote><h4 id="散列表的特点："><a href="#散列表的特点：" class="headerlink" title="散列表的特点："></a>散列表的特点：</h4><ul>
<li>访问速度很快。</li>
<li>需要额外的空间</li>
<li>无序</li>
<li>可能产生碰撞</li>
</ul><a id="more"></a>



<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><blockquote>
<p>栈是一种后进先出（LIFO）的数据结构，只能从一段进行操作，栈一般使用一段<strong>连续</strong>的空间进行存储。</p>
</blockquote>
<h4 id="栈的适用场景："><a href="#栈的适用场景：" class="headerlink" title="栈的适用场景："></a>栈的适用场景：</h4><ul>
<li>逆序输出。</li>
<li>语法检测，符号成对出现</li>
<li>数制转换。</li>
</ul>
<h4 id="栈的方法："><a href="#栈的方法：" class="headerlink" title="栈的方法："></a>栈的方法：</h4><ul>
<li><code>push</code>：添加元素到栈顶，也叫压栈。</li>
<li><code>pop</code>：弹出栈顶元素。</li>
<li><code>top</code>：返回栈顶元素。</li>
<li><code>isEmpty</code> ：判断栈是否为空。</li>
<li><code>size</code>：返回栈中元素个数。</li>
<li><code>clear</code>：清空栈。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> items = []  <span class="comment">// 使用数组存储数据</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// push</span></span><br><span class="line">	<span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">		items.push(item);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// pop</span></span><br><span class="line">	<span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params">	</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.pop();</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// top</span></span><br><span class="line">	<span class="keyword">this</span>.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items[items.length<span class="number">-1</span>];</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// isEmpty</span></span><br><span class="line">	<span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.length === <span class="number">0</span>;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// size</span></span><br><span class="line">	<span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.length</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// clear</span></span><br><span class="line">	<span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		items =[];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h4><ol>
<li><h6 id="判断括号是否合法。"><a href="#判断括号是否合法。" class="headerlink" title="判断括号是否合法。"></a>判断括号是否合法。</h6><p>思路：</p>
<p>使用for循环遍历每一个字符，对于每一个符号：</p>
<ul>
<li>遇到左括号，就把左括号压入栈中。</li>
<li>遇到右括号，判断栈是否为空，为空则说明没有左括号与之对应，括号不合法；如果栈不为空，则把栈顶元素移除，与这对括号抵消。</li>
</ul>
<p>for循环结束以后，如果栈为空，则把所有括号抵消完了，说明括号合法；如果还有元素，则说明括号不合法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_leagl_brackets</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;string.length; i++)&#123;</span><br><span class="line">		<span class="keyword">var</span> item = string[i];</span><br><span class="line">		<span class="comment">// 遇到左括号做入栈操作</span></span><br><span class="line">		<span class="keyword">if</span> (item == <span class="string">"("</span>)&#123;</span><br><span class="line">			stack.push(item);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item == <span class="string">")"</span>)&#123;</span><br><span class="line">			<span class="comment">// 遇到右括号，判断栈是否为空</span></span><br><span class="line">			<span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				stack.pop();  <span class="comment">// 弹出左括号</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 如果栈为空，则泽富川括号合法</span></span><br><span class="line">	<span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串是否合法测试用例</span></span><br><span class="line"><span class="built_in">console</span>.log(is_leagl_brackets(<span class="string">"dwadsd(wa(dw)dwad(dwa))"</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(is_leagl_brackets(<span class="string">"dwadsd(wa(dw)dwa(d(dwa))"</span>));  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="写一个求栈中最小值的方法"><a href="#写一个求栈中最小值的方法" class="headerlink" title="写一个求栈中最小值的方法"></a>写一个求栈中最小值的方法</h6><p>思路：</p>
<p>需要两个栈，一个用来存储数据，一个用来存储最小值。</p>
<p>如果最小值的栈为空或者栈顶元素大于数据元素，就把这个数据元素压入栈中，否则就把最小值栈的栈顶元素弹出再压入栈中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Minstack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data_stack = <span class="keyword">new</span> Stack();</span><br><span class="line">	<span class="keyword">var</span> min_stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// push方法</span></span><br><span class="line">	<span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">		data_stack.push(item);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// min_stack如果为空或者栈顶元素大于item</span></span><br><span class="line">		<span class="keyword">if</span>(min_stack.isEmpty()|| item &lt; min_stack.top())&#123;</span><br><span class="line">			min_stack.push(item);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			min_stack.push(min_stack.top());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 弹出栈顶元素</span></span><br><span class="line">	<span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		data_stack.pop();</span><br><span class="line">		min_stack.pop();</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回栈中最小值</span></span><br><span class="line">	<span class="keyword">this</span>.min = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> min_stack.top();</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">minstack = <span class="keyword">new</span> Minstack();</span><br><span class="line">minstack.push(<span class="number">2</span>);</span><br><span class="line">minstack.push(<span class="number">5</span>);</span><br><span class="line">minstack.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(minstack.min())  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h6><blockquote>
<p>所谓的后缀表达式，就是将要计算的数放在前面，运算符放到后面。计算时，遇到运算符，从左到右，将距离运算符最近的两个数参与运算，将结果与刚才拿出的进行替换。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后缀表达式：[&quot;4&quot;, &quot;12&quot;, &quot;5&quot;, &quot;&#x2F;&quot;, &quot;+&quot;]   中缀表达式：(4+(12&#x2F;5))&#x3D;6</span><br><span class="line">[&quot;4&quot;, &quot;2&quot;, &quot;+&quot;]</span><br><span class="line">[&quot;6&quot;]     计算结果</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<p>使用for循环遍历每一个元素，做如下操作：</p>
<ul>
<li>如果元素不是<code>+ - * /</code>中的某一个，就将元素压入栈中。</li>
<li>如果元素是<code>+ - * /</code>中的一个，则从栈中连续弹出两个元素，然后对这两个元素进行计算，并将结果压入栈中。</li>
</ul>
<p>for循环结束后，栈里只有一个元素，这个元素就是结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc_exp</span>(<span class="params">exp</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; exp.length; i++)&#123;</span><br><span class="line">		<span class="keyword">var</span> item = exp[i]</span><br><span class="line">		<span class="keyword">if</span>([<span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"*"</span>, <span class="string">"/"</span>].indexOf(item) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> value_1 = stack.pop();</span><br><span class="line">			<span class="keyword">var</span>	value_2 = stack.pop();</span><br><span class="line">			<span class="comment">// 第一次弹出来的数放在运算符的右边，第二个弹出的数放在运算左边</span></span><br><span class="line">			<span class="keyword">var</span> exp_str = value_2 + item + value_1;</span><br><span class="line">			<span class="comment">// 计算并取整</span></span><br><span class="line">			<span class="keyword">var</span> res = <span class="built_in">parseInt</span>(<span class="built_in">eval</span>(exp_str));</span><br><span class="line">			<span class="comment">// 将计算结果压入栈中</span></span><br><span class="line">			stack.push(res.toString());</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			stack.push(item)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calc_exp([<span class="string">"4"</span>, <span class="string">"12"</span>, <span class="string">"5"</span>, <span class="string">"/"</span>, <span class="string">"+"</span>] )) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存放运算符优先级</span></span><br><span class="line"><span class="keyword">var</span> priority_map = &#123;</span><br><span class="line">	<span class="string">"+"</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="string">"-"</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="string">"*"</span>: <span class="number">2</span>,</span><br><span class="line">	<span class="string">"/"</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infix_exp_2_postfix_exp</span>(<span class="params">exp</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> postfix_lst = [];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;exp.length; i++)&#123;</span><br><span class="line">		<span class="keyword">var</span> item = exp[i];</span><br><span class="line">		<span class="comment">// 如果是数字，直接放入postfix_lst</span></span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">isNaN</span>(item))&#123;</span><br><span class="line">			postfix_lst.push(item)</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (item == <span class="string">"("</span>)&#123;</span><br><span class="line">			<span class="comment">// 如果遇到左括号</span></span><br><span class="line">			stack.push(item);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item == <span class="string">")"</span>)&#123;</span><br><span class="line">			<span class="comment">// 如果遇到右括号</span></span><br><span class="line">			<span class="keyword">while</span>(stack.top() != <span class="string">"("</span>)&#123;</span><br><span class="line">				postfix_lst.push(stack.pop());</span><br><span class="line">			&#125;</span><br><span class="line">			stack.pop(); <span class="comment">// 左括号出栈</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 遇到运算符，把栈顶运算符弹出，直到栈顶的运算符优先级小于当前运算符</span></span><br><span class="line">			<span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; [<span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"*"</span>, <span class="string">"/"</span>].indexOf(stack.top()) &gt;= <span class="number">0</span> &amp;&amp; priority_map[stack.top()] &gt;= priority_map[item])&#123;</span><br><span class="line">				<span class="comment">// 把弹出的运算符加入到postfix_lst中</span></span><br><span class="line">				postfix_lst.push(stack.pop());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 当前的运算符入栈</span></span><br><span class="line">			stack.push(item);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// for循环结束后，栈里可能还有元素，都弹出放入到postfix_lst中</span></span><br><span class="line">	<span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">		postfix_lst.push(stack.pop())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> postfix_lst</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(infix_exp_2_postfix_exp([<span class="string">"12"</span>, <span class="string">"+"</span>, <span class="string">"2"</span>]));  <span class="comment">// [ '12', '2', '+' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(infix_exp_2_postfix_exp([<span class="string">"12"</span>, <span class="string">"+"</span>, <span class="string">"2"</span>, <span class="string">"/"</span>, <span class="string">"1"</span>]));  <span class="comment">// [ '12', '2', '1', '/', '+' ]</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>js</category>
        <category>数据结构与算法</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>数据结构</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>vue源码分析（一）</title>
    <url>/2019/12/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="vue源码分析之分析vue源码前的准备工作"><a href="#vue源码分析之分析vue源码前的准备工作" class="headerlink" title="vue源码分析之分析vue源码前的准备工作"></a>vue源码分析之分析vue源码前的准备工作</h3><img src="/2019/12/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/准备工作.png" style="zoom:80%;">

<a id="more"></a>

<h4 id="认识Flow"><a href="#认识Flow" class="headerlink" title="认识Flow"></a>认识Flow</h4><ul>
<li>Flow的工作方式<ul>
<li>类型推断：通过上下文推断</li>
<li>类型注释：事先注释好期待的类型</li>
</ul>
</li>
<li>类型注释是在需要的变量后面加：写明变量类型<ul>
<li>数组类型为Array<number></number></li>
<li>Null<ul>
<li>：？string=null</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="vue源码目录设计"><a href="#vue源码目录设计" class="headerlink" title="vue源码目录设计"></a>vue源码目录设计</h4><ul>
<li>源码位于src目录下<ul>
<li>src<ul>
<li>compiler：编译相关</li>
<li>core：核心代码</li>
<li>platforms：不同平台支持</li>
<li>server：服务端渲染</li>
<li>sfc：.vue文件的解析</li>
<li>shared：共享代码</li>
</ul>
</li>
<li>服务器端渲染主要的工作是把组件渲染为服务器端的HTML字符串，将其直接发送到浏览器，最后将静态标记“混合”为客户端上完全交互的应用程序。</li>
</ul>
</li>
</ul>
<h4 id="vue源码构建"><a href="#vue源码构建" class="headerlink" title="vue源码构建"></a>vue源码构建</h4><ul>
<li><p>vue源码基于Rollup构建</p>
</li>
<li><p>构建脚本</p>
<ul>
<li>script字段为npm执行脚本。</li>
</ul>
</li>
<li><p>构建过程</p>
<ul>
<li><p>构建入口文件scripts/build.js</p>
<ul>
<li>读取配置文件，通过命令行参数对构建配置进行过滤</li>
</ul>
</li>
<li><p>配置文件scripts/config.js</p>
<ul>
<li>对于单个配置，遵循Rollup构建规则。<ul>
<li>entry：构建的入口js文件地址</li>
<li>dest：构建后的js文件地址</li>
<li>format：构建格式<ul>
<li>cjs：表示构建后的文件遵循CommonJS规范</li>
<li>es：表示构建出来的文件遵循ES Module规范</li>
<li>umd：表示构建出来的文件遵循UMD规范</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>vue-cli构建项目时的runtime-only和runtime+compiler版本</p>
<ul>
<li><p>runtime+compiler</p>
<p><img src="/2019/12/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/44947a0b-ffab-46f5-8e98-011082cb5c12-1693052.jpg" alt="img"></p>
<ul>
<li>解析<ul>
<li>当把vue模板template传给vue实例的时候，vue内部会保存在options里面。</li>
<li>解析成抽象语法树（ast）</li>
<li>编译成render函数</li>
<li>由render函数生成虚拟DOM</li>
<li>将虚拟DOM渲染成真实DOM</li>
</ul>
</li>
</ul>
</li>
<li><p>runtim-only</p>
<ul>
<li>执行render函数</li>
<li>生成虚拟DOM</li>
<li>渲染成真实DOM</li>
</ul>
</li>
<li><p>runtime-only的性能更高，通常需要借助webpack的vue-loader工具把.vue文件编译成JS。</p>
</li>
<li><p>render函数</p>
<ul>
<li><p>回调createElement（）有两种用法。</p>
<p><img src="/2019/12/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/390a0078-b482-491b-9faf-4da027fc4973-1693052.jpg" alt="img"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="从vue入口开始（src-platforms-web-entry-runtome-with-compiler-js）"><a href="#从vue入口开始（src-platforms-web-entry-runtome-with-compiler-js）" class="headerlink" title="从vue入口开始（src/platforms/web/entry-runtome-with-compiler.js）"></a>从vue入口开始（src/platforms/web/entry-runtome-with-compiler.js）</h4><ul>
<li>根据import Vue from xxx文件一步步找到src/core/instance/index.js这个Vue的主文件。<ul>
<li>Vue是一个用function定义的类，所有模块按功能都通过xxxMixin(vue)进行封装，给vue的prototype扩展一些方法。</li>
<li>initGlobalAPI<ul>
<li>为vue添加全局静态方法。（src/core/global-api/index.js）</li>
<li>所有的全局方法都在这个文件里</li>
<li>需要注意的是vue.util中的方法是不稳定的，不建议使用。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>记录</category>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>vue文档笔记</title>
    <url>/2019/12/06/vue%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><p>1、vue的特性之一是其非侵入性的响应式系统。数据实现双向绑定。</p>
<p>2、当把一个普通的js对象传入vue实例作为data选项时，vu将遍历此对象的所有属性，并使用<code>object.defineProperty</code> 把这些属性全部转为<code>getter/setter</code>。由于<code>object.defineProperty</code>是ES5中无法shim的特性，所以vue不支持IE8及更低版本浏览器的原因。</p>
<a id="more"></a>

<h3 id="声明响应式属性"><a href="#声明响应式属性" class="headerlink" title="声明响应式属性"></a>声明响应式属性</h3><p>1、vue无法检测到对象属性的添加或删除</p>
<p>2、对于已建立的实例，vue不允许动态添加根级别的响应式属性。但是，可以使用<code>vm.$set</code>实例方法向嵌套对象添加响应式属性。</p>
<p>3、基于上一条原因，必须在初始化实例前声明所有根级响应式属性。</p>
<h3 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h3><p>1、vue更新DOM是异步执行的。</p>
<p>2、同一个<code>watcher</code>被多次触发，只会被推入队列一次。</p>
<p>3、vue鼓励使用“数据驱动”的方式，避免直接接触DOM，但不得不操作DOM时，为了在数据变化之后等待vue完成更新DOM，可以在数据变化之后使用<code>Vue.nextTick(callback)</code>。这样回调函数将在DOM更新完成后被调用。<br>4、在组件中使用<code>vm.$nextTick()</code>实例方法，不需要全局Vue，并且回调函数中的<code>this</code>自动绑定到当前Vue实例上。<br>5、<code>$nextTick()</code>返回一个<code>Promise</code>对象，可以使用<code>async/await</code>语法处理。</p>
<h2 id="vue实例"><a href="#vue实例" class="headerlink" title="vue实例"></a>vue实例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'hi'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>Object.freeze()</code>会阻止修改现有属性，也意味着响应系统无法再追踪变化</p>
<h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><p><code>beforeCreate</code></p>
<p><code>created</code></p>
<p><code>beforeMount</code></p>
<p><code>mounted</code></p>
<p><code>beforeUpdate</code></p>
<p><code>updated</code></p>
<p><code>beforeDestroy</code></p>
<p><code>destroy</code></p>
<h4 id="vue生命周期钩子函数"><a href="#vue生命周期钩子函数" class="headerlink" title="vue生命周期钩子函数"></a>vue生命周期钩子函数</h4><p>1、vue钩子函数就是在生命周期不同阶段被调用。</p>
<p>2、生命周期钩子的<code>this</code>上下文指向调用它的vue实例。</p>
<p>3、不要在选项属性或回调上使用箭头函数。因为箭头函数的<code>this</code>指向<code>window</code>。</p>
<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>1.插值 </p>
<p>使用<code>{ {}}</code>进行数据绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; &#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以通过<code>v-once</code>指令，只执行一次性的数据插入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>&#123; &#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果需要输出真正的HTML，可以使用<code>v-html</code>指令</p>
<p>在<code>{ {}}</code>中可以写js表达式，但只能包含单个表达式</p>
<p>2.指令</p>
<p>指令是带有<code>v-</code>前缀的特殊特性。响应式的作用与DOM。</p>
<ul>
<li><p>参数</p>
<ul>
<li>一个指令更够接受一个参数，在指令名称前以冒号<code>：</code>表示。</li>
</ul>
</li>
<li><p>动态参数</p>
<ul>
<li><p>在指令后用<code>[]</code>表示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">'url'</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>动态参数求出的是<code>字符串</code>，异常时为<code>null</code></p>
</li>
<li><p>空格和引号在参数中是无效的，会触发编译警告。可以使用计算属性代替复杂表达式。</p>
</li>
<li><p>使用模板是避免使用大写字符，应为在渲染时会被浏览器强制转换为小写。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性<code>computed</code></h2><p>首先，将同一函数定义成计算属性<code>computed</code>或者方法<code>methods</code>，两种方式得到的最终结果是一致的，不同的是计算属性可以基于响应式依赖进行缓存。也就是多次访问计算属性时会立即返回结果，不必在执行函数。</p>
<p>由于<code>Date.now()</code>不是响应式依赖，所以每次重新渲染时总会执行。(eg:computed.html)</p>
<p>计算属性默认是getter，在需要时可以提供setter。(eg:getter_setter.html)</p>
<h2 id="监听属性watch"><a href="#监听属性watch" class="headerlink" title="监听属性watch"></a>监听属性<code>watch</code></h2><p>当需要异步操作或者开销较大时，可以使用<code>watch</code>属性对状态进行监听，可以设置一个中间状态。</p>
<h2 id="class和style绑定"><a href="#class和style绑定" class="headerlink" title="class和style绑定"></a><code>class</code>和<code>style</code>绑定</h2><p>因为class和style都是属性，所以可以使用<code>v-bind</code>处理：可以是对象，也可以是数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span> =<span class="string">"class"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:class</span>=<span class="string">"&#123;active: true&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>v-bind:class</code>可以与普通class属性共存。</p>
<p>如果想要根据条件切换列表中的class，可以使用三元表达式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123;active: isActive&#125;, errorClass]"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>style</code>的语法与<code>class</code>一致。</p>
<p>当<code>v-bind：style</code>使用需要添加浏览器前缀的CSS属性时，Vue会 自动添加相应的前缀。</p>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>1、<code>v-if</code>：条件性的渲染一块内容，这块内容只会在指令的表达式返回 <code>truthy</code> 值的时候被渲染。可与<code>v-else</code>，<code>v-else-if</code>搭配使用。</p>
<p>当需要切换多个元素时，可以与<code>&lt;template&gt;</code>标签搭配使用，最终渲染结果不包括标签。</p>
<p><code>key</code>属性可以将个元素相互独立。</p>
<p>2、<code>v-show</code>：与v-if类似，不同的是，<code>v-if</code>会适当的将组件销毁，如果初始渲染时条件为<code>false</code>，则不会渲染，知道使用时才会渲染。而<code>v-show</code>只是简单的切换元素的CSS属性的<code>display</code>，会在初始化时就渲染元素。</p>
<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>1、<code>v-for</code></p>
<p>可以对一个数组或者对象进行遍历，然后对其进行渲染。</p>
<ul>
<li>对于数组，可以有两个参数：（item， index）</li>
<li>对于对象，可以有三个参数：（name，value, index）</li>
</ul>
<p>当重用或者重新排序现有元素时，需要为每一项提供一个唯一的<code>key</code>属性。需要注意的是，key的值需要使用字符串或数值类型的值。</p>
<p>2、数组更新检测</p>
<p>vue对数组的一些方法进行包装，使其可以触发视图更新。</p>
<p><code>push()</code>,<code>pop()</code>,<code>shift()</code>,<code>unshift()</code>,<code>splice()</code>,<code>sort()</code>,<code>reverse()</code></p>
<p><code>filter()</code>,<code>concat()</code>,<code>slice()</code></p>
<p><strong>注意</strong><br>1、数组变更检测</p>
<p>当利用索引对数组进行直接设置时，和修改数组长度时，vue检测不到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        items:[<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这些vue不会响应</span></span><br><span class="line">vm.items[<span class="number">1</span>] = <span class="string">'x'</span>;</span><br><span class="line">vm.items.length = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>为了索引问题，可以使用全局方法<code>Vue.set</code>,或者实例方法<code>vm.$set</code>。</p>
<p>为了修改数组长度，可以使用<code>splice</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure>

<p>2、对象变更检测</p>
<p>Vue不能检测对象属性的添加或删除。</p>
<p>可以使用全局方法<code>Vue.set</code>,或者实例方法<code>Vue.$set</code>进行对台设置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$<span class="keyword">set</span>(vm.userProfile, 'age', 23)</span><br></pre></td></tr></table></figure>

<p>如果需要对已有对象赋值多个新属性，可以使用<code>Object.assign()</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.userProfile = <span class="built_in">Object</span>.assign(&#123;&#125;, vm.userProfile, &#123;</span><br><span class="line">    age:<span class="number">23</span>,</span><br><span class="line">    like: <span class="string">'Vue'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不推荐在同一元素上使用<code>v-for</code>和<code>v-if</code></p>
</blockquote>
<p>在同一节点下，<code>v-for</code>的优先级比<code>v-if</code>更高。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>关于hexo中使用{{}}报错的解决方案</title>
    <url>/2019/12/02/%E5%85%B3%E4%BA%8Ehexo%E4%B8%AD%E4%BD%BF%E7%94%A8-%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>今天在发博客的时候，因为vue的有些内容需要用到<code>{ {}}</code>，所以在执行<code>hexo generate</code>初始化的时候总是报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">at formatNunjucksError (/mnt/wendang/demo/blog/moxuan/node_modules/hexo/lib/extend/tag.js:99:13)</span><br><span class="line"> at /mnt/wendang/demo/blog/moxuan/node_modules/hexo/lib/extend/tag.js:121:34</span><br><span class="line"> at tryCatcher (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line"> at Promise._settlePromiseFromHandler (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class="line"> at Promise._settlePromise (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class="line"> at Promise._settlePromise0 (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class="line"> at Promise._settlePromises (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/promise.js:725:18)</span><br><span class="line"> at _drainQueueStep (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:93:12)</span><br><span class="line"> at _drainQueue (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:86:9)</span><br><span class="line"> at Async._drainQueues (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:102:5)</span><br><span class="line"> at Immediate.Async.drainQueues [as _onImmediate] (/mnt/wendang/demo/blog/moxuan/node_modules/bluebird/js/release/async.js:15:14)</span><br><span class="line"> at processImmediate (internal/timers.js:439:21)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>由于刚开始的额时候动了hexo的配置文件，所以一度错以为是配置文件出了问题，无奈又将配置文件恢复到原来的状态，但还是没有效果，依旧报错，这是只能讲vue的博客先暂时移出文件夹，在进行初始化时就可以正常通过了，所以可以断定就是vue这这篇博客的问题，但是这篇在将博客切分以后,一部分一部分的进行比较，执行初始化命令，最后将问题定位在了<code>{ {}}</code>上面。查阅资料以后，现解决方案如下：</p>
<blockquote>
<h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4></blockquote>
<p>如果想要不对{ { } }进行解析 ，只想显示{ { user.name } }，可以用这种方式写在你的文章中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123;user.name&#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4></blockquote>
<p>将前面的两个括号拆开即可，也就是破坏原来的结构。我就是用的这种方法，如果仔细看的话，我的前面两个括号实际上中间是有一个空格的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; &#123;uer.name&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<p> <a href="https://link.jianshu.com/?t=http%3A%2F%2Fhbson.cn%2F2018%2F04%2F23%2FDouble_brace_parsing%2F" target="_blank" rel="noopener">http://hbson.cn/2018/04/23/Double_brace_parsing/</a></p>
<p><a href="https://www.v2ex.com/t/510207" target="_blank" rel="noopener">https://www.v2ex.com/t/510207</a></p>
]]></content>
      <categories>
        <category>记录</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vue笔记(三)</title>
    <url>/2019/12/02/vue%E7%AC%94%E8%AE%B0-%E4%B8%89/</url>
    <content><![CDATA[<h4 id="项目构建（vue-cli）"><a href="#项目构建（vue-cli）" class="headerlink" title="项目构建（vue-cli）"></a>项目构建（<code>vue-cli</code>）</h4><h5 id="1、安装及初始化"><a href="#1、安装及初始化" class="headerlink" title="1、安装及初始化"></a>1、安装及初始化</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">vue init webpack 项目名称  &#x2F;&#x2F;安装框架</span><br><span class="line">cd 项目名称</span><br><span class="line">npm install &#x2F;&#x2F;安装依赖</span><br><span class="line">npm run dev &#x2F;&#x2F;启动服务</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><ul>
<li><p>默认没有安装less，但已经配好了，需要自己安装less</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装需要的插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios vuex bootstrap</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h5 id="2、模块（esmodule）"><a href="#2、模块（esmodule）" class="headerlink" title="2、模块（esmodule）"></a>2、模块（<code>esmodule</code>）</h5><ul>
<li><p>如何定义 （一个js文件就是一个模块）</p>
</li>
<li><p>如何导出（export）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> a = <span class="string">'1sa'</span>;</span><br><span class="line"><span class="keyword">export</span> b = <span class="string">'lalal'</span>;</span><br><span class="line"><span class="comment">//只导出一个</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">'alalal'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> b;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何使用（import）</p>
<ul>
<li><p>如果是第三方模块不需要加<code>./</code></p>
</li>
<li><p>如果是文件模块需要加<code>./</code></p>
</li>
<li><p><code>import</code>拥有声明功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两种方式</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> b <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(b.a)</span><br><span class="line"><span class="comment">//只引入一个</span></span><br><span class="line"><span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h5 id="3、-vue文件"><a href="#3、-vue文件" class="headerlink" title="3、.vue文件"></a>3、<code>.vue</code>文件</h5><p><img src="/2019/12/02/vue%E7%AC%94%E8%AE%B0-%E4%B8%89/1571916701222.png" alt="1571916701222"></p>
<ul>
<li><code>vue</code>模板文件    </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &lt;!-- 路由 --&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;,</span><br><span class="line">        computed:&#123;&#125;,</span><br><span class="line">        components:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>打包(<code>main.js</code>)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;  <span class="comment">// 引入的事vue的runtime</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>; <span class="comment">//引入.vue文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index.js'</span></span><br><span class="line"><span class="comment">//打包</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(App);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* render:h=&gt;h(App);*/</span></span><br><span class="line">    router, <span class="comment">//声明router</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>路由(<code>router/index.js</code>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>; <span class="comment">//引入vue-router</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../component/Home.js'</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'../component/List.js'</span>;</span><br><span class="line"><span class="comment">//路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/home'</span>,</span><br><span class="line">         	component:Home,</span><br><span class="line">            meta:&#123;<span class="attr">keepAlive</span>:<span class="literal">true</span>&#125;, <span class="comment">//路由元信息，设置缓存 /this.$route.meta.keepAlive</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">'/list'</span>,<span class="attr">component</span>:List&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line">Vue.use(VueRouter); <span class="comment">//use的作用是注册一些全局内容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>全局钩子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在进入路由之前　每一次都会执行此方法</span></span><br><span class="line">router.beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params">to,from,next</span>)</span>&#123;</span><br><span class="line">   	 next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h4><h5 id="1、coding-split-代码分割"><a href="#1、coding-split-代码分割" class="headerlink" title="1、coding split 代码分割　"></a>1、<code>coding split</code> 代码分割　</h5><ul>
<li><p>懒加载（<code>syntax-dynamic-import</code> 插件）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/list'</span>,</span><br><span class="line">            <span class="comment">//自动按需加载</span></span><br><span class="line">            component:<span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">import</span>(<span class="string">'./List.vue'</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="2、打包发布"><a href="#2、打包发布" class="headerlink" title="2、打包发布"></a>2、打包发布</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<h4 id="常见问题解决方案"><a href="#常见问题解决方案" class="headerlink" title="常见问题解决方案"></a>常见问题解决方案</h4><h5 id="1、页面加载时“花括号”闪烁问题"><a href="#1、页面加载时“花括号”闪烁问题" class="headerlink" title="1、页面加载时“花括号”闪烁问题"></a>1、页面加载时“花括号”闪烁问题</h5><ul>
<li><p>原因：html的加载顺序</p>
<ul>
<li>解析html结构</li>
<li>加载外部脚本文件和样式表文件</li>
<li>解析并执行脚本文件</li>
<li>构造html DOM模型</li>
<li>加载图片等外部文件</li>
<li>页面加载完毕</li>
<li>如果把引入vue.js的script放到head里面，那页面不会出现“花括号”，因为在body之前就把vue引入进来了，vue加载完成了。</li>
</ul>
</li>
<li><p>解决办法</p>
<ul>
<li><p>使用<code>v-cloak</code>指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>v-html</code>指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">'msg'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用<code>v-text</code>指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">'msg'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>template</code>标签将需要渲染的html包起来</p>
<ul>
<li><code>template</code>元素 是一种用于保存客户端内容的机制，该内容在页面加载时不被渲染，但可以在运行时使用JavaScript进行实例化。</li>
</ul>
</li>
</ul>
<h5 id="2、DOM映射的问题（mounted）"><a href="#2、DOM映射的问题（mounted）" class="headerlink" title="2、DOM映射的问题（mounted）"></a>2、DOM映射的问题（mounted）</h5><ul>
<li><p>原因：DOM渲染是异步的，获取DOM时页面还没有被数据渲染完成</p>
<ul>
<li>解决办法：等待页面渲染完成后再去获取，所有DOM操作最好都放在<code>nextTick</code>中</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.wrap;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h5 id="3、子组件和父组件同时拥有methods-方法，会先走谁？"><a href="#3、子组件和父组件同时拥有methods-方法，会先走谁？" class="headerlink" title="3、子组件和父组件同时拥有methods 方法，会先走谁？"></a>3、子组件和父组件同时拥有<code>methods</code> 方法，会先走谁？</h5><ul>
<li>先执行子组件，后执行父组件，因为要想父组件完整，必须保证子组件已经加载完成</li>
</ul>
<h5 id="4、路由添加动画效果时页面抖动"><a href="#4、路由添加动画效果时页面抖动" class="headerlink" title="4、路由添加动画效果时页面抖动"></a>4、路由添加动画效果时页面抖动</h5><ul>
<li><p>设置绝对定位。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    route-view&#123;</span><br><span class="line"><span class="css">    	<span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">    &#125;    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以设置缓存<code>keep-alive</code> ，要缓存谁就包谁。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>记录</category>
        <category>vueCli</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue笔记(二)</title>
    <url>/2019/12/02/vue%E7%AC%94%E8%AE%B0-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>接笔记（一）</p>
<a id="more"></a>

<h5 id="10、路由（vue-router）"><a href="#10、路由（vue-router）" class="headerlink" title="10、路由（vue-router）"></a>10、路由（vue-router）</h5><h6 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h6><ul>
<li>前后端分离，后端只负责提供接口，前端处理跳转</li>
<li>切换的是组件，而不是页面</li>
<li>hash模式：开发时使用，不会导致404问题，但不支持seo</li>
<li>H5 的<code>history.pushState</code>上线时使用</li>
</ul>
<h6 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h6><ul>
<li><p>声明式</p>
<ul>
<li>由于是vue提供的，所以要先引入vue，在引入<code>vue-router</code></li>
<li><code>&lt;route-view&gt;&lt;/route-view&gt;</code> 由vue-router提供，存放路由的容器，自动替换成路由对应的页面</li>
<li><code>&lt;route-link&gt;&lt;/route-link&gt;</code> 类似 <code>a</code> 标签，也是vue-router提供<ul>
<li>to属性：设置路径 :to=”/路径”</li>
<li>tag属性：设置标签类型 tag=”button”</li>
</ul>
</li>
<li>默认<code>hash</code>模式，可以更改<code>mode</code>属性，设置为<code>history</code></li>
</ul>
</li>
<li><p>编程式（在js中跳转页面）</p>
<ul>
<li>$router :存的是方法<ul>
<li>push(‘/home’):强制跳转页面,string或object</li>
<li>go(-1) ：返回某一级</li>
<li>replace()   替换最后一个历史记录（当前页面）string或object</li>
</ul>
</li>
</ul>
</li>
<li><p>$route :存的是属性，获取当前路由信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> routes = [   <span class="comment">//路由表</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">''</span>,<span class="attr">component</span>:home&#125;, <span class="comment">//默认展示页面，相当于‘/’</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">'/home'</span>,<span class="attr">component</span>:home&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">'/list'</span>,<span class="attr">component</span>:list&#125;，</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">'*'</span>,<span class="attr">redirect</span>:<span class="string">'/home'</span>&#125;<span class="comment">//错误时重定向到home页面（404）</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">   routes,<span class="comment">//没有r </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h6 id="3、路由嵌套"><a href="#3、路由嵌套" class="headerlink" title="3、路由嵌套"></a>3、路由嵌套</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> routes = [ <span class="comment">//路由表</span></span><br><span class="line">    &#123; <span class="comment">//一级路由</span></span><br><span class="line">        path:<span class="string">'/home'</span>,</span><br><span class="line">        component:detail</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">'/detail'</span>,</span><br><span class="line">        component:detail,</span><br><span class="line">        children:[  <span class="comment">//路径不带'/'，带'/'表示一级路由</span></span><br><span class="line">            &#123;</span><br><span class="line">                path:<span class="string">'about'</span>,</span><br><span class="line">                compontent:about,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h6 id="4、参数路由（params）"><a href="#4、参数路由（params）" class="headerlink" title="4、参数路由（params）"></a>4、参数路由（<code>params</code>）</h6><p>$route:当前路由信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> home = &#123;</span><br><span class="line">    template:<span class="string">'&lt;div&gt;第&#123;&#123; $route.params.a &#125;&#125;&lt;/div&gt;'</span>，</span><br><span class="line">    watch:&#123;</span><br><span class="line">    	$route()&#123;</span><br><span class="line">            alert(<span class="string">'发送ajax请求'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// /home/2/d</span></span><br><span class="line"><span class="comment">// /home/:a/:b  =&gt; &#123;a:2,b:d&#125;</span></span><br><span class="line"><span class="keyword">let</span> routes = [  <span class="comment">// `：`路径参数，必须要有，但值可以是随机的</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">'/home/:a/:b'</span>,<span class="attr">component</span>:home&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>watch</code>对路径参数进行监控，参数变化发送ajax</li>
<li>路由可以重名，先碰见谁，谁就先执行</li>
</ul>
<h5 id="11、数据通信"><a href="#11、数据通信" class="headerlink" title="11、数据通信"></a>11、数据通信</h5><h6 id="1、用库axios"><a href="#1、用库axios" class="headerlink" title="1、用库axios"></a>1、用库<code>axios</code></h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123;stringify&#125; <span class="keyword">from</span> <span class="string">'qureystring'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求处理方法二：</span></span><br><span class="line"><span class="keyword">const</span> axios = Axios.create(&#123;</span><br><span class="line">    transformRequest:[</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> stringify(data);</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> created()&#123;</span><br><span class="line">    <span class="comment">// 方式一：直接调用axios的方法</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> Axios.get(<span class="string">'index/data.json'</span>);</span><br><span class="line">    <span class="comment">// 方式二：使用原始方式，类似于ajax，处理post请求会有所不同</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> Axios(&#123;  <span class="comment">//post处理：Axios -&gt; axios</span></span><br><span class="line">        url:<span class="string">'index/sum.php'</span>,</span><br><span class="line">        method:<span class="string">'post'</span>,</span><br><span class="line">        data: &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">22</span>&#125;，</span><br><span class="line">        <span class="comment">// post请求处理方法一：修改默认方法</span></span><br><span class="line">        transformRequest:[</span><br><span class="line">        	<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        		<span class="keyword">return</span> stringify(data);</span><br><span class="line">    		&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>axios默认的post提交的数据是json</li>
<li>如果想要转换成后台的默认方式<code>application/x-www-form-urlencoded</code>，可以修改axios默认的<code>transformRequest</code>方法。</li>
</ol>
<h6 id="2、原生fetch"><a href="#2、原生fetch" class="headerlink" title="2、原生fetch"></a>2、原生<code>fetch</code></h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get方法</span></span><br><span class="line"><span class="keyword">async</span> create()&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(<span class="string">'index/data.json'</span>)</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> res.json()</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post方法，使用formdata</span></span><br><span class="line"><span class="keyword">async</span> create()&#123;</span><br><span class="line">    <span class="keyword">let</span> formdata = <span class="keyword">new</span> formData();</span><br><span class="line">    formdata.append(<span class="string">'a'</span>, <span class="number">1</span>);</span><br><span class="line">    formdata.append(<span class="string">'b'</span>, <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(<span class="string">'index/sum.php'</span>, &#123;</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        body: formdata</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> result = res.json()</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="12、vue2-animate动画"><a href="#12、vue2-animate动画" class="headerlink" title="12、vue2-animate动画"></a>12、<code>vue2-animate</code>动画</h5><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue2-animate -D</span><br></pre></td></tr></table></figure>

<p>使用</p>
<p>1.主要是使用<code>transition</code>标签，指定<code>name</code>属性，将需要设置动画的对象包住，设置动画时长。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;vue2-animate&#x2F;dist&#x2F;animate.min.css&#39;</span><br><span class="line"></span><br><span class="line">&lt;transition name&#x3D;&#39;fadeUp&#39;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .box&#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        heigh: 100px;</span><br><span class="line">        backgroud: #ddd;</span><br><span class="line">        animation-duration: 2s;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>2.循环对象时，必须设置<code>:key</code>，必须使用<code>transition-group</code>标签，然后可以设置<code>tag</code>属性定义标签类型，可以设置<code>class</code>。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>记录</category>
        <category>vueRouter</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue笔记(一)</title>
    <url>/2019/12/02/vue%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
    <content><![CDATA[<h4 id="VUE入门"><a href="#VUE入门" class="headerlink" title="VUE入门"></a>VUE入门</h4><h5 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y  </span><br><span class="line">npm install vue</span><br></pre></td></tr></table></figure><h5 id="2、初始化"><a href="#2、初始化" class="headerlink" title="2、初始化"></a>2、初始化</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>; <span class="comment">//指定作用空间</span></span><br><span class="line">    data:&#123;&#125;, <span class="comment">//数据初始化</span></span><br><span class="line">    methods:&#123;&#125;, <span class="comment">//绑定事件中执行的方法</span></span><br><span class="line">    computed:&#123;&#125;,  <span class="comment">//计算属性</span></span><br><span class="line">    watch:&#123;&#125;, <span class="comment">//观察者（监听）</span></span><br><span class="line">    directived:&#123;&#125;, <span class="comment">//自定义指令</span></span><br><span class="line">    created()&#123;&#125;, <span class="comment">//数据初始化后调用的函数，ajax请求</span></span><br><span class="line">    filters:&#123;&#125;, <span class="comment">//自定义方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a>



<h5 id="3、指令"><a href="#3、指令" class="headerlink" title="3、指令"></a>3、指令</h5><h6 id="1、v-model数据双向绑定"><a href="#1、v-model数据双向绑定" class="headerlink" title="1、v-model数据双向绑定"></a>1、<code>v-model</code>数据双向绑定</h6><ul>
<li>数据（data）和input之间双向绑定</li>
<li>主要用于输入组件</li>
<li>通过v-model的数据都是字符串</li>
</ul>
<h6 id="2、自定义指令v-名称写在directives-属性中"><a href="#2、自定义指令v-名称写在directives-属性中" class="headerlink" title="2、自定义指令v-名称写在directives:{}属性中"></a>2、自定义指令<code>v-名称</code>写在<code>directives:{}</code>属性中</h6><p><img src="/2019/12/02/vue%E7%AC%94%E8%AE%B0-%E4%B8%80/1571063789860-1575284796134.png" alt="1571063789860"></p>
<h6 id="3、v-text和v-html"><a href="#3、v-text和v-html" class="headerlink" title="3、v-text和v-html"></a>3、<code>v-text</code>和<code>v-html</code></h6><ul>
<li>v-text：直接输出html代码</li>
<li>v-html：相当于innerHTML</li>
</ul>
<h6 id="4、v-if-v-show-控制显示隐藏"><a href="#4、v-if-v-show-控制显示隐藏" class="headerlink" title="4、v-if /v-show 控制显示隐藏"></a>4、<code>v-if</code> /<code>v-show</code> 控制显示隐藏</h6><ul>
<li><code>v-if</code> 操作的是DOM ，可以和<code>v-else-if</code>, <code>v-else</code>连写</li>
<li><code>v-show</code> 操作的是样式</li>
</ul>
<h6 id="5、v-bind-事件绑定-简写-："><a href="#5、v-bind-事件绑定-简写-：" class="headerlink" title="5、v-bind 事件绑定 简写 ："></a>5、<code>v-bind</code> 事件绑定 简写 <code>：</code></h6><ul>
<li>动态绑定“属性”</li>
<li>对于<code>class</code>和<code>style</code>属性，有两种方式</li>
</ul>
<h6 id="6、v-for事件循环"><a href="#6、v-for事件循环" class="headerlink" title="6、v-for事件循环"></a>6、<code>v-for</code>事件循环</h6><ul>
<li><p>数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">v-<span class="keyword">for</span> = <span class="string">"item,index in array"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>json:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">v-<span class="keyword">for</span> = <span class="string">"val,key in json"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串</p>
</li>
<li><p>数字</p>
</li>
<li><p>:key属性</p>
<ul>
<li>不能重复</li>
<li>不能变</li>
</ul>
</li>
</ul>
<h6 id="7、v-pre预编译"><a href="#7、v-pre预编译" class="headerlink" title="7、v-pre预编译"></a>7、<code>v-pre</code>预编译</h6><ul>
<li>提高性能</li>
<li>防止意外</li>
</ul>
<h5 id="4、修饰符"><a href="#4、修饰符" class="headerlink" title="4、修饰符"></a>4、修饰符</h5><ul>
<li><p><code>.number</code>    <code>.lazy</code></p>
</li>
<li><p>按键修饰符：<code>.enter</code> <code>.ctrl</code> <code>.keyCode</code></p>
</li>
<li><p>阻止事件冒泡 ：<code>@事件.stop</code></p>
<ul>
<li><code>stopPropagation，cancelBubble=true</code></li>
</ul>
</li>
<li><p>事件捕获 /事件监听：<code>@事件.capture</code> </p>
<ul>
<li><code>xxx.addEventListener（‘事件名’，fn， true)</code></li>
</ul>
</li>
<li><p>阻止事件默认行为 ：<code>@事件.prevent</code></p>
<ul>
<li><code>preventDefault， returnValue=false</code></li>
</ul>
</li>
<li><p>只触发一次 <code>@事件.once</code></p>
<ul>
<li><code>on(&#39;click&#39;) off(&#39;click&#39;)</code></li>
</ul>
</li>
<li><p>判断时间源绑定事件 <code>@事件.self</code></p>
<ul>
<li><code>e.srcElement&amp;&amp;e.target</code></li>
</ul>
</li>
<li><p>原生事件<code>@事件.native</code>(组件)</p>
</li>
<li><p>时间修饰符可以混用</p>
<ul>
<li><code>@keydown.enter.ctrl=&#39;fn&#39;</code></li>
</ul>
</li>
</ul>
<h5 id="5、属性"><a href="#5、属性" class="headerlink" title="5、属性"></a>5、属性</h5><h6 id="1、过滤器filters"><a href="#1、过滤器filters" class="headerlink" title="1、过滤器filters"></a>1、过滤器<code>filters</code></h6><ul>
<li>普通过滤器，在实例中使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&#123;&#123;data | my&#125;&#125;</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el: <span class="string">"#app"</span>,</span><br><span class="line">    filters: my(data,pamar1)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>全局过滤器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.filter(<span class="string">'my'</span>,(data)=&gt;&#123; <span class="comment">//必须放在页面顶部</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">'jw'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="2、computed-计算“属性”-不是”方法“"><a href="#2、computed-计算“属性”-不是”方法“" class="headerlink" title="2、computed 计算“属性” 不是”方法“"></a>2、<code>computed</code> 计算“属性” 不是”方法“</h6><ul>
<li>方法不会有缓存，computed会根据依赖(归vue管理的数据，可以响应式变化的)的属性进行<code>缓存</code>,性能更高。</li>
<li>两部分组成，有<code>get</code>和<code>set</code>（不能只写<code>set</code>），一般情况下，通过js赋值影响其他元素或者表单元素设置值的时候会调用<code>set</code>方法。</li>
<li>默认调用<code>get</code>方法，必须要<code>return</code>，不支持异步</li>
</ul>
<h6 id="3、watch-观察"><a href="#3、watch-观察" class="headerlink" title="3、watch 观察"></a>3、<code>watch</code> 观察</h6><ul>
<li>属性名与被观察者名称一致</li>
<li>只有在值变化的时候才会触发</li>
<li>支持异步</li>
<li>默认只监控一层数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ：class绑定的样式和class绑定的不冲突 --&gt;</span><br><span class="line">&lt;!-- 第一种是对象 :class&#x3D;&quot;&#123;className：isActive&#125;&quot; --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;x&quot; :class&#x3D;&quot;&#123;y:true&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- 第二种是数组 ：class&#x3D;”[变量名]“--&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;x&quot; :class&#x3D;&quot;[class1,class2]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- 动态绑定样式时，与js写法类似，采用驼峰命名 --&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;&#123;backgroundColor:&#39;red&#39;&#125;&quot;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h6 id="4、实现单页开发的方式"><a href="#4、实现单页开发的方式" class="headerlink" title="4、实现单页开发的方式"></a>4、实现单页开发的方式</h6><ul>
<li>通过 hash 记录跳转的路径（可以产生历史管理）</li>
<li>浏览器自带的历史管理的方法<code>history</code> （history。pushState（））可能会导致404错误<ul>
<li>开发时使用 hash 的方式，上线使用 history的方式</li>
</ul>
</li>
</ul>
<h5 id="6、vue标签"><a href="#6、vue标签" class="headerlink" title="6、vue标签"></a>6、vue标签</h5><h6 id="1、template标签"><a href="#1、template标签" class="headerlink" title="1、template标签"></a>1、<code>template</code>标签</h6><ul>
<li>vue提供的，没有任何实际意义，用于包裹<code>v-if</code>的内容，<code>v-show</code>不支持。</li>
<li>默认情况下在切换DOM时相同的结构会被复用，如果不需要复用，需要加<code>key</code>属性。</li>
</ul>
<h6 id="2、solt-标签"><a href="#2、solt-标签" class="headerlink" title="2、solt 标签"></a>2、<code>solt</code> 标签</h6><ul>
<li>插槽标签，用于模板组件中定制模板</li>
<li>可以放置一些默认值，当有内容插入时，则内容被替换</li>
<li><code>name</code> 属性用于定位默认样式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这里放的内容均属于父级模板，只有属性名是属于组件的 --&gt;</span><br><span class="line">&lt;model&gt;这是替换的内容&lt;h1 solt&#x3D;&#39;title&#39;&gt;默认标题&lt;&#x2F;h1&gt;&lt;&#x2F;model&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id&#x3D;&#39;model&#39;&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &lt;solt name&#x3D;&#39;title&#39;&gt;这是一个默认内容&lt;&#x2F;solt&gt;</span><br><span class="line">        &lt;solt&gt;&lt;&#x2F;solt&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<h6 id="3、component-标签"><a href="#3、component-标签" class="headerlink" title="3、component 标签"></a>3、<code>component</code> 标签</h6><ul>
<li>组件标签</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&#39;radio&#39; vlaue&#x3D;&#39;home&#39;&gt;home</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&#39;radio&#39; value&#x3D;&#39;list&#39;&gt;home</span><br><span class="line">    &lt;!-- keep-alive一般用作缓存 --&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">    	&lt;component :is&#x3D;&quot;radio&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">    &lt;&#x2F;keep-alive&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let home &#x3D; &#123;template:&#96;&lt;div&gt;home&lt;&#x2F;div&gt;&#96;&#125;;</span><br><span class="line">    let list &#x3D; &#123;template:&#96;&lt;div&gt;list&lt;&#x2F;div&gt;&#96;&#125;;</span><br><span class="line">	let vm &#x3D; new Vue(&#123;</span><br><span class="line">       	el :&quot;#app&quot;,</span><br><span class="line">        data:&#123;radio:true&#125;</span><br><span class="line">        components:&#123;</span><br><span class="line">        home,</span><br><span class="line">        list,</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h6 id="4、keep-alive-标签"><a href="#4、keep-alive-标签" class="headerlink" title="4、keep-alive 标签"></a>4、<code>keep-alive</code> 标签</h6><ul>
<li>一般用作缓存</li>
</ul>
<h5 id="7、生命周期"><a href="#7、生命周期" class="headerlink" title="7、生命周期"></a>7、生命周期</h5><p><img src="/2019/12/02/vue%E7%AC%94%E8%AE%B0-%E4%B8%80/1571227552316-1575285879472.png" alt></p>
<ul>
<li><p><code>beforeCreate</code> <code>created</code> 创建</p>
</li>
<li><p><code>beforeMount</code> <code>mounted</code> 挂载</p>
<ul>
<li><pre><code class="html"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">"myp"</span>&gt;</span><span class="comment">{{msg}}</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>
<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"a in arr"</span> <span class="attr">ref</span>=<span class="string">"mydiv"</span>&gt;</span><span class="comment">{{a}}</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>
mounted(){
<span class="comment">&lt;!--如果DOM元素不是v-for循环出来的,$refs只能获取一个，通过v-for循环出来的可以获取多个，返回结果为数组 --&gt;</span>
    <span class="comment">&lt;!-- 获取一个 --&gt;</span>
    this.$refs.myp 
    <span class="comment">&lt;!-- 获取多个 --&gt;</span>
    this.$refs.mydiv 
}
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - &#96;ref&#96;：为组件命名，可以通过&#96;this.$refs&#96;来获取对应的组件</span><br><span class="line"></span><br><span class="line">  - 在子模板中设置 &#96;ref&#96; 属性，然后在父实例中使用&#96;$refs&#96; 调用子方法</span><br><span class="line"></span><br><span class="line">  - 如果&#96;ref&#96; 放在组件中，获取的是组建的实例，而不是DOM元素</span><br><span class="line"></span><br><span class="line">- &#96;beforeUpdate&#96; &#96;updated&#96; 更新</span><br><span class="line"></span><br><span class="line">- &#96;beforeDestroy&#96; &#96;destroyed&#96; 死亡</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;javascript</span><br><span class="line">  let vm &#x3D; new Vue(&#123; &#x2F;&#x2F;根实例， 初始化时会调用很多方法（钩子函数）</span><br><span class="line">      beforeCreate()&#123;&#125;, &#x2F;&#x2F;1、此方法用不到</span><br><span class="line">      data: &#123;a:1&#125;,</span><br><span class="line">      created()&#123;&#125;,&#x2F;&#x2F;2、获取ajax，初始化操作</span><br><span class="line">      beforeMount()&#123;&#125;,&#x2F;&#x2F;没有实际意义</span><br><span class="line">      template：&#39;&lt;div&gt;&#123;&#123;a&#125;&#125;&lt;&#x2F;div&gt;&#39;  &#x2F;&#x2F;4、如果有template属性，会用模板代替外部html，只要有此属性app中的内容就没有任何意义（会被替换），只能有一个根元素，不能使文本节点</span><br><span class="line">      mounted()&#123;&#125;， &#x2F;&#x2F;5、真实DOM渲染完成，可以操作DOM</span><br><span class="line">  	</span><br><span class="line">  	beforeUpdate()&#123;&#125;, &#x2F;&#x2F;6、更新前</span><br><span class="line">      Update()&#123;&#125; &#x2F;&#x2F;7、更新后</span><br><span class="line">  	&#x2F;&#x2F;一般使用 watch 替换</span><br><span class="line">  	beforeDestroy()&#123;&#125;, &#x2F;&#x2F;8、销毁前  可以清除定时器或者清除事件绑定</span><br><span class="line">      Destroyed()&#123;&#125;, &#x2F;&#x2F;9、销毁后</span><br><span class="line">  &#125;);</span><br><span class="line">  vm.$mount(&#39;#app&#39;); &#x2F;&#x2F;3、要保证有编译的元素，beforeMount才会执行</span><br><span class="line">  vm.$destroy(); &#x2F;&#x2F;10、销毁</span><br></pre></td></tr></table></figure></span>
</code></pre>
</li>
</ul>
</li>
</ul>
<h5 id="8、组件化开发"><a href="#8、组件化开发" class="headerlink" title="8、组件化开发"></a>8、组件化开发</h5><h6 id="1、全局组件"><a href="#1、全局组件" class="headerlink" title="1、全局组件"></a>1、全局组件</h6><ul>
<li>命名<ul>
<li>组件名不要带有大写，多个单词用 <code>-</code> 隔开</li>
<li>只要组件名和定义名字相同就可以（首字母可以大写）</li>
<li>html采用 <code>-</code> 命名法隔开，js中转驼峰也是可以的</li>
</ul>
</li>
<li>组件是相互独立的，不能直接跨作用域，组件中也有生命周期函数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-handsome</span>&gt;</span><span class="tag">&lt;/<span class="name">my-handsome</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">'my-handsome'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">       	template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line"><span class="actionscript">        data()&#123; <span class="comment">//组件中的数据必须是函数类型，返回一个实例作为组件的数据</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">return</span> &#123;msg:<span class="string">'hello world'</span>&#125;	</span></span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2、局部组件-创建，注册，使用"><a href="#2、局部组件-创建，注册，使用" class="headerlink" title="2、局部组件(创建，注册，使用)"></a>2、局部组件(创建，注册，使用)</h6><ul>
<li>子组件不能直接使用父组件的数据</li>
<li>组件理论上可以无限嵌套</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">handsome</span> <span class="attr">name</span>=<span class="string">'bule'</span> <span class="attr">:list</span>=<span class="string">"[12,1,1,2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">handsome</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">let</span> handsome = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'，</span></span></span><br><span class="line"><span class="actionscript">    	data()&#123; <span class="comment">//必须是函数</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="number">0</span></span></span><br><span class="line">        &#125;		</span><br><span class="line"><span class="actionscript">    &#125;<span class="comment">//1、创建</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>，</span></span><br><span class="line"><span class="actionscript">        components:&#123; <span class="comment">//2、注册</span></span></span><br><span class="line">            handsome</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        props:[<span class="string">'name'</span>, <span class="string">'list'</span>] <span class="comment">// 接收属性参数</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="3、属性传递"><a href="#3、属性传递" class="headerlink" title="3、属性传递"></a>3、属性传递</h6><ol>
<li>字符串形式的直接传递，数组使用<code>:属性名</code>的形式</li>
<li>使用<code>props</code>接收属性参数</li>
</ol>
<h5 id="9、组件间通信"><a href="#9、组件间通信" class="headerlink" title="9、组件间通信"></a>9、组件间通信</h5><h6 id="1、实例方法-事件（发布-emit、订阅-on）——一对多的关系"><a href="#1、实例方法-事件（发布-emit、订阅-on）——一对多的关系" class="headerlink" title="1、实例方法/事件（发布 emit、订阅 on）——一对多的关系"></a>1、实例方法/事件（发布 emit、订阅 on）——一对多的关系</h6><ul>
<li><code>vm.$on</code> 绑定事件</li>
<li><code>vm.$once</code> 只绑定一次</li>
<li><code>vm.$off</code> 解绑</li>
<li><code>vm.$emit</code>  发布事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	父亲：&#123;&#123;money&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:m</span>=<span class="string">'money'</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'m'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>child:</span><span class="template-variable">&#123;&#123;m&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">	<span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;money:400&#125;,</span><br><span class="line">        component:&#123;</span><br><span class="line">        	child,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2、vuex"><a href="#2、vuex" class="headerlink" title="2、vuex"></a>2、<code>vuex</code></h6><ul>
<li><p>全局，统一，单一状态管理，所有组件共享同一套状态。</p>
</li>
<li><p>可以解决数据跨组件共享，防止数据被意外修改的问题。</p>
</li>
<li><p>关系图</p>
<ul>
<li>Actions：用于触发mutations的方法，所有组件的动作都由其处理。，所有异步操作必须在Actions中文昌之后再传给Mutations。</li>
<li>Mutations：存放所有需要处理的东西，只能是同步的。</li>
<li>State：存放所有数据，与组件的数据是同步变化的。</li>
</ul>
</li>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vuex -S</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、创建容器 2、注册　3、使用</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span>; <span class="comment">//日志插件，可以在console中查看mutation触发的事件</span></span><br><span class="line"></span><br><span class="line">vue.use(vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;;    <span class="comment">// 容器唯一</span></span><br><span class="line">    </span><br><span class="line">    strict: <span class="literal">true</span>,   <span class="comment">// process.env.NODE_ENV != 'production' </span></span><br><span class="line">    				<span class="comment">// 开启严格模式，只能通过mutation更改state,防止直接修改state.</span></span><br><span class="line">    </span><br><span class="line">    mutations: &#123;  <span class="comment">// 只能通过mutation来更改状态，不支持异步</span></span><br><span class="line">        add(state,parmas)&#123;</span><br><span class="line">            state.count += parmas;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    actions:&#123;   <span class="comment">// 集中处理Mutations的方法，支持异步操作</span></span><br><span class="line">        add(context, n)&#123;</span><br><span class="line">            context.commit(<span class="string">'add'</span>, n);</span><br><span class="line">        	&#125;</span><br><span class="line">		&#125;,  </span><br><span class="line">    getters:&#123;&#125;,   <span class="comment">// 获取state中的数据，对数据进行操作。</span></span><br><span class="line">    modeuls:&#123;&#125;,  <span class="comment">// 分模块，将数据单独分开</span></span><br><span class="line">    plugins:[logger()], <span class="comment">// 日志</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    render:<span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">    </span><br><span class="line">    store,　<span class="comment">//store被注册到实例上，拥有一个属性 this.$store</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//count.vue</span></span><br><span class="line">methods:&#123;</span><br><span class="line">    add()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">'add'</span>,<span class="number">2</span>)  <span class="comment">// .commit()对应的是Mutations的方法</span></span><br><span class="line">        <span class="keyword">this</span>,$store.dispatch(<span class="string">'add'</span>,<span class="number">3</span>)  <span class="comment">// .dispatch()对应的是Actions的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;$store.state&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>辅助方法<ul>
<li>mapState： 将state映射为computed</li>
<li>mapActions：将Actions映射为methods</li>
<li>mapGetters：将getters映射为computed</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>用云服务器搭建jupyter notebook</title>
    <url>/2019/11/27/%E7%94%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAjupyter-notebook/</url>
    <content><![CDATA[<p>最近心血来潮，用闲置的云服务器搭了一个<code>jupyter notebook</code>，其实蛮简单的，这里记录一下，废话不多说，直接开始。</p>
<a id="more"></a>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol>
<li><p>登录服务器</p>
</li>
<li><p>检查是否安装python</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -V <span class="comment"># 查看python版本，显示则证明安装了</span></span><br><span class="line">Python 3.7.4</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装jupyter notebook需要的库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pip install pyzmq tornado jinja2 jsonschema jupyter</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jupyter nodebook --generate-conifg</span><br></pre></td></tr></table></figure>

<p>会在当前文件夹生成一个<code>.jupyter</code>的文件夹，里面会有一个<code>jupyter_notebook_config.py</code>的配置文件</p>
</li>
<li><p>生成秘钥(写配置文件以及登录时使用)</p>
<p>打开ipython</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> IPython.lib <span class="keyword">import</span> passwd</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: passwd()</span><br><span class="line">Enter password:   <span class="comment"># 输入你的密码</span></span><br><span class="line">Verify password:  <span class="comment"># 再次输入</span></span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'sha1:0e422dfccef2:84cfbcbb3ef95872fb8e23be3999c123f862d856'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改刚才生成的默认配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>

<p>主要修改这几项（注意将前面的#号删除）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip=<span class="string">'*'</span></span><br><span class="line">c.NotebookApp.password = <span class="string">u'sha:ce...刚才复制的那个密文'</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="literal">False</span></span><br><span class="line">c.NotebookApp.port =<span class="number">8888</span> <span class="comment">#随便指定一个端口</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure>
</li>
<li><p>在云服务器的安全策略组中放行<code>8888</code>端口。</p>
</li>
<li><p>在浏览器中输入服务器的ip:端口就可以进入jupyter了，密码就是刚才输入的密码。</p>
</li>
</ol>
<h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><p>直接使用<code>jupyter notebook</code>命令运行时，只能让窗口一直开着，这样啥也干不了了，更别提退出ssh连接了，所以可以使用如下命令使其在后台运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure>

<p>想要关闭也很简单，首先找到jupyter的pid，然后杀死进程即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -aux | grep jupyter</span><br><span class="line">$ <span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure>

<p>或者可以使用<code>htop</code>进程管理工具，找到jupyter notebook对应的进行，按F9,然后回车即可。</p>
]]></content>
      <categories>
        <category>记录</category>
        <category>服务器</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack笔记</title>
    <url>/2019/11/25/webpack%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y //初始化</span><br><span class="line">npm install webpack-cli webpack -D</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>在<code>package.json</code> 文件中配置脚本，这个脚本用的命令是 webpack 回去当前的<code>node_modules</code>下找bin对应的 webpack 名字让其执行，执行的就是<code>bin/webpack.js</code>。<code>webpack.js</code>需要当前目录下有个名字叫<code>webpack.config.js</code>的文件，我们通过<code>npm run build</code>执行的目录就是当前文件的目录。</p>
</li>
<li><p>修改<code>package.json</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'script'</span>:&#123;</span><br><span class="line">	<span class="string">'build'</span>:<span class="string">'webpack'</span>,</span><br><span class="line">	<span class="string">'dev'</span>:<span class="string">'webpack-dev-server'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>webpack.config.js</code> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack 必须采用commonjs写法</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);<span class="comment">//专门处理路径的模块，以当前路径解析出绝对路径</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,   <span class="comment">//'none'  'development'</span></span><br><span class="line">    <span class="comment">//打包的入口文件(单入口) || (多入口)</span></span><br><span class="line">    entry:<span class="string">'./src/main.js'</span> <span class="comment">//&#123;rukou1:'1.js',rukou2:'2.js'&#125;, </span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 输出文件</span></span><br><span class="line">    output:&#123;  </span><br><span class="line">        <span class="comment">//name就是上面的rukou1,rukou2</span></span><br><span class="line">        filename:<span class="string">'[name].min.js'</span>, </span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//必须使用绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="热处理-webpack-dev-server"><a href="#热处理-webpack-dev-server" class="headerlink" title="热处理(webpack-dev-server)"></a>热处理(<code>webpack-dev-server</code>)</h4><ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="string">"script"</span>:&#123;</span><br><span class="line">	<span class="string">'build'</span>:<span class="string">'webpack'</span>,</span><br><span class="line">	<span class="string">'dev'</span>:<span class="string">'webpack-dev-server'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接访问时注意路径</p>
<h3 id="babel编译-兼容性"><a href="#babel编译-兼容性" class="headerlink" title="babel编译(兼容性)"></a>babel编译(兼容性)</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接使用babel</span></span><br><span class="line">npm install @babel/core @babel/cli @babel/preset-env </span><br><span class="line">npm init </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合webpack使用</span></span><br><span class="line">npm install babel-core --save-dev</span><br><span class="line">npm install babel-loader --save-dev</span><br><span class="line">npm install babel-preset-es2015 --sava-dev <span class="comment"># 能够解析es6语法</span></span><br><span class="line">npm install babel-preset-stage-0 --save-dev <span class="comment"># 解析es7语法(-1,-2,-3,-4)</span></span><br><span class="line"></span><br><span class="line">npm install style-loader css-loader　 --save-dev <span class="comment"># 解析样式</span></span><br><span class="line">			postcss-loader 	 <span class="comment"># 自动兼容低版本浏览器</span></span><br><span class="line">			autoprefixer  --save-dev  <span class="comment"># postcss-loader使用的插件</span></span><br><span class="line"></span><br><span class="line">npm install less-loader less sass-loader sass stylus-loader stylus --save-dev <span class="comment"># 预处理　</span></span><br><span class="line"></span><br><span class="line">npm install file-loader			   <span class="comment"># 读取并输出文件 	</span></span><br><span class="line">			url-loader --save-dev  <span class="comment"># 读取并输出base64</span></span><br><span class="line"></span><br><span class="line">npm install vue-loader　vue-template-compiler --save-dev  <span class="comment"># 解析.vue文件，解析模板</span></span><br><span class="line"></span><br><span class="line">npm install html-webpack-plugin --save-dev  <span class="comment"># html插件，解析html（作用是以我们自己的html为模板，将打包后的结果在不影响原来文件结构的基础上自动引入到html中，产出到dist目录下）</span></span><br></pre></td></tr></table></figure>

<h4 id="添加脚本"><a href="#添加脚本" class="headerlink" title="添加脚本"></a>添加脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># package.json</span></span><br><span class="line"><span class="string">"script"</span>:&#123;</span><br><span class="line">	<span class="string">"build"</span>: <span class="string">"babel src -d dest"</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-webpack-config-js，-babelrc"><a href="#使用-webpack-config-js，-babelrc" class="headerlink" title="使用(webpack.config.js，.babelrc)"></a>使用(<code>webpack.config.js</code>，<code>.babelrc</code>)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">//导入插件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'projection'</span>,</span><br><span class="line">    entry:<span class="string">'./src/main.js'</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">'main.min.js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="built_in">module</span>:&#123;</span><br><span class="line">    	rules:[</span><br><span class="line">    		&#123;　<span class="attr">test</span>:<span class="regexp">/\.js$/</span>, <span class="comment">//需要转译的ｊｓ文件　</span></span><br><span class="line">             　use:<span class="string">'babel-loader'</span>,　<span class="comment">//使用的工具</span></span><br><span class="line">    		　　exclude:<span class="regexp">/node_modules/</span>,　<span class="comment">//不包括node_nodules</span></span><br><span class="line">    		&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>, <span class="string">'postcss-loader'</span>]&#125;,<span class="comment">//从右往左写, postcss-loader是给css加前缀,解决兼容性问题,需要一个postcss.config.js配置文件</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]&#125;, <span class="comment">//解析less</span></span><br><span class="line">    		&#123;<span class="attr">test</span>:<span class="regexp">/.(jpg|png|gif)$/</span>,<span class="attr">use</span>:&#123;</span><br><span class="line">             	loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    outputPath: <span class="string">'images/'</span>,</span><br><span class="line">                    limit: <span class="number">8</span>*<span class="number">1024</span>  <span class="comment">//小于8k转为base64,大于8k,输出成文件</span></span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;&#125;,<span class="comment">//解析图片,将8k以下的图片转成base64</span></span><br><span class="line">			&#123;<span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,<span class="attr">use</span>:<span class="string">'vue-loader'</span>&#125; <span class="comment">//解析.vue文件</span></span><br><span class="line">    	]，</span><br><span class="line">        plugins:[ <span class="comment">//所有插件引入</span></span><br><span class="line">      	<span class="keyword">new</span> HtmlWebpackPlugin(&#123; </span><br><span class="line">      		template:<span class="string">'./src/index.html'</span>,</span><br><span class="line">      		filename:<span class="string">'login.html'</span><span class="comment">//不写时默认为index.html</span></span><br><span class="line">      		&#125;)</span><br><span class="line">    	]，</span><br><span class="line">       &#125;,</span><br><span class="line">     devtool:<span class="string">'source-map'</span>  <span class="comment">//开启调试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">'presets'</span>:[<span class="string">'es2015'</span>,<span class="string">'stage-0'</span>] <span class="comment">//es6语法,es7语法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="jest单元测试"><a href="#jest单元测试" class="headerlink" title="jest单元测试"></a>jest单元测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install jest jest-webpack -D</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要测试的文件,3.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fab</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fab(n<span class="number">-1</span>)+fab(n<span class="number">-2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试用例,3.test.js</span></span><br><span class="line"><span class="keyword">const</span> mod = <span class="built_in">require</span>(<span class="string">'3.js'</span>)</span><br><span class="line"></span><br><span class="line">test(<span class="string">'任务名'</span>, () =&gt; &#123;</span><br><span class="line">    expect(mod.fab(<span class="number">1</span>)).toBe(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
        <category>记录</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>webpack</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp笔记</title>
    <url>/2019/11/25/gulp%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装，相当于cli</span></span><br><span class="line">npm i gulp -g </span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目使用的是这个</span></span><br><span class="line">npm i gulp -D</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先需要新建一个<code>gulpfile.js</code>的文件，相当于gulp的配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);  <span class="comment">//压缩插件</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>， () =&gt; &#123;     <span class="comment">//js表示任务名，可以随意起</span></span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">'./src/*.js'</span>)   <span class="comment">// .src表示文件入口  </span></span><br><span class="line">        .pipe(uglify())      <span class="comment">// 压缩</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./build/js'</span>)); <span class="comment">//压缩完以后输出的路径</span></span><br><span class="line">&#125;)</span><br><span class="line">gulp.watch([文件列表],[任务列表]); <span class="comment">//监听，自动打包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gulp3</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'js'</span>]);  <span class="comment">//默认执行的任务,可以在命令行下直接使用gulp,不需要再输任务名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gulp4</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.serise(gulp.pallel([<span class="string">'js'</span>])))</span><br></pre></td></tr></table></figure>

<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><code>gulp-uglify</code>：压缩js</p>
<p><code>gulp-concat</code>： 合并 （参数：文件名）</p>
<p><code>gulp-cssmin</code> ：压缩css</p>
<p><code>gulp-imagemin</code>：压缩图片</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">imagemin([</span><br><span class="line">    imagemin.gifsicle(&#123;<span class="attr">interlaced</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">    imagemin.jpegtran(&#123;<span class="attr">propressive</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">    imagemin.optipng(&#123;<span class="attr">optimizationLevel</span>: <span class="number">5</span>&#125;)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p><code>gulp-less</code>： 解析less</p>
<p><code>gulp-babel</code>：解析ES6语法  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">babel(&#123;</span><br><span class="line">	presets: [<span class="string">'@babel/env'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>gulp-rename</code>：重命名  (参数：<code>{suffix: &#39;.min&#39;}</code>添加后缀)</p>
<p><code>gulp-htmlmin</code>: html压缩</p>
<p><code>gulp-htmlclean</code>: html清除注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'html'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./src/index.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><code>gulp-sourcemaps</code>：便与调试的工具 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sourcemap.init()</span><br><span class="line">sourcemap.write()</span><br></pre></td></tr></table></figure>

<p><code>gulp-livereload</code>： 配合<code>gulp.watch</code>，<code>http-server</code>实现实时加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp=<span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> livereload=<span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>);</span><br><span class="line"><span class="keyword">const</span> babel=<span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify=<span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">const</span> concat=<span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> js_path=[<span class="string">'./src/js/**/*.js'</span>];</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(js_path)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">      presets: [<span class="string">'@babel/env'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(concat(<span class="string">'bundle.min.js'</span>))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./build/js'</span>))</span><br><span class="line">    .pipe(livereload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="comment">//开启livereload的服务</span></span><br><span class="line">  livereload.listen();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//重新编译JS</span></span><br><span class="line">  gulp.watch(js_path, [<span class="string">'js'</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//监听html；标记文件修改</span></span><br><span class="line">  gulp.watch([</span><br><span class="line">    <span class="string">'./1.html'</span>,</span><br><span class="line">    ...js_path</span><br><span class="line">  ], file=&gt;&#123;</span><br><span class="line">    livereload.changed(file.path);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'js'</span>, <span class="string">'watch'</span>]);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>gulp</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>版本控制笔记</title>
    <url>/2019/11/22/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>目前常用的版本控制工具git和svn，各有各的优缺点，该如何选择呢？</p><h4 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a><code>SVN</code></h4><p>SVN是Subversion的简称，目前是Apache项目底下的一个开放源代码的版本控制系统，它的设计目标就是取代CVS。</p><p>SVN是集中式管理。</p><p>优点</p><p>1、集中式管理，管理方式在服务端配置好，客户端只需要同步提交即可，使用方便，操作简单，很容易就可以上手。</p><a id="more"></a>




<p>2、在服务端统一控制好访问权限，利用代码的安全管理。</p>
<p>3、所有的代码已服务端为准，代码一致性高。</p>
<p><strong>缺点</strong></p>
<p>1、所有操作都需要通过服务端进行同步，这会导致服务器性能要求比较高。如果服务器宕机了就无法提交代码了。</p>
<p>2、分支管理不灵活，svn分支是一个完整的目录，且这个目录拥有完整的实际文件，这些操作都是在服务端进行同步的，不是本地化操作，如果要删除分之，也是需要将远程的分支进行删除，这会导致大家都得同步。</p>
<p>3、需要联网。如果无法连接到SVN服务器，就无法提交自己的代码，更别说还原、对比等操作了。如果在内网还好，网速比较稳定，同步相对比较快，如果是通过外网同步，有可能就需要同步很久。</p>
<h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a><code>GIT</code></h4><p><img src="/2019/11/22/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%AC%94%E8%AE%B0/u=3178233162,2979413071&fm=173&app=49&f=JPEG.jpeg" alt="img"></p>
<p>git是Linus Trovalds大神的作品，是一个开放源码的版本控制软件。与SVN最大的区别，就是分布式的管理。</p>
<p><strong>优点</strong></p>
<p>1、分布式开发时，可以git clone克隆一个本地版本，然后在本地进行操作提交，本地可以完成一个完整的版本控制。在发布的时候，使用git push来推送到远程即可。</p>
<p>2、git分支的本质是一个指向提交快照的指针，速度快、灵活，分支之间可以任意切换。都可以在本地进行操作可以不同步到远程。</p>
<p>3、冲突解决，多人开发很容易就会出现冲突，可以先pull远程到本地，然后在本地合并一下分支，解决好冲突，在push到远程即可。</p>
<p>4、离线工作，如果git服务器出现问题，也可以在本地进行切换分支的操作，等联网后再提交、合并等操作。</p>
<p><strong>缺点</strong></p>
<p>1、git没有严格的权限控制，一般是通过系统设置文件的读写权限来做权限控制。</p>
<p>2、工作目录只能是整个目录，而svn可以单独checkout某个有权限的目录。</p>
<p>3、git上手可能没有svn那边顺手，需要经过学习一下。</p>
<h4 id="如何选择总结"><a href="#如何选择总结" class="headerlink" title="如何选择总结"></a>如何选择总结</h4><p>如果对访问控制、权限分配和代码安全性等要求比较高的，建议使用svn。</p>
<p>如果是分布式，多人开发，版本迭代比较快的项目，建议使用git。</p>
<h3 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h3><h4 id="基础配置-git仓库"><a href="#基础配置-git仓库" class="headerlink" title="基础配置(git仓库)"></a>基础配置(git仓库)</h4><p>比如<code>github</code>、码云等一些代码管理网站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"邮箱"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看git配置</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h4 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h4><ol>
<li>git是将每个版本独立保存的</li>
<li>三个树<ol>
<li>工作区</li>
<li>缓存区</li>
<li>git仓库</li>
</ol>
</li>
<li>文件的三种状态<ol>
<li>已修改（modified）</li>
<li>已缓存（staged）</li>
<li>已提交（commited）</li>
</ol>
</li>
</ol>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><ol>
<li>基本命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库</span></span><br><span class="line">git init  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到暂存区</span></span><br><span class="line">git add 文件名 或者 . <span class="comment">#点表示将文件夹下所有文件一起添加到暂存区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到仓库</span></span><br><span class="line">git commit -m <span class="string">'备注'</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到远程仓库</span></span><br><span class="line">git push </span><br><span class="line"><span class="comment"># 拉取远程文件</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程仓库克隆</span></span><br><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复最近一次的提交</span></span><br><span class="line">git reset HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 查看历史提交记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>2.工作流程</p>
<p><img src="/2019/11/22/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%AC%94%E8%AE%B0/liucheng.png" alt></p>
<p>3.对各命令及参数的详细介绍</p>
<ul>
<li><p><code>reset</code>回滚</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD~  <span class="comment"># 返回上一版本</span></span><br></pre></td></tr></table></figure>

<p><code>HEAD</code>表示版本指针</p>
<p><code>~</code>可以接多个,也可以接数字,表示回退几个版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD~~ <span class="comment"># 回退到上两个版本</span></span><br><span class="line">git reset HEAD~10 <span class="comment"># 表示回退上是个版本</span></span><br></pre></td></tr></table></figure>

<ul>
<li>回滚到指定版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>diff</code>对比</p>
<ul>
<li><p>对比暂存区与工作目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
</li>
<li><p>比较两个历史快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff 快照ID1 快照ID2</span><br></pre></td></tr></table></figure>
</li>
<li><p>比较暂存区与git仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --cached 快照ID</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>修改最后一次提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend <span class="comment"># 之后会进入编辑页面</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -f 文件名  <span class="comment"># -f 表示强制删除本地文件</span></span><br><span class="line"></span><br><span class="line">git reset --soft HEAD <span class="comment"># 删除仓库文件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重命名文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mv 旧文件名 新文件名</span><br></pre></td></tr></table></figure>
</li>
<li><p>分支管理</p>
<ul>
<li><p>创建和切换分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果分支存在,则自动切换,如果不存在,则自动创建新分支并切换到新分支</span></span><br><span class="line">git checkout -b 分支名  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git breach 分支名</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"><span class="comment"># 查看详细分支</span></span><br><span class="line">git <span class="built_in">log</span> --decorate </span><br><span class="line">git <span class="built_in">log</span> --graph     <span class="comment"># 图形化的方式呈现</span></span><br><span class="line">		--oneline   <span class="comment"># 单行显示</span></span><br><span class="line">		--all       <span class="comment"># 所有分支</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>合并分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge 分支名 --origin</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git breach -d 分支名</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="reset和checkout的区别"><a href="#reset和checkout的区别" class="headerlink" title="reset和checkout的区别"></a><code>reset</code>和<code>checkout</code>的区别</h4><ul>
<li>恢复文件<ul>
<li><code>reset</code>只将指定文件恢复到暂存区</li>
<li><code>checkout</code>是同时覆盖暂存区和工作区</li>
</ul>
</li>
<li>恢复快照<ul>
<li><code>checkout</code>更安全,会在合并前进行检查</li>
<li>本质区别<ul>
<li><code>reset</code>会将HEAD与分支一半切换,造成快照丢失</li>
<li><code>checkout</code>智慧改变HEAD的指针指向</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>git</category>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs笔记</title>
    <url>/2019/11/21/nodejs/</url>
    <content><![CDATA[<p><img src="/2019/11/21/nodejs/17s.jpg" alt></p>
<a id="more"></a>

<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul>
<li>中间层<ul>
<li>安全性</li>
<li>性能优势</li>
<li>降低主服务器的复杂度</li>
</ul>
</li>
<li>工具</li>
<li>一些小型服务</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>便于前端入手</li>
<li>性能高</li>
<li>利于和前端代码整合</li>
</ul>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><ul>
<li>应用程序中卸载，删除nodejs目录</li>
<li>手动删除安装目录的node_modules</li>
<li>手动删除用户目录下的node_modules</li>
</ul>
<h3 id="系统自带模块"><a href="#系统自带模块" class="headerlink" title="系统自带模块"></a>系统自带模块</h3><h4 id="http"><a href="#http" class="headerlink" title="http"></a><code>http</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">let</span> server = http.createServer( <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(request, response);</span><br><span class="line">    <span class="comment">//require.url :客户端请求地址</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	response.writeHead(404);  响应头</span></span><br><span class="line"><span class="comment">		response.write('Not Found'); 返回的响应体</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>

<h4 id="fs"><a href="#fs" class="headerlink" title="fs"></a><code>fs</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">// 写文件</span></span><br><span class="line"><span class="comment">// fs.writeFile(path, date, callback);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件</span></span><br><span class="line"><span class="comment">// fs.readFile(path, buffer);</span></span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">"./www/a.txt"</span>, <span class="string">"dadawadawda"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(err);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"成功"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;) ;</span><br><span class="line">fs.readFile(<span class="string">"./www/a.txt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(err);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a><code>querystring</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理请求“xxx=xx&amp;xxx=xx”</span></span><br><span class="line"><span class="keyword">let</span> querystring = requir(<span class="string">"querystring"</span>);</span><br><span class="line"><span class="keyword">let</span> result = querystring.parse(req.url); </span><br><span class="line"><span class="keyword">let</span> result = querystring.stringify(&#123;<span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="string">"dss"</span>&#125;) <span class="comment">//a=12&amp;b=2&amp;c=dss</span></span><br></pre></td></tr></table></figure>

<h4 id="url"><a href="#url" class="headerlink" title="url"></a><code>url</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理GET请求"a.html?xxx=xx&amp;xxx=xx"</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="keyword">let</span> result = url.prase(req.url, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h4 id="assert-断言"><a href="#assert-断言" class="headerlink" title="assert 断言"></a><code>assert</code> 断言</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">"assert"</span>);</span><br><span class="line"></span><br><span class="line">assert( <span class="number">5</span>&gt;<span class="number">3</span>, <span class="string">"aaa"</span> );</span><br><span class="line"></span><br><span class="line">assert.deepEqual(变量, 预期值, msg)</span><br><span class="line">assert.deepStrictEqual(变量, 预期值, msg)</span><br></pre></td></tr></table></figure>

<h4 id="path"><a href="#path" class="headerlink" title="path"></a><code>path</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.dirname(str)  <span class="comment">//获取文件夹路径</span></span><br><span class="line">path.extname(str)  <span class="comment">//获取文件后缀名</span></span><br><span class="line">path.basename(str) <span class="comment">//获取文件名</span></span><br><span class="line">path.resolve(__dirname, str)  <span class="comment">//解析绝对路径</span></span><br></pre></td></tr></table></figure>

<h3 id="服务器相关内容"><a href="#服务器相关内容" class="headerlink" title="服务器相关内容"></a>服务器相关内容</h3><h4 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http 1.0:</span><br><span class="line">http 1.1: 持久链接</span><br><span class="line">https:   基于安全协议 </span><br><span class="line">http 2.0: 加密、头部压缩、服务器推送、多路复用</span><br><span class="line">http 3.0:</span><br></pre></td></tr></table></figure>

<h4 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1xx: 信息</span><br><span class="line">2xx: 成功响应 200</span><br><span class="line">3xx: 重定向 301</span><br><span class="line">4xx: 失败响应 文件不存在 404</span><br><span class="line">5xx: 服务器错误 502</span><br></pre></td></tr></table></figure>

<h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><h6 id="GET处理"><a href="#GET处理" class="headerlink" title="GET处理"></a><code>GET</code>处理</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理GET请求"/a.html?xxx=xx&amp;xxx=xx"</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="keyword">let</span> result = url.prase(req.url, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h6 id="POST处理"><a href="#POST处理" class="headerlink" title="POST处理"></a><code>POST</code>处理</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">post发送的数据是分段的</span></span><br><span class="line"><span class="comment">req.on("data"); 数据开始接受的事件</span></span><br><span class="line"><span class="comment">req.on("end")； 数据接受结束后的事件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> arr = [] <span class="comment">//接受buffer</span></span><br><span class="line">req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>)</span>&#123;</span><br><span class="line">    arr.push(buffer);</span><br><span class="line">&#125;);</span><br><span class="line">req.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> buffer = Buffer.concat(arr); <span class="comment">//合并接收到的数据</span></span><br><span class="line">	<span class="keyword">let</span> result = querystring.parse(buffer);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><h4 id="module-批量导出"><a href="#module-批量导出" class="headerlink" title="module 批量导出"></a><code>module</code> 批量导出</h4><h4 id="exports-导出"><a href="#exports-导出" class="headerlink" title="exports 导出"></a><code>exports</code> 导出</h4><h4 id="require-引入"><a href="#require-引入" class="headerlink" title="require 引入"></a><code>require</code> 引入</h4><ul>
<li>如果带有路径——去路径下面找</li>
<li>如果没有：<ul>
<li>node_modules文件夹</li>
<li>系统node_modules</li>
</ul>
</li>
</ul>
<h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><h4 id="multiparty-上传文件处理"><a href="#multiparty-上传文件处理" class="headerlink" title="multiparty 上传文件处理"></a><code>multiparty</code> 上传文件处理</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>)</span><br><span class="line"><span class="keyword">const</span> multiparty = <span class="built_in">require</span>(<span class="string">"multiparty"</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> form = <span class="keyword">new</span> multiparty.Form(&#123;</span><br><span class="line">		<span class="comment">// 上传后的目录</span></span><br><span class="line">		uploadDir: <span class="string">'./www'</span></span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解析</span></span><br><span class="line">	form.parse(req);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 处理正常信息</span></span><br><span class="line">	form.on(<span class="function">(<span class="params"><span class="string">'filed'</span>, (name, value</span>) =&gt;</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(name, value);</span><br><span class="line">	&#125;));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 处理文件信息</span></span><br><span class="line">	form.on(<span class="string">'file'</span>, (name, file) =&gt; &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(name, file);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解析结束后执行</span></span><br><span class="line">	form.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'处理完成'</span>);</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>

<h4 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a><code>socket.io</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> io=<span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.建立普通http</span></span><br><span class="line"><span class="keyword">let</span> server=http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.建立ws</span></span><br><span class="line"><span class="keyword">let</span> wsServer=io.listen(server);</span><br><span class="line">wsServer.on(<span class="string">'connection'</span>, sock=&gt;&#123;</span><br><span class="line">  sock.emit(<span class="string">'name'</span>, 数据)  <span class="comment">//发布</span></span><br><span class="line">  sock.on(<span class="string">'name'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">数据</span>)</span>&#123;&#125;);  <span class="comment">//接收</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h3><h4 id="ajax-原生"><a href="#ajax-原生" class="headerlink" title="ajax  原生"></a><code>ajax</code>  原生</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost/a'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechenge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status == <span class="number">200</span> &amp;&amp; xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'失败'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>同源策略</li>
<li>跨域处理<ul>
<li>主要由后台处理</li>
<li><code>origin</code>和<code>access-control-allow-origin</code>决定</li>
</ul>
</li>
</ul>
<h4 id="fetch-另一种ajax的封装"><a href="#fetch-另一种ajax的封装" class="headerlink" title="fetch 另一种ajax的封装"></a><code>fetch</code> 另一种ajax的封装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oBtn=<span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</span><br><span class="line">oBtn.onclick=<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//1.请求</span></span><br><span class="line">    <span class="keyword">let</span> res=<span class="keyword">await</span> fetch(<span class="string">'data/1.txt'</span>);</span><br><span class="line">    <span class="comment">//2.解析</span></span><br><span class="line">    <span class="keyword">let</span> str=<span class="keyword">await</span> res.text(); <span class="comment">//解析文本</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="keyword">await</span> res.json(); <span class="comment">//解析json对象</span></span><br><span class="line">    alert(str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> str = <span class="keyword">await</span> res.blob(); <span class="comment">//解析二进制文件</span></span><br><span class="line">	<span class="keyword">let</span> url = URL.createObjectURL(str); </span><br><span class="line">	oImg.src = url;   </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a><code>jsonp</code></h4><ul>
<li>直接使用<code>script</code>标签</li>
<li>使用jQuery</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#txt1'</span>).on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su'</span>,</span><br><span class="line">            <span class="comment">// https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=xx&amp;cb=xxx</span></span><br><span class="line">            data: &#123;<span class="attr">wd</span>: $(<span class="keyword">this</span>).val()&#125;,</span><br><span class="line">            dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">            jsonp: <span class="string">'cb'</span></span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">&#123;s&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">        &#125;, res=&gt;&#123;</span><br><span class="line">            alert(<span class="string">'失败'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Ajax2-0-formdata"><a href="#Ajax2-0-formdata" class="headerlink" title="Ajax2.0(formdata)"></a>Ajax2.0(<code>formdata</code>)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生</span></span><br><span class="line"><span class="keyword">let</span> oForm=<span class="built_in">document</span>.querySelector(<span class="string">'#form1'</span>);</span><br><span class="line"></span><br><span class="line">oForm.onsubmit=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> formdata=<span class="keyword">new</span> FormData(oForm);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">    xhr.open(oForm.method, oForm.action, <span class="literal">true</span>);</span><br><span class="line">    xhr.send(formdata);</span><br><span class="line"></span><br><span class="line">    xhr.onreadystatechange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">                alert(<span class="string">'成功'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                alert(<span class="string">'失败'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//jQuery</span></span><br><span class="line">    $(<span class="string">'#form1'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> formdata=<span class="keyword">new</span> FormData(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="keyword">this</span>.action,</span><br><span class="line">            type: <span class="keyword">this</span>.method,</span><br><span class="line">            data: formdata,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 阻止ajax自动处理数据</span></span><br><span class="line">            processData: <span class="literal">false</span>,</span><br><span class="line">            contentType: <span class="literal">false</span></span><br><span class="line">            </span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            alert(<span class="string">'成功'</span>);</span><br><span class="line">        &#125;, res=&gt;&#123;</span><br><span class="line">            alert(<span class="string">'失败'</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="webSocket"><a href="#webSocket" class="headerlink" title="webSocket"></a><code>webSocket</code></h4><p><code>socket.io</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器</span></span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> io=<span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.建立普通http</span></span><br><span class="line"><span class="keyword">let</span> server=http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.建立ws</span></span><br><span class="line"><span class="keyword">let</span> wsServer=io.listen(server);</span><br><span class="line">wsServer.on(<span class="string">'connection'</span>, sock=&gt;&#123;</span><br><span class="line">  <span class="comment">//sock.emit('name', 数据)</span></span><br><span class="line">  <span class="comment">//sock.on('name', function (数据)&#123;&#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*sock.on('aaa', function (a, b)&#123;</span></span><br><span class="line"><span class="comment">    console.log(a, b, a+b);</span></span><br><span class="line"><span class="comment">  &#125;);*/</span></span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    sock.emit(<span class="string">'timer'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">let</span> sock=io.connect(<span class="string">'ws://localhost:8080/'</span>); <span class="comment">//建立连接</span></span><br><span class="line">sock.emit()  <span class="comment">//发布</span></span><br><span class="line">sock.on(名称, ()=&gt;&#123;&#125;)  <span class="comment">//接收</span></span><br></pre></td></tr></table></figure>

<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="mysql包和co-mysql包"><a href="#mysql包和co-mysql包" class="headerlink" title="mysql包和co-mysql包"></a><code>mysql</code>包和<code>co-mysql</code>包</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始链接</span></span><br><span class="line"><span class="keyword">let</span> conn = mysql.createConnection(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">''</span>,</span><br><span class="line">    database: <span class="string">'20192'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接池</span></span><br><span class="line"><span class="keyword">let</span> conn = mysql.createPool(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">''</span>,</span><br><span class="line">    database: <span class="string">'20192'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用co-mysql (可以使用async/await)</span></span><br><span class="line"><span class="keyword">let</span> db = co(conn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行SQL语句</span></span><br><span class="line">db.query(<span class="string">`SQL语句`</span>,(err, data)=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 压缩包</span></span><br><span class="line"><span class="keyword">let</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建流</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.createReadStream(<span class="string">'1.txt'</span>);</span><br><span class="line"><span class="keyword">let</span> gz = zlib.createGzip(); <span class="comment">//创建压缩流</span></span><br><span class="line"><span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">'2.gz'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对接</span></span><br><span class="line">rs.pipe(ws);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩以后再写入 (读写流)</span></span><br><span class="line">rs.pipe(gz).pipe(ws); </span><br><span class="line"></span><br><span class="line"><span class="comment">//错误事件</span></span><br><span class="line">rs.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 完成事件</span></span><br><span class="line">fs.on(<span class="string">'finish'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>注：http中的req, res本身就是流,所以可以直接进行流操作</p>
<h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><p><code>forever</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm i forever -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">forever start xxx.js</span><br><span class="line">forever restart xxx.js</span><br><span class="line">forever stop xxx.js</span><br><span class="line">forever stopall</span><br></pre></td></tr></table></figure>

<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><h4 id="express"><a href="#express" class="headerlink" title="express"></a><code>express</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install express --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> server = express();</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">server.get(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;&#125;);  <span class="comment">//处理get请求 </span></span><br><span class="line">server.post(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;&#125;); <span class="comment">//处理post请求</span></span><br><span class="line">server.use(中间件)   </span><br><span class="line"></span><br><span class="line"><span class="comment">//next()调用中间件</span></span><br></pre></td></tr></table></figure>

<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>express的中间建文档汇总:<a href="http://expressjs.com/en/resources/middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/resources/middleware.html</a></p>
<ul>
<li><code>body-parser</code> 在处理程序之前在中间件中解析传入的请求主体，该处理程序在<code>req.body</code>属性下可用。</li>
<li><code>multi</code> 处理文件上传。</li>
<li><code>cookie-parser</code> 解析和设置cookie</li>
<li><code>cookie-session</code> 解析和设置session</li>
</ul>
<h4 id="KOA"><a href="#KOA" class="headerlink" title="KOA"></a>KOA</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install koa -D</span><br><span class="line"><span class="comment"># 安装路由中间件</span></span><br><span class="line">npm install koa-router -D</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> Koa();</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	server.context 相当于 ctx的prototype,也就是在这里设置的属性,可以在下面调用.</span></span><br><span class="line"><span class="comment">	server.context.a = 12;</span></span><br><span class="line"><span class="comment">	直接在路由中调用:</span></span><br><span class="line"><span class="comment">	console.log(ctx.a)  //12</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//错误处理</span></span><br><span class="line">server.use(<span class="keyword">async</span> (ctx, next) =&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">       <span class="keyword">await</span> next();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置路由,ctx表示上下文, next表示路由相同时同时调用</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'aaa'</span>; </span><br><span class="line">	<span class="comment">// ctx的方法 </span></span><br><span class="line">    <span class="comment">// 信息:</span></span><br><span class="line">    ctx.method  <span class="comment">// 请求方法</span></span><br><span class="line">    ctx.url     <span class="comment">// 请求的地址</span></span><br><span class="line">    ctx.path    <span class="comment">// 请求的路径</span></span><br><span class="line">    ctx.query   <span class="comment">// get数据</span></span><br><span class="line">    ctx.params  <span class="comment">// 路径id</span></span><br><span class="line">    ctx.ip      <span class="comment">// 客户端IP</span></span><br><span class="line">    ctx.headers <span class="comment">// 请求头</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回信息</span></span><br><span class="line">    ctx.throw(状态码, msg) <span class="comment">//返回信息并退出</span></span><br><span class="line">    ctx.assert(条件, 状态码, msg)  <span class="comment">//断点调试</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数</span></span><br><span class="line">    ctx.state = <span class="number">200</span> <span class="comment">//设置状态码</span></span><br><span class="line">    ctx.redirect(路径) <span class="comment">//重定向</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// await next();</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /user/3121</span></span><br><span class="line">router.get(<span class="string">'/user:id'</span>, ctx =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;id&#125; = ctx.params;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// /user?a=1&amp;b=12</span></span><br><span class="line">router.get(<span class="string">'/user/'</span>, ctx =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;a, b&#125; = ctx.query;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 使用路由</span></span><br><span class="line">server.use(router.routes());</span><br><span class="line"></span><br><span class="line"><span class="comment">//cookie</span></span><br><span class="line">server.keys = [</span><br><span class="line">    <span class="string">'dadwadawdwad'</span>,</span><br><span class="line">    <span class="string">'dwadwadwads'</span>,</span><br><span class="line">    <span class="string">'dwadwadasasdw'</span></span><br><span class="line">]</span><br><span class="line">server.use(<span class="keyword">async</span> ctx =&gt;&#123;</span><br><span class="line">    <span class="comment">// 设置cookie</span></span><br><span class="line">    ctx.cookies.set(name, value, &#123;</span><br><span class="line">        signed: <span class="literal">true</span>, <span class="comment">//是否设置签名</span></span><br><span class="line">        maxAge: <span class="number">12</span>*<span class="number">60</span>*<span class="number">1000</span>, <span class="comment">//设置有效期</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 获取cookie</span></span><br><span class="line">    ctx.cookies.get(name, &#123;</span><br><span class="line">        signed: <span class="literal">true</span>, <span class="comment">//是否验证签名</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="中间件-1"><a href="#中间件-1" class="headerlink" title="中间件"></a>中间件</h4><h6 id="koa-router路由"><a href="#koa-router路由" class="headerlink" title="koa-router路由"></a><code>koa-router</code>路由</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(); <span class="comment">//get方式</span></span><br><span class="line">router.post(); <span class="comment">//post方式</span></span><br><span class="line">router.use();  <span class="comment">//所有请求</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">urlencoded(?a=1&amp;b=12)</th>
<th align="center">params(/:id)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">顺序灵活</td>
<td align="center">不灵活</td>
</tr>
<tr>
<td align="center">可省略</td>
<td align="center">不可省略</td>
</tr>
<tr>
<td align="center">不利于SEO</td>
<td align="center">利于SEO</td>
</tr>
</tbody></table>
<h6 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// admin.js </span></span><br><span class="line"><span class="keyword">const</span> Router=<span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router=<span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/a'</span>, <span class="keyword">async</span> ctx=&gt;&#123;</span><br><span class="line">  ctx.body=<span class="string">'管理员的a'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=router.routes();</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> Router=<span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"><span class="keyword">const</span> Admin = <span class="built_in">require</span>(<span class="string">'./admin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router=<span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> ctx=&gt;&#123;</span><br><span class="line">  ctx.body=<span class="string">'用户'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">router.use(<span class="string">'/admin'</span>, Admin);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=router.routes();</span><br></pre></td></tr></table></figure>

<h6 id="koa-static-处理所有静态文件"><a href="#koa-static-处理所有静态文件" class="headerlink" title="koa-static 处理所有静态文件"></a><code>koa-static</code> 处理所有静态文件</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>)</span><br><span class="line">server.use(<span class="keyword">static</span>(路径, &#123;</span><br><span class="line">    maxage: <span class="number">60</span>*<span class="number">86400</span>*<span class="number">1000</span>; <span class="comment">//有效期</span></span><br><span class="line">    index: <span class="string">'1.html'</span> <span class="comment">//默认页面</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h6 id="koa-better-body-数据处理"><a href="#koa-better-body-数据处理" class="headerlink" title="koa-better-body  数据处理"></a><code>koa-better-body</code>  数据处理</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> body = <span class="built_in">require</span>(<span class="string">'koa-better-body'</span>)</span><br><span class="line">server.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="comment">//对文件和post数据处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.fields);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="koa-session"><a href="#koa-session" class="headerlink" title="koa-session"></a><code>koa-session</code></h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>)</span><br><span class="line">server.keys = [</span><br><span class="line">    <span class="string">'dasdawdadswad'</span>,</span><br><span class="line">    <span class="string">'dwadsadwda'</span></span><br><span class="line">];</span><br><span class="line">server.use(session(&#123;</span><br><span class="line">    maxAge: <span class="number">12</span>*<span class="number">60</span>*<span class="number">1000</span>, <span class="comment">//有效期</span></span><br><span class="line">    renew: <span class="literal">true</span>,        <span class="comment">//自动续约</span></span><br><span class="line">&#125;, server));</span><br></pre></td></tr></table></figure>

<h6 id="koa-ejs-服务器渲染"><a href="#koa-ejs-服务器渲染" class="headerlink" title="koa-ejs 服务器渲染"></a><code>koa-ejs</code> 服务器渲染</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'koa-ejs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> Koa();</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">ejs(server, &#123;</span><br><span class="line">    layout: <span class="literal">false</span>,   </span><br><span class="line">    root: <span class="string">'template'</span>, <span class="comment">// 模板路径</span></span><br><span class="line">    viewExt: <span class="string">'ejs'</span>,   <span class="comment">// 使用模板文件的后缀名</span></span><br><span class="line">    cache: <span class="literal">false</span>,     <span class="comment">// 是否缓存</span></span><br><span class="line">    debug: <span class="literal">false</span>      <span class="comment">// 是否输出信息</span></span><br><span class="line">&#125;);</span><br><span class="line">server.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> ctx.render(模板文件名,&#123;</span><br><span class="line">        arr: [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="服务端渲染-客户端渲染"><a href="#服务端渲染-客户端渲染" class="headerlink" title="服务端渲染/客户端渲染"></a>服务端渲染/客户端渲染</h3><ul>
<li>服务端渲染：服务器将页面渲染完成以后直接发给客户端，主要的渲染引擎有pug、ejs</li>
<li>客户端渲染：服务器只是发送一些数据给客户端，页面渲染工作由客户端负责，主要框架有vue，react</li>
</ul>
<h4 id="pug"><a href="#pug" class="headerlink" title="pug"></a>pug</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pug -D</span><br></pre></td></tr></table></figure>

<ul>
<li>通过缩进来区分标签</li>
<li>在标签后直接写内容则表示这个标签的内容</li>
<li>在标签后加<code>=</code>表示接受后台传输的值</li>
<li>标签后的<code>.</code>表示下面所有内容是和这个标签一起的</li>
<li>标签的属性通过括号<code>（）</code>来添加</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    meta(charset='utf-8')</span><br><span class="line">    title test</span><br><span class="line">  body</span><br><span class="line">    script.</span><br><span class="line">      let a = 1;</span><br><span class="line">      let b= 2;</span><br></pre></td></tr></table></figure>

<h4 id="ejs"><a href="#ejs" class="headerlink" title="ejs"></a>ejs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i ejs -D</span><br></pre></td></tr></table></figure>

<ul>
<li>用<code>&lt;%  %&gt;</code>把需要插入的内容隔开就行</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;%for(let i=0;i&lt;arr.length;i++)&#123;%&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=arr[i]%</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>记录</category>
        <category>Node</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6语法笔记总结</title>
    <url>/2019/11/14/ES6%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="ES6语法总结"><a href="#ES6语法总结" class="headerlink" title="ES6语法总结"></a>ES6语法总结</h3><h4 id="一、Array"><a href="#一、Array" class="headerlink" title="一、Array"></a>一、Array</h4><h6 id="1）JS中常见的数据类型"><a href="#1）JS中常见的数据类型" class="headerlink" title="1）JS中常见的数据类型"></a>1）JS中常见的数据类型</h6><ul>
<li>原生数据类型<code>number</code> ， <code>boolean</code> ，<code>string</code>，<code>null</code>，<code>undefined</code></li>
<li>引用数据类型<code>object</code>, <code>function</code> <code>symbol</code></li>
<li><code>{}</code> 、<code>[]</code></li>
</ul><h6 id="2-数组的变异（能改变原数组）"><a href="#2-数组的变异（能改变原数组）" class="headerlink" title="2)数组的变异（能改变原数组）"></a>2)数组的变异（能改变原数组）</h6><p>操作数组的方法：<code>pop</code> <code>push</code>  <code>unshift</code> <code>shift</code> <code>splice</code> <code>reverse</code> <code>sort</code></p><a id="more"></a>

<h6 id="3-forEach-for-for-in-for-of的区别"><a href="#3-forEach-for-for-in-for-of的区别" class="headerlink" title="3)forEach, for, for in,for of的区别"></a>3)<code>forEach</code>, <code>for</code>, <code>for in</code>,<code>for of</code>的区别</h6><p><code>forEach</code> 不支持<code>return</code></p>
<p><code>for  key in arr</code>：key会变成字符串，但是包含私有变量</p>
<p><code>for of</code>：支持<code>return</code> （值of数组），不能遍历对象</p>
<h6 id="4）filter（过滤）"><a href="#4）filter（过滤）" class="headerlink" title="4）filter（过滤）"></a>4）<code>filter</code>（过滤）</h6><p>不操作原数组，返回过滤后的新数组，返回结果为true，则表示这一项被放进新数组中【删除】</p>
<h6 id="5）map（映射）"><a href="#5）map（映射）" class="headerlink" title="5）map（映射）"></a>5）<code>map</code>（映射）</h6><p>不操作原数组，将原来的数组映射成新数组，回调函数中返回什么这一项就是什么【更新】</p>
<h6 id="6）（includes，-find【es6】），some，-every（查找）"><a href="#6）（includes，-find【es6】），some，-every（查找）" class="headerlink" title="6）（includes， find【es6】），some， every（查找）"></a>6）<code>（includes， find【es6】）</code>，<code>some</code>， <code>every</code>（查找）</h6><p><code>includes</code> 返回true/false</p>
<p><code>find</code> 找到返回true，找到就停止，找不到返回undefined</p>
<p><code>some</code> 找true，找到true就停止，返回true，找不到返回false</p>
<p><code>every</code> 找false，找到false就停止，返回false</p>
<h6 id="7）reduce（收敛）【函数有4个参数】"><a href="#7）reduce（收敛）【函数有4个参数】" class="headerlink" title="7）reduce（收敛）【函数有4个参数】"></a>7）<code>reduce</code>（收敛）【函数有4个参数】</h6><p>返回叠加后的结果，也就是只返回一个结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">tmp, item, index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tmp + item; <span class="comment">//tmp作为一个中间量，第一次取的第一个数，之后就是前两个数的和；</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next, index, item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev+next; <span class="comment">//回调函数的返回值就是下一次的prev</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json = [&#123;<span class="string">'price'</span>:<span class="number">10</span>,<span class="string">'content'</span>:<span class="number">2</span>&#125;,&#123;<span class="string">'price'</span>:<span class="number">210</span>,<span class="string">'content'</span>:<span class="number">23</span>&#125;,&#123;<span class="string">'price'</span>:<span class="number">20</span>,<span class="string">'content'</span>:<span class="number">6</span>&#125;,&#123;<span class="string">'price'</span>:<span class="number">50</span>,<span class="string">'content'</span>:<span class="number">4</span>&#125;]</span><br><span class="line"><span class="keyword">let</span> sum = json.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev + next.price*next.content;</span><br><span class="line">&#125;,<span class="number">0</span>) <span class="comment">//0表示指定第一次的默认值</span></span><br></pre></td></tr></table></figure>

<h6 id="8）箭头函数"><a href="#8）箭头函数" class="headerlink" title="8）箭头函数"></a>8）箭头函数</h6><p>1、去掉<code>function</code>关键字</p>
<p>2、只有一个参数的，小括号可以省略</p>
<p>3、小括号与大括号之间用 =&gt; 代替</p>
<p>4、如果没有大括号，则直接是返回值，如果有大括号，必须写 <code>return</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b+c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = <span class="function"><span class="params">b</span> =&gt;</span> <span class="function"><span class="params">c</span> =&gt;</span> b+c;</span><br></pre></td></tr></table></figure>

<ul>
<li>vue中很多时候都不能使用箭头函数</li>
</ul>
<h6 id="9）参数展开（解构赋值）"><a href="#9）参数展开（解构赋值）" class="headerlink" title="9）参数展开（解构赋值）"></a>9）参数展开（解构赋值）</h6><ul>
<li>剩余参数：必须是最后一个；</li>
<li>数组展开：将数组中的元素展开</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,...arr</span>)</span>&#123;</span><br><span class="line">   	<span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"><span class="comment">//数组展开</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">67</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...arr1,...arr2);</span><br></pre></td></tr></table></figure>

<h4 id="二、String"><a href="#二、String" class="headerlink" title="二、String"></a>二、String</h4><h6 id="1）模板字符串"><a href="#1）模板字符串" class="headerlink" title="1）模板字符串``"></a>1）模板字符串``</h6><h6 id="2）startsWith：以…开头"><a href="#2）startsWith：以…开头" class="headerlink" title="2）startsWith：以…开头"></a>2）<code>startsWith</code>：以…开头</h6><h6 id="3）endsWith：以…结尾"><a href="#3）endsWith：以…结尾" class="headerlink" title="3）endsWith：以…结尾"></a>3）<code>endsWith</code>：以…结尾</h6><h4 id="三、JSON"><a href="#三、JSON" class="headerlink" title="三、JSON"></a>三、JSON</h4><h6 id="1）标准写法"><a href="#1）标准写法" class="headerlink" title="1）标准写法"></a>1）标准写法</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"key"</span>: val, <span class="attr">"key2"</span>: <span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2）JSON对象"><a href="#2）JSON对象" class="headerlink" title="2）JSON对象"></a>2）JSON对象</h6><ul>
<li><code>JSON.stringify()</code>将json对象转化为字符串</li>
<li><code>JOSN.parse()</code>将字符串解析为json对象</li>
</ul>
<h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><h4 id="promise对象"><a href="#promise对象" class="headerlink" title="promise对象"></a><code>promise</code>对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.all([</span><br><span class="line">    <span class="comment">//异步操作</span></span><br><span class="line">]).then(resolve，reject); <span class="comment">//等到所有异步操作完成后才会执行then,成功执行resolve【函数】，失败执行reject【函数】。</span></span><br><span class="line"><span class="comment">//没有顺序</span></span><br></pre></td></tr></table></figure>

<h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a><code>async/await</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">xxx</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">await</span> promise对象</span><br><span class="line">    <span class="comment">//代码按照同步正常写，如果需要执行异步,加await关键字，后面跟一个promise对象。</span></span><br><span class="line">&#125;；</span><br><span class="line">xxx();<span class="comment">//按照正常的函数调用即可</span></span><br></pre></td></tr></table></figure>

<p>注：</p>
<ul>
<li><code>ajax</code> 本身就是一个promise对象，可以在<code>async/await</code>中正常执行。</li>
<li>可以在<code>async/await</code>中按照逻辑进行执行，虽然是同步写法，但背后依然是按照异步实现。</li>
</ul>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="一、特性"><a href="#一、特性" class="headerlink" title="一、特性"></a>一、特性</h4><ul>
<li>封装性</li>
<li>继承性</li>
<li>多态性</li>
</ul>
<h4 id="二、形式"><a href="#二、形式" class="headerlink" title="二、形式"></a>二、形式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*关键字</span></span><br><span class="line"><span class="comment">class: 声明类</span></span><br><span class="line"><span class="comment">constructor: 声明类的属性</span></span><br><span class="line"><span class="comment">extends: 继承</span></span><br><span class="line"><span class="comment">super: 继承父类的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    show()&#123;</span><br><span class="line">        alert(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">extends</span> 父类名</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age, job)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age); <span class="comment">//传入父类需要的参数</span></span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父类的show方法已经在extends的时候继承了，所以只需要写自己的方法即可</span></span><br><span class="line">    showJob()&#123;</span><br><span class="line">        alert(job)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> 类名(<span class="string">"tom"</span>, <span class="number">18</span>, <span class="string">"打杂的"</span>);</span><br><span class="line">w.show(); <span class="comment">//调用方法</span></span><br><span class="line">w.showJob();</span><br></pre></td></tr></table></figure>

<h4 id="三、闭包"><a href="#三、闭包" class="headerlink" title="三、闭包"></a>三、闭包</h4><p>由垃圾回收机制所引发的，正常情况下，声明的变量在函数调用完成以后就会被回收，也就是从内存中消失了，而闭包所要做的事情就是把这个变量和值存下来，不回收。【留着别删】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 下面这部分就是闭包</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    	alert(i);</span><br><span class="line">	&#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 依次弹出1,2,3,4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure>

<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>es6语言支持模块化，而浏览器目前不支持，所以需要使用webpack打包工具进行编译以后才能使用。</p>
<h4 id="引入import"><a href="#引入import" class="headerlink" title="引入import"></a>引入<code>import</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入mod.js中所有导出的东西</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> 别名 <span class="keyword">from</span> <span class="string">"./mod"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//引入mod.js中默认导出的东西</span></span><br><span class="line"><span class="keyword">import</span> 别名 <span class="keyword">from</span> <span class="string">"./mod"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入mod.js中的几个需要的东西</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b,c&#125; <span class="keyword">from</span> <span class="string">"./mod"</span></span><br></pre></td></tr></table></figure>

<h4 id="导出export"><a href="#导出export" class="headerlink" title="导出export"></a>导出<code>export</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导出mod.js中的东西</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认导出mod.js中的东西</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">let</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出对象</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">12</span>,</span><br><span class="line">    b = <span class="number">1</span>,</span><br><span class="line">    c = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;a, b, c&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出另一个模块</span></span><br><span class="line"><span class="keyword">export</span> &#123;<span class="keyword">default</span>&#125; <span class="keyword">from</span> <span class="string">"./mod"</span></span><br><span class="line"><span class="keyword">export</span> &#123;a, b, c&#125; <span class="keyword">from</span> <span class="string">"./mod"</span></span><br></pre></td></tr></table></figure>

<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/[0-9]/i</span></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="keyword">let</span> re  = <span class="built_in">RegExp</span>(<span class="string">'\\d+'</span>, <span class="string">'i'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="字符串方法search-match-replace-split"><a href="#字符串方法search-match-replace-split" class="headerlink" title="字符串方法search/match/replace/split"></a>字符串方法<code>search/match/replace/split</code></h4><p><code>search</code>：返回匹配字符所在位置</p>
<p><code>match</code>：返回一个匹配结果的数组</p>
<p><code>replace</code>： 替换匹配到的字符串</p>
<p><code>split</code>： 切割</p>
<h4 id="正则方法"><a href="#正则方法" class="headerlink" title="正则方法"></a>正则方法</h4><p><code>test</code>： 测试，返回true/false</p>
<h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选项：</span><br><span class="line">i ：表示忽略大小写</span><br><span class="line">g ：表示匹配全局</span><br><span class="line">元字符：</span><br><span class="line">[]: 任意单个字符</span><br><span class="line">[^] :除了……以外的</span><br><span class="line">+： 1个或多个</span><br><span class="line">?： 0个或1个</span><br><span class="line">匹配范围</span><br><span class="line">&#123;n&#125;: n个</span><br><span class="line">&#123;n,m&#125;: n到m个</span><br><span class="line">&#123;n，&#125;：最少有n个</span><br><span class="line">修饰符</span><br><span class="line">^: 以……开头</span><br><span class="line">$: 以……结尾</span><br><span class="line">转义</span><br><span class="line">\d: 数字[0-9]</span><br><span class="line">\w: 字母、数字、下划线</span><br><span class="line">\s: 空白字符</span><br><span class="line">.: 任意字符</span><br><span class="line">*: 任意次</span><br><span class="line">\D: 除了数字以外的</span><br><span class="line">\W: 除了字母、数字、下划线的</span><br><span class="line">\S: 除了空白字符</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>用闲置服务器搭建一个跨平台云播平台</title>
    <url>/2019/11/12/%E7%94%A8%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BA%91%E6%92%AD%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<p>​        今天看公众号，有号主推荐了B站的几个比较好的视频，因为有些视频B站上只要火了之后就有可能被下架，之前遇到过，放收藏夹里不见了，所以今天就把它直接下载下来了，正好有一台闲置的服务器，就把它放上面了。</p>
<p>​        本来以为放在上面可以直接用播放器看的，结果用smplayer播放的时候，居然播放不了，没办法了，只能google一下了，看到一篇博客，所以实践了一下，居然成了，那就记录一下。</p>
<p><img src="/2019/11/12/%E7%94%A8%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BA%91%E6%92%AD%E5%B9%B3%E5%8F%B0/fenmian.png" alt></p>
<a id="more"></a>

<p>​        首先说一下我的服务器配置：（我用的是一台华为云的服务器，1G1核的，最便宜的那种）</p>
<p><img src="/2019/11/12/%E7%94%A8%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BA%91%E6%92%AD%E5%B9%B3%E5%8F%B0/info.png" alt="info"></p>
<h3 id="关于Plex"><a href="#关于Plex" class="headerlink" title="关于Plex"></a>关于Plex</h3><p><img src="/2019/11/12/%E7%94%A8%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BA%91%E6%92%AD%E5%B9%B3%E5%8F%B0/plex.png" alt="plex"></p>
<p>​        官网：<a href="https://www.plex.tv/" target="_blank" rel="noopener">https://www.plex.tv</a><br>​        Plex是专门提供跨频台视频流媒体播放的一套解决方案，部署简单，全平台覆盖，支持打分、播放列表、视频管理、自定义分辨率等功能。<br>​        对于PC端来说，直接登录服务器上的Plex，或者在<a href="https://plex.tv/web直接登录，即可查看账号下关联的视频文件，且界面非常精美。" target="_blank" rel="noopener">https://plex.tv/web直接登录，即可查看账号下关联的视频文件，且界面非常精美。</a><br>​        对于手机或平板终端，在客户端中登录即可。不过iOS的APP需要内购30元解锁在线播放功能，不然会有1分钟播放限制。<br>​        此外你也可以开通Plex Pass功能，就能实现手机或平板客户端的缓存功能。价格如下：</p>
<p><img src="/2019/11/12/%E7%94%A8%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BA%91%E6%92%AD%E5%B9%B3%E5%8F%B0/price.png" alt="price"></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>Plex的部署其实是很简单的，在<a href="https://www.plex.tv/downloads/" target="_blank" rel="noopener">https://www.plex.tv/downloads/</a> 寻找到适合自己系统的安装包，我用的是centos7 x64的安装包.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://downloads.plex.tv/plex-media-server-new/1.18.1.2019-c186313fe/redhat/plexmediaserver-1.18.1.2019-c186313fe.x86_64.rpm</span><br><span class="line">sudo yum localinstall plexmediaserver-1.18.1.2019-c186313fe.x86_64.rpm</span><br><span class="line">mkdir -p /var/lib/plexmediaserver</span><br><span class="line">chown -R plex:plex /var/lib/plexmediaserver</span><br><span class="line">systemctl start plexmediaserver.service</span><br></pre></td></tr></table></figure>

<p>这样子Plex就部署完成了，由于云服务器有安全组策略，所以需要去安全组策略中将32400端口开放，（因为我之前服务器装过宝塔，所以还需要将宝塔记得开放相应的端口，当然，没有安装的不需要管），plex的默认端口为32400。</p>
<p>但是，刚部署完成的Plex出于安全考虑，不支持从外部进行访问，只能通过服务器本地进行访问，而偏偏我们一般不会在服务器上安装桌面环境，因此我们可以通过SSH Tunnel的端口转发，把服务器上的Plex端口转发到我们本地来完成首次登录。（由于我的笔记本装的 manajaro KDE，所以我这里使用ssh命令操作，参考博客使用的是putty，Windows可以参考最下方的参考博客）。</p>
<p>​        采用本地端口转发，这里说一下什么是本地端口转发？</p>
<p>​        所谓本地端口转发，就是将发送到本地端口的请求，转发到目标端口。这样，就可以通过访问本地端口，来访问目标端口的服务。使用-L属性，就可以指定需要转发的端口，语法是这样的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-L 本地网卡地址:本地端口:目标地址:目标端口</span><br></pre></td></tr></table></figure>

<p>​        通过<strong>本地端口转发</strong>，可以将发送到本地主机A1端口2000的请求，转发到远程云主机B1的32400端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L localhost:2000:localhost:32400 root@xxx.xxx.xxx.xxx(服务器IP)</span><br></pre></td></tr></table></figure>

<p>​        这样，在本地主机A1上可以通过访问<a href="http://localhost:2000/" target="_blank" rel="noopener">http://localhost:2000</a>来访问远程云主机B1上的plex服务。</p>
<p>​        接着照常登录SSH，登录后使用浏览器打开<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:12345/web，就可以看到Plex界面了。注册完账户后，在设置 → 服务器中，开启远程访问，会给你提示一个网址，如下图：</p>
<p><img src="/2019/11/12/%E7%94%A8%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BA%91%E6%92%AD%E5%B9%B3%E5%8F%B0/yuancheng.png" alt="yuancheng"></p>
<p>然后你就可以断开SSH在浏览器中输入提示的网址直接访问你的Plex了。</p>
<h3 id="添加资料库"><a href="#添加资料库" class="headerlink" title="添加资料库"></a>添加资料库</h3><p>​        Plex采用先进的资料库形式对媒体进行管理，避免了杂乱无章。我们选择“其他影片”，然后为其命名，接着选择存放视频的相应文件夹即可。</p>
<p><img src="/2019/11/12/%E7%94%A8%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BA%91%E6%92%AD%E5%B9%B3%E5%8F%B0/ziliao.png" alt></p>
<h6 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h6><p><a href="https://yorkchou.com/plex-video-stream.html" target="_blank" rel="noopener">https://yorkchou.com/plex-video-stream.html</a></p>
<p><a href="https://blog.fundebug.com/2017/04/24/ssh-port-forwarding/" target="_blank" rel="noopener">https://blog.fundebug.com/2017/04/24/ssh-port-forwarding/</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>Linux</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro系统安装与配置</title>
    <url>/2019/11/04/manjaro%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="/2019/11/04/manjaro%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20191104173229290.png" alt="image-20191104173229290"></p>
<a id="more"></a>

<h4 id="一、分区方案-128G-SSD"><a href="#一、分区方案-128G-SSD" class="headerlink" title="一、分区方案(128G SSD)"></a>一、分区方案(128G SSD)</h4><table>
<thead>
<tr>
<th align="center">分区类型</th>
<th align="center">挂载点</th>
<th align="center">大小</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">fat32</td>
<td align="center">/boot/efi</td>
<td align="center">300MB</td>
<td align="center">启动分区</td>
</tr>
<tr>
<td align="center">ext4</td>
<td align="center">/opt</td>
<td align="center">15000MB</td>
<td align="center">软件分区</td>
</tr>
<tr>
<td align="center">ext4</td>
<td align="center">/</td>
<td align="center">25000MB</td>
<td align="center">根分区</td>
</tr>
<tr>
<td align="center">linuxswap</td>
<td align="center">swap</td>
<td align="center">8000MB</td>
<td align="center">交换分区</td>
</tr>
<tr>
<td align="center">ext4</td>
<td align="center">/home</td>
<td align="center">剩余容量</td>
<td align="center">用户分区</td>
</tr>
</tbody></table>
<h4 id="二、更换软件源"><a href="#二、更换软件源" class="headerlink" title="二、更换软件源"></a>二、更换软件源</h4><ul>
<li><p>sudo pacman-mirrors -m rank -i -c China</p>
</li>
<li><p>选择中科大的软件源</p>
<ul>
<li><a href="https://mirrors.ustc.edu.cn/manjaro/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/manjaro/</a></li>
</ul>
</li>
<li><p>sudo vim /etc/pacman.conf</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line"><span class="section"># SigLevel = Optional TrustedOnly</span></span><br><span class="line">Server=https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>
</li>
<li><p>sudo pacman -Syy sudo pacman -S archlinuxcn-keyring</p>
</li>
<li><p>sudo pacman -Syyu 更新系统</p>
<ul>
<li>sudo pacman -S wqy-microhei【解决更新后字体成方框】</li>
</ul>
</li>
<li><p>sudo pacman -Sy yay 安装软件管理（第三方包aur）</p>
</li>
<li><p>pacman失败</p>
<p><img src="/2019/11/04/manjaro%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/pacman.jpg" alt></p>
</li>
</ul>
<h4 id="三、安装需要的软件"><a href="#三、安装需要的软件" class="headerlink" title="三、安装需要的软件"></a>三、安装需要的软件</h4><table>
<thead>
<tr>
<th align="center">软件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">vim</td>
<td align="center">vim编辑器</td>
</tr>
<tr>
<td align="center">DBeaver</td>
<td align="center">数据库</td>
</tr>
<tr>
<td align="center">mysqlworkbench</td>
<td align="center">数据库</td>
</tr>
<tr>
<td align="center">filezilla</td>
<td align="center">ftp软件</td>
</tr>
<tr>
<td align="center">remmina</td>
<td align="center">远程控制</td>
</tr>
<tr>
<td align="center">teamviewer</td>
<td align="center">远程控制</td>
</tr>
<tr>
<td align="center">shadowsocks-qt5</td>
<td align="center">小飞机</td>
</tr>
<tr>
<td align="center">libreofficewriter</td>
<td align="center">office</td>
</tr>
<tr>
<td align="center">wps</td>
<td align="center">office</td>
</tr>
<tr>
<td align="center">gimp</td>
<td align="center">画图</td>
</tr>
<tr>
<td align="center">firefox</td>
<td align="center">浏览器</td>
</tr>
<tr>
<td align="center">firefoxdeveloperedition</td>
<td align="center">Firefox开发者版</td>
</tr>
<tr>
<td align="center">google-chrome</td>
<td align="center">浏览器</td>
</tr>
<tr>
<td align="center">typora</td>
<td align="center">markdown</td>
</tr>
<tr>
<td align="center">VisualStudioCode</td>
<td align="center">代码</td>
</tr>
<tr>
<td align="center">virtualbox virtualbox-ext-vnc virtualbox-guest-iso virtualbox-ext-oracle</td>
<td align="center">虚拟机【注意内核版本，选择与内核版本对应的拓展】 {4.19对应419}</td>
</tr>
<tr>
<td align="center">genymotion</td>
<td align="center">安卓虚拟机</td>
</tr>
<tr>
<td align="center">kdenlive</td>
<td align="center">视频剪辑</td>
</tr>
<tr>
<td align="center">simplescreenrecorder</td>
<td align="center">录屏</td>
</tr>
<tr>
<td align="center">deepin.com.qq.im</td>
<td align="center">QQ</td>
</tr>
<tr>
<td align="center">deepin.com.qq.office</td>
<td align="center">TIM</td>
</tr>
<tr>
<td align="center">Electronic WeChat</td>
<td align="center">微信</td>
</tr>
<tr>
<td align="center">baidunetdisk-bin</td>
<td align="center">百度网盘</td>
</tr>
<tr>
<td align="center">netease-cloud-music</td>
<td align="center">网易云音乐</td>
</tr>
<tr>
<td align="center">qtwebkit-bin</td>
<td align="center">搜狗拼音输入法</td>
</tr>
<tr>
<td align="center">fcitx-sogoupinyin fcitx-configtool fcitx-im</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">cairo-dock</td>
<td align="center">下方dock</td>
</tr>
<tr>
<td align="center">cairo-dock-plug-ins</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">nutstore</td>
<td align="center">坚果云</td>
</tr>
<tr>
<td align="center">aria2</td>
<td align="center">下载工具</td>
</tr>
<tr>
<td align="center">uget</td>
<td align="center">配合aria2下载</td>
</tr>
<tr>
<td align="center">oh-my-zsh</td>
<td align="center">zsh</td>
</tr>
<tr>
<td align="center">wireshark-qt</td>
<td align="center">抓包工具</td>
</tr>
<tr>
<td align="center">flameshot</td>
<td align="center">截图工具</td>
</tr>
<tr>
<td align="center">peek</td>
<td align="center">GIF制作</td>
</tr>
</tbody></table>
<h4 id="四、软件相关配置及问题解决方案"><a href="#四、软件相关配置及问题解决方案" class="headerlink" title="四、软件相关配置及问题解决方案"></a>四、软件相关配置及问题解决方案</h4><h5 id="1、QQ、TIM解决方案"><a href="#1、QQ、TIM解决方案" class="headerlink" title="1、QQ、TIM解决方案"></a>1、QQ、TIM解决方案</h5><p>1、安装deepin-wine的windows程序</p>
<p>腾讯QQ</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S deepin.com.qq.im</span><br><span class="line">env WINEPREFIX&#x3D;&quot;$HOME&#x2F;.deepinwine&#x2F;Deepin-QQ&quot; deepin-wine winecfg</span><br></pre></td></tr></table></figure>

<p>腾讯TIM</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S deepin.com.qq.office</span><br><span class="line">env WINEPREFIX&#x3D;&quot;$HOME&#x2F;.deepinwine&#x2F;Deepin-TIM&quot; deepin-wine winecfg</span><br></pre></td></tr></table></figure>

<p>腾讯微信</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S yay</span><br><span class="line">yay -S deepin-wine-wechat</span><br><span class="line">env WINEPREFIX&#x3D;&quot;$HOME&#x2F;.deepinwine&#x2F;Deepin-Wechat&quot; deepin-wine winecfg</span><br></pre></td></tr></table></figure>

<p>迅雷极速版</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yay -S deepin-wine-thunderspeed</span><br><span class="line">env WINEPREFIX&#x3D;&quot;$HOME&#x2F;.deepinwine&#x2F;Deepin-ThunderSpeed&quot; deepin-wine winecfg</span><br></pre></td></tr></table></figure>

<p>2、安装依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gnome-settings-daemon</span><br></pre></td></tr></table></figure>

<p>3、在【设置】–&gt;【开机和关机】–&gt;【自动启动】–&gt;【添加脚本】–&gt;/usr/lib/gsd-xsettings</p>
<p>备注：</p>
<p>env WINEPREFIX=”$HOME/.deepinwine/Deepin-Wechat” deepin-wine winecfg</p>
<p>这条命令是用来调节程序字体渲染问题的，先运行打来使用一会儿之后再进行调节，如果不能调节需要先退出程序，运行命令后弹出窗口个点击显示，把dpi调为120即可</p>
<h5 id="2、搜狗输入法解决方案"><a href="#2、搜狗输入法解决方案" class="headerlink" title="2、搜狗输入法解决方案"></a>2、搜狗输入法解决方案</h5><p>1、编辑 .xprofile 文件</p>
<p>vim .xprofile</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS="@im=fcitx"</span><br></pre></td></tr></table></figure>

<p>2、无法显示候选框</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sudo pacman -U https://arch-archive.tuna.tsinghua.edu.cn/2019/04-29/community/os/x86<span class="emphasis">_64/fcitx-qt4-4.2.9.6-1-x86_</span>64.pkg.tar.xz</span><br><span class="line">fcitx配置-&gt; 附加部件中取消 ke开头的一个选项</span><br><span class="line">sudo killall fcitx</span><br><span class="line">killall sogou-qimpanel</span><br><span class="line">fcitx</span><br></pre></td></tr></table></figure>

<p>3、字体安装</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wqy-microhei wqy-microhei-lite wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts noto-fonts-cjk</span><br></pre></td></tr></table></figure>

<h5 id="3、WPS解决方案"><a href="#3、WPS解决方案" class="headerlink" title="3、WPS解决方案"></a>3、WPS解决方案</h5><p>1、 WPS 无法输入中文</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1、sudo vim /usr/bin/wps</span><br><span class="line"><span class="code">    # 添加在第二行</span></span><br><span class="line"><span class="code">    export XMODIFIERS="@im=fcitx"</span></span><br><span class="line"><span class="code">    export QT_IM_MODULE="fcitx"</span></span><br><span class="line">  </span><br><span class="line">2、sudo vim /usr/bin/et</span><br><span class="line"><span class="code">    # 添加在第二行</span></span><br><span class="line"><span class="code">    export XMODIFIERS="@im=fcitx"</span></span><br><span class="line"><span class="code">    export QT_IM_MODULE="fcitx"</span></span><br></pre></td></tr></table></figure>

<p>2、WPS字体缺失</p>
<p>字体下载地址：<a href="https://github.com/pengphei/wps-font-symbols/archive/master.zip" target="_blank" rel="noopener">https://github.com/pengphei/wps-font-symbols/archive/master.zip</a></p>
<p>安装方法：</p>
<p>拷贝字体到 usr/share/fontsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -r .&#x2F;wps-font-symbols &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;</span><br></pre></td></tr></table></figure>

<p>权限配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;fonts</span><br><span class="line"></span><br><span class="line">chmod 755 wps-font-symbols</span><br><span class="line"></span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;wps-font-symbols</span><br><span class="line"></span><br><span class="line">chmod 644 *</span><br></pre></td></tr></table></figure>

<p>生成字体缓存信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;wps-font-symbols</span><br><span class="line"></span><br><span class="line">mkfontdir</span><br><span class="line"></span><br><span class="line">mkfontscale</span><br><span class="line"></span><br><span class="line">fc-cach</span><br></pre></td></tr></table></figure>

<h5 id="4、chrome浏览器卡顿"><a href="#4、chrome浏览器卡顿" class="headerlink" title="4、chrome浏览器卡顿"></a>4、chrome浏览器卡顿</h5><p>主要是字体的原因：</p>
<p>【设置】–&gt;【应用程序风格】–&gt;【GNOME/GTK 应用程序风格】–&gt;【字体】–&gt;【Droid Sans】相关字体</p>
<h5 id="5、virtualbox解决方案"><a href="#5、virtualbox解决方案" class="headerlink" title="5、virtualbox解决方案"></a>5、virtualbox解决方案</h5><p>激活内核模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo modprobe vboxdrv</span><br></pre></td></tr></table></figure>

<p>添加当前用户到<code>virtualbox</code>用户组</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">gpasswd</span> <span class="selector-tag">-a</span> <span class="selector-attr">[username]</span> <span class="selector-tag">vboxusers</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>[username]</code>换成你的用户名，比如我自己的是这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a dealiaxy vboxusers</span><br></pre></td></tr></table></figure>

<p>坑：导入已有的虚拟机无法开机</p>
<p>把已经有的虚拟机导入的时候会遇到这个问题，主要是虚拟硬盘的位置改变了，在设置里面重新设置回来就好了。<br>但是这时又会报错说虚拟硬盘的SSID有问题，这个时候就要重置一下SSID了～</p>
<p>切换到虚拟硬盘文件所在目录，执行以下命令：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">VBoxManage internalcommands sethduuid <span class="tag">&lt;<span class="name">file.vdi</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把<code>&lt;file.vdi&gt;</code>换成你的虚拟硬盘文件名～</p>
<p>安装增强工具：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;download.virtualbox.org&#x2F;virtualbox&#x2F;6.0.10&#x2F;VBoxGuestAdditions_6.0.10.iso</span><br></pre></td></tr></table></figure>

<h5 id="6、aria2相关配置"><a href="#6、aria2相关配置" class="headerlink" title="6、aria2相关配置"></a>6、aria2相关配置</h5><p>1、进入 /etc 目录，新建一个文件夹和一个session文件并设置权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc</span><br><span class="line">mkdir aria2</span><br><span class="line">touch aria2.session</span><br><span class="line">sudo chmod 777 &#x2F;aria2&#x2F;aria2.session</span><br></pre></td></tr></table></figure>

<p>2、新建配置文件并编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim aria2.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#＝＝＝＝＝＝＝＝＝文件保存目录自行修改</span><br><span class="line">dir&#x3D;&#x2F;home&#x2F;username&#x2F;Desktop&#x2F;Downloads #username根据实际情况修改</span><br><span class="line">disable-ipv6&#x3D;true</span><br><span class="line"> </span><br><span class="line">#打开rpc的目的是为了给web管理端用</span><br><span class="line">enable-rpc&#x3D;true</span><br><span class="line">rpc-allow-origin-all&#x3D;true</span><br><span class="line">rpc-listen-all&#x3D;true</span><br><span class="line">#rpc-listen-port&#x3D;6800</span><br><span class="line">#断点续传</span><br><span class="line">continue&#x3D;true</span><br><span class="line">input-file&#x3D;&#x2F;etc&#x2F;aria2&#x2F;aria2.session </span><br><span class="line">save-session&#x3D;&#x2F;etc&#x2F;aria2&#x2F;aria2.session</span><br><span class="line"> </span><br><span class="line">#最大同时下载任务数</span><br><span class="line">max-concurrent-downloads&#x3D;20</span><br><span class="line"> </span><br><span class="line">save-session-interval&#x3D;120</span><br><span class="line"> </span><br><span class="line"># Http&#x2F;FTP 相关</span><br><span class="line">connect-timeout&#x3D;120</span><br><span class="line">#lowest-speed-limit&#x3D;10K</span><br><span class="line">#同服务器连接数</span><br><span class="line">max-connection-per-server&#x3D;10</span><br><span class="line">#max-file-not-found&#x3D;2</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class="line">min-split-size&#x3D;10M</span><br><span class="line">#单文件最大线程数, 路由建议值: 5</span><br><span class="line">split&#x3D;10</span><br><span class="line">check-certificate&#x3D;false</span><br><span class="line">#http-no-cache&#x3D;true</span><br></pre></td></tr></table></figure>

<p>3、启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo aria2c --conf-path&#x3D;&#x2F;etc&#x2F;aria2&#x2F;aria2.conf</span><br></pre></td></tr></table></figure>

<p>如果没有提示错误，按ctrl+c停止运行命令，可转为后台运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo aria2c --conf-path&#x3D;&#x2F;etc&#x2F;aria2&#x2F;aria2.conf -D 1安装chrome插件【aira2 for chrome】</span><br></pre></td></tr></table></figure>

<p>4、配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【ariaNg设置】--&gt;【RPC设置】--&gt;设置aria2地址 [http:&#x2F;&#x2F;localhost:6800](http:&#x2F;&#x2F;localhost:6800&#x2F;)</span><br></pre></td></tr></table></figure>

<p>提示链接成功即可</p>
<p>5、使用</p>
<ul>
<li><p>将百度链接中 baidu 后面添加 wp，转到 pandownload，使用aria2下载，即可实现高速下载</p>
</li>
<li><p>服务器部署【xxxxxxxx表示用户名】</p>
<ul>
<li>sudo docker run -d –name aria2 -p 6800:6800 -e PUID=1000 -e PGID=1000 -e ENABLE_AUTH=ture -e RPC_SECRET=Hello -e ARIA2_SSL=false -e ARIA2_USER=xxxxxxxx -e ARIA2_PWD=123456789 -v /home/xxxxxxxx/aria2:/data wahyd4/aria2-ui</li>
<li>【ARIA2_USER】用户名：xxxxxxxx</li>
<li>【 ARIA2_PWD】密码：123456789</li>
</ul>
</li>
</ul>
<h5 id="7、服务器代理（翻墙）"><a href="#7、服务器代理（翻墙）" class="headerlink" title="7、服务器代理（翻墙）"></a>7、服务器代理（翻墙）</h5><ul>
<li><p>安装：<code>shadowscoket-qt5</code></p>
</li>
<li><p>终端代理：<code>polipo</code></p>
<ul>
<li><p>复制：/etc/polipo/config.simple</p>
<ul>
<li><p>修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxyAddress &#x3D; &quot;::0&quot;</span><br><span class="line">proxyPort &#x3D; 1081</span><br><span class="line">socksParentProxy &#x3D; &quot;localhost:1080&quot;</span><br><span class="line">socksProxyType &#x3D; socks5</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>设置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy&#x3D;&quot;localhost:1081&quot;</span><br><span class="line">export https_proxy&#x3D;&quot;localhost:1081</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>浏览器代理设置</p>
<ul>
<li>安装<code>proxy switchOmage</code>插件</li>
<li>设置<code>proxy</code><ul>
<li>在线恢复：<a href="https://raw.githubusercontent.com/wiki/FelisCatus/SwitchyOmega/GFWList.bak" target="_blank" rel="noopener">https://raw.githubusercontent.com/wiki/FelisCatus/SwitchyOmega/GFWList.bak</a></li>
</ul>
</li>
<li>设置<code>auto switch</code><ul>
<li>规则列表地址：<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></li>
<li>备用:<a href="https://prudent-travels.000webhostapp.com/pac.php?a=SOCKS5&amp;b=127.0.0.1:1080" target="_blank" rel="noopener">https://prudent-travels.000webhostapp.com/pac.php?a=SOCKS5&amp;b=127.0.0.1:1080</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="8、oh-my-zsh"><a href="#8、oh-my-zsh" class="headerlink" title="8、oh-my-zsh"></a>8、oh-my-zsh</h5><p>1、安装步骤</p>
<ul>
<li>直接下载<a href="https://coreja.com/DailyHack/2019/08/config-your-super-zsh/oh-my-zsh-core.zip" target="_blank" rel="noopener">oh-my-zsh-core.zip</a>，其中包含了改编的<code>oh-my-zsh</code>以及我定制后<a href="https://github.com/Powerlevel9k/powerlevel9k" target="_blank" rel="noopener">powerlevel9k</a>的主题以及其对应的<a href="https://github.com/ryanoasis/nerd-fonts/" target="_blank" rel="noopener">nerd font</a>字体。</li>
</ul>
<ol>
<li>下载上述链接，将其中的<code>oh-my-zsh-core</code>变成<code>.oh-my-zsh</code>并放在用户目录下。</li>
<li>复制<code>zshrc</code>变成<code>.zshrc</code>到用户目录下</li>
<li>执行<code>chsh -s /usr/bin/zsh</code>，默认使用zsh，这个时候输入zsh应该已经能看到雏形了。</li>
<li>安装压缩包里的两个字体（或者上述有关<code>nerd font</code>链接中任意字体）</li>
<li>设置你的终端，使用刚刚安装好的字体</li>
<li>enjoy it.</li>
</ol>
<p>2、为了避免一些问题，额外步骤如下：</p>
<ul>
<li>记得提前安装autojump <code>yay -Sy autojump</code></li>
</ul>
<h5 id="9、适配-Firefox-和-LibreOffice"><a href="#9、适配-Firefox-和-LibreOffice" class="headerlink" title="9、适配 Firefox 和 LibreOffice"></a>9、适配 Firefox 和 LibreOffice</h5><p><code>.xprofile</code> 中加入下面这一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export SAL_USE_VCLPLUGIN&#x3D;gtk</span><br></pre></td></tr></table></figure>

<h5 id="10、zip文件解压乱码解决方案"><a href="#10、zip文件解压乱码解决方案" class="headerlink" title="10、zip文件解压乱码解决方案"></a>10、zip文件解压乱码解决方案</h5><p>安装p7zip-natspec 和 unzip-natspec 即可</p>
<h4 id="五、插件与主题"><a href="#五、插件与主题" class="headerlink" title="五、插件与主题"></a>五、插件与主题</h4><h5 id="1、桌面小部件及主题"><a href="#1、桌面小部件及主题" class="headerlink" title="1、桌面小部件及主题"></a>1、桌面小部件及主题</h5><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Simple Monitor</td>
<td align="center">系统描述</td>
</tr>
<tr>
<td align="center">NetSpeed widget</td>
<td align="center">网速显示</td>
</tr>
<tr>
<td align="center">取色器</td>
<td align="center">系统自带</td>
</tr>
<tr>
<td align="center">Application title</td>
<td align="center">应用标题</td>
</tr>
<tr>
<td align="center">breezemite</td>
<td align="center">窗口装饰</td>
</tr>
<tr>
<td align="center">clear</td>
<td align="center">dock主题</td>
</tr>
</tbody></table>
<h5 id="2、油猴插件（不能同步）"><a href="#2、油猴插件（不能同步）" class="headerlink" title="2、油猴插件（不能同步）"></a>2、油猴插件（不能同步）</h5><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">google-helper</td>
<td align="center">google助手</td>
</tr>
<tr>
<td align="center">Bilibili Evolved</td>
<td align="center">B站视频下载</td>
</tr>
<tr>
<td align="center">针对百度网盘视频播放器增强插件</td>
<td align="center">百度网盘视频倍速</td>
</tr>
<tr>
<td align="center">懒人专用</td>
<td align="center">vip破解</td>
</tr>
<tr>
<td align="center">百度网盘资源搜索引擎聚合</td>
<td align="center">网盘资源搜索</td>
</tr>
</tbody></table>
<h4 id="六、手残记录"><a href="#六、手残记录" class="headerlink" title="六、手残记录"></a>六、手残记录</h4><h5 id="1、安装闭源AMD驱动以后无法进入桌面坏境"><a href="#1、安装闭源AMD驱动以后无法进入桌面坏境" class="headerlink" title="1、安装闭源ＡＭＤ驱动以后无法进入桌面坏境"></a>1、安装闭源ＡＭＤ驱动以后无法进入桌面坏境</h5><ul>
<li><p>开机 Ctrl+Alt+F2 进入ｔｔｙ２</p>
<ul>
<li>卸载安装的闭源驱动：<ul>
<li>显示安装的驱动：mhwn -li</li>
<li>卸载驱动：mhwn -r -f pci video-catalyst</li>
</ul>
</li>
</ul>
</li>
<li><p>运行桌面:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo startx</span><br></pre></td></tr></table></figure>
</li>
<li><p>任然无法进入：</p>
<ul>
<li><p>连接网络</p>
<ul>
<li><p>开启WLAN</p>
<ul>
<li>sudo ip link set wlp4s0 up</li>
</ul>
</li>
<li><p>搜索</p>
<ul>
<li>sudo iw dev wlp4s0 scan | less</li>
</ul>
</li>
<li><p>vim etc/wpa_supplicant/wpa_supplicant.conf</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">network&#123;</span><br><span class="line">ssid=“无线网名称”</span><br><span class="line">psk=“密码”</span><br><span class="line">priority=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后台运行无线网卡配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wpa_supplicant -i wlp4s0 -c &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行DHCP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dhcpcd wlp4s0</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>重新安装桌面环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yay -Sy xorg xorg-server xorg-xinit xorg-apps</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 ～./xinitrc 最后一行添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec startkde</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yay -Sy sddm sddm-kcm</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置开机启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable sddm</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置图片懒加载</title>
    <url>/2019/11/02/hexo%E9%85%8D%E7%BD%AE%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<center><h4><u>添加lazyload 图片懒加载</u></h4></center><p>懒加载，简言之就是在html加载的时候，若果img标签的src是有内容的，在加载的过程中，img标签就回去请求这个图片，直到加载完，我们的浏览器的刷新那个图标才会停止转动，也就是才算请求完<br>懒加载能够在你鼠标不动的时候只加载目前电脑窗口内需要展示的图片，电脑屏幕内部需要展示的图片就暂时不加载。<br>从而达到加快访问网站速度的效果。</p><a id="more"></a>


<h3 id="配置"><a href="#配置" class="headerlink" title="配置:"></a>配置:</h3><p>在你的 Hexo 目录下，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure>

<p>然后在你的 Hexo 目录的配置文件 _config.yml 中任意位置添加配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: true</span><br><span class="line">  onlypost: false</span><br><span class="line">  loadingImg:</span><br></pre></td></tr></table></figure>

<p>参数说明:<br><strong>onlypost:</strong><br>是否仅文章中的图片做懒加载, 如果为 false, 则主题中的其他图片, 也会做懒加载, 如头像, logo 等任何图片.<br><strong>loadingImg - 图片未加载时的代替图:</strong><br>不填写使用默认加载图片,如果需要自定义,添填入loading图片地址.<br>如果是本地图片，不要忘记把图片添加到你的主题目录下. Next 主题需将图片放到~\themes\next\source\images目录下,然后引用时: loadingImg: /images/图片文件名</p>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/aoguai/p/11239182.html" target="_blank" rel="noopener">https://www.cnblogs.com/aoguai/p/11239182.html</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加阅读统计和阅读时长</title>
    <url>/2019/11/02/hexo%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/</url>
    <content><![CDATA[<p>首先找到下图对应的文件，即<code>themes/next/layout/_macro/post.swig</code></p><p><img src="/2019/11/02/hexo%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/2.png" alt></p><p>找到如下代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- set date_diff &#x3D; date(post.date) !&#x3D; date(post.updated) %&#125;</span><br><span class="line">&#123;%- set time_diff &#x3D; time(post.date) !&#x3D; time(post.updated) %&#125;</span><br><span class="line">&#123;%- set datetime_diff &#x3D; date_diff or time_diff %&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>




<p>在其上面加入下列代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-keyboard-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span></span><br><span class="line">                本篇博文共计 &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-hourglass-half"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span></span><br><span class="line">                阅读约 &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="/2019/11/02/hexo%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/1.png" alt></p>
<p>参考：<a href="https://www.cnblogs.com/php-linux/p/8418518.html" target="_blank" rel="noopener">https://www.cnblogs.com/php-linux/p/8418518.html</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo设置博文置顶</title>
    <url>/2019/11/01/hexo%E8%AE%BE%E7%BD%AE%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6/</url>
    <content><![CDATA[<center><h4><u>安装库</u></h4></center><p>目前已经有修改后支持置顶的仓库，可以直接用以下命令安装。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>然后在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code>即可。比如下面这篇文章：</p><a id="more"></a>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的2018总结</span><br><span class="line">date: 2018-12-31 11:45:59</span><br><span class="line">top: true</span><br><span class="line">tags:  </span><br><span class="line">- 随笔</span><br><span class="line">categories:  </span><br><span class="line">- 随笔</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<p>到目前为止，置顶功能已经可以实现了。所有相关博文到这边就结束了。</p>
<p>不过置顶的文章显示在最上面之后，如果没有明确的置顶标志，是不是感觉有点怪怪的呢？</p>
<center><h4><u>设置置顶标志</u></h4></center>

<p>打开：<code>/themes/next/layout/_macro</code>目录下的<code>post.swig</code>文件，定位到``标签下，插入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;   </span><br><span class="line">    &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;  </span><br><span class="line">    &lt;font color&#x3D;&quot;green&quot;&gt;置顶&lt;&#x2F;font&gt;   </span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo无法上传图片解决方案</title>
    <url>/2019/11/01/hexo%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>1、cd到博客根目录下 查看_config.yml文件 查找 post_asset_folder 字段确定post_asset_folder 设置为true -&gt; post_asset_folder:true</p><p>2、设置 post_asset_folder  参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到此文件夹内，这样就可以更方便的使用资源。</p><a id="more"></a>

<p>3、到博客的根目录下执行 npm install <a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2FCodeFalling%2Fhexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save 命令来进行插件的安装。</p>
<p>hexo-asset-image 用来插入图片，因为图片的相对路径什么的比较麻烦，这里使用这个插件并且配合typora的设置（如图）即可高枕无忧</p>
<p><img src="/2019/11/01/hexo%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/3.png" alt></p>
<p>参考：<a href="https://coreja.com/DailyHack/2019/03/hexo初体验/" target="_blank" rel="noopener">https://coreja.com/DailyHack/2019/03/hexo%E5%88%9D%E4%BD%93%E9%AA%8C/</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客性能优化</title>
    <url>/2019/11/01/hexo%E5%8D%9A%E5%AE%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<center><h4><u>全局安装gulp</u></h4></center><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line"># 查看版本</span><br><span class="line">gulp -v</span><br></pre></td></tr></table></figure><center><h4><u>安装gulp插件</u></h4></center><blockquote>
<p>在站点根目录下安装</p>
</blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp --save</span><br><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br><span class="line"># 解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript</span><br><span class="line"># 解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题</span><br><span class="line">npm install babel-core@6.26.3 --save</span><br><span class="line">npm install gulp-babel@7.0.1 --save</span><br><span class="line">npm install babel-preset-es2015@6.24.1 --save</span><br><span class="line"># gulp-babel 取消严格模式方法(&quot;use strict&quot;)</span><br><span class="line">npm install babel-plugin-transform-remove-strict-mode --save</span><br></pre></td></tr></table></figure><a id="more"></a>








<blockquote>
<p>问题：如果安装<code>gulp-imagemin</code>错误请执行以下语句<br><code>sudo npm i gulp-imagemin --unsafe-perms</code></p>
</blockquote>
<center><h4><u>gulpfile.js文件</u></h4></center>

<blockquote>
<p>在 Hexo 站点下新建<code>gulpfile.js</code>文件，文件内容如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;);</span><br><span class="line">var minifycss &#x3D; require(&#39;gulp-minify-css&#39;);</span><br><span class="line">var uglify &#x3D; require(&#39;gulp-uglify&#39;);</span><br><span class="line">var htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;);</span><br><span class="line">var htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);</span><br><span class="line">var imagemin &#x3D; require(&#39;gulp-imagemin&#39;);</span><br><span class="line">var babel &#x3D; require(&#39;gulp-babel&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩css文件</span><br><span class="line">gulp.task(&#39;minify-css&#39;, function (done) &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.css&#39;)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩html文件</span><br><span class="line">gulp.task(&#39;minify-html&#39;, function (done) &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: true,</span><br><span class="line">            minifyJS: true,</span><br><span class="line">            minifyCSS: true,</span><br><span class="line">            minifyURLs: true,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩js文件</span><br><span class="line">gulp.task(&#39;minify-js&#39;, function (done) &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;, &#39;!.&#x2F;public&#x2F;**&#x2F;*.min.js&#39;])</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            &#x2F;&#x2F;将ES6代码转译为可执行的JS代码</span><br><span class="line">            presets: [&#39;es2015&#39;] &#x2F;&#x2F; es5检查机制</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩 public&#x2F;images 目录内图片(Version&lt;3)</span><br><span class="line">&#x2F;&#x2F; gulp.task(&#39;minify-images&#39;, function () &#123;</span><br><span class="line">&#x2F;&#x2F;     gulp.src(&#39;.&#x2F;public&#x2F;images&#x2F;**&#x2F;*.*&#39;)</span><br><span class="line">&#x2F;&#x2F;         .pipe(imagemin(&#123;</span><br><span class="line">&#x2F;&#x2F;             optimizationLevel: 5, &#x2F;&#x2F;类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">&#x2F;&#x2F;             progressive: true, &#x2F;&#x2F;类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">&#x2F;&#x2F;             interlaced: false, &#x2F;&#x2F;类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">&#x2F;&#x2F;             multipass: false, &#x2F;&#x2F;类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">&#x2F;&#x2F;         &#125;))</span><br><span class="line">&#x2F;&#x2F;         .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;images&#39;));</span><br><span class="line">&#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩 public&#x2F;images 目录内图片(Version&gt;3)</span><br><span class="line">gulp.task(&#39;minify-images&#39;, function (done) &#123;</span><br><span class="line">    gulp.src(&#39;.&#x2F;public&#x2F;images&#x2F;**&#x2F;*.*&#39;)</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">            imagemin.gifsicle(&#123;interlaced: true&#125;),</span><br><span class="line">            imagemin.jpegtran(&#123;progressive: true&#125;),</span><br><span class="line">            imagemin.optipng(&#123;optimizationLevel: 5&#125;),</span><br><span class="line">            imagemin.svgo(&#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    &#123;removeViewBox: true&#125;,</span><br><span class="line">                    &#123;cleanupIDs: false&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;images&#39;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.0以前的写法 </span><br><span class="line">&#x2F;&#x2F;gulp.task(&#39;default&#39;, [</span><br><span class="line">&#x2F;&#x2F;  &#39;minify-html&#39;, &#39;minify-css&#39;, &#39;minify-js&#39;, &#39;minify-images&#39;</span><br><span class="line">&#x2F;&#x2F;]);</span><br><span class="line">&#x2F;&#x2F;4.0以后的写法</span><br><span class="line">&#x2F;&#x2F; 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&#39;default&#39;, gulp.series(gulp.parallel(&#39;minify-html&#39;, &#39;minify-css&#39;, &#39;minify-js&#39;, &#39;minify-images&#39;)), function () &#123;</span><br><span class="line">    console.log(&quot;----------gulp Finished----------&quot;);</span><br><span class="line">    &#x2F;&#x2F; Do something after a, b, and c are finished.</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<center><h4><u>创建.babelrc文件</u></h4></center>

<blockquote>
<p>在 Hexo 站点下新建<code>.babelrc</code>文件，文件内容如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#39;presets&#39;: [&#39;es2015&#39;],</span><br><span class="line">    &quot;plugins&quot;: [&quot;transform-remove-strict-mode&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<center><h4><u>静态资源压缩</u></h4></center>

<blockquote>
<p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>github部署静态页面</title>
    <url>/2019/11/01/github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>由于之前没有在“大型同性交友社区”混过，所以不是很熟悉，今天看到别人的项目部署在上面，就查了一下，将我的项目也部署在了上面，下面记录了我的部署过程。</p>
<a id="more"></a>

<center><h4><u>创建Git仓库</u></h4></center>
点击右上角的`+`号创建仓库

<p><img src="/2019/11/01/github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/45.png" alt></p>
<p>填写仓库名称就可以点击下面的绿色按钮创建了。</p>
<p>其中：</p>
<ul>
<li>Description——仓库描述，选填；</li>
<li>Public，Private——GitHub限制免费用户只能创建公开仓库；</li>
<li>Initialize this repository with a README——初始化仓库时添加README，readme是一个说明文件，用markdown语法编写，打上勾的话就默认添加了这个文件，如果不打勾后期也可以自己添加；</li>
</ul>
<p><img src="/2019/11/01/github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/1.png" alt></p>
<p>将项目克隆到本地，将已经写好的文件加入到克隆好的项目中，然后使用如下命令将文件上传到仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --globle user.name "你的用户名"</span><br><span class="line">git config --globle user.email "你的邮箱"</span><br><span class="line">git add --all </span><br><span class="line">git commit -m "备注"</span><br><span class="line">git push -u grigin master</span><br></pre></td></tr></table></figure>

<center><h4><u>设置github pages</u></h4></center>
点击settings，向下翻，找到GitHub Pages，按下图选择以后，刷新页面就会出现项目链接了。

<p><img src="/2019/11/01/github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/2.png" alt></p>
<p><img src="/2019/11/01/github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/3.png" alt="3"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建初体验(一)</title>
    <url>/2019/10/31/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p><img src="/2019/10/31/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%9D%E4%BD%93%E9%AA%8C/github.jpg" alt="github"></p>
<p>作为目前全球最大的程序员社区，GitHub 能做的不仅仅是托管源码这一操作，还可以使用GitHub 的Pages功能来搭建一个属于自己的博客，在上面可以写文章，开评论，跟读者互动，随意更换博客主题等等，只要你想折腾，你有时间，这些都能轻松搞定。</p>
<a id="more"></a>

<p>今天的这篇文章记录的是我如何一步步使用GitHub搭建出一个个人博客的。</p>
<center><u><h4>
    博客搭建方案
    </h4></u></center>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hexo + GitHub Page</span><br></pre></td></tr></table></figure>

<center><u><h4>
    准备条件
    </h4></u></center>

<p>GitHub 是个好东西啊，它提供了 GitHub Pages 帮助我们来架设一个静态网站，这就解决了服务器的问题。</p>
<p>Hexo 这个博客框架没有那么重量级，它是 MarkDown 直接写文章的，然后 Hexo 可以直接将文章编译成静态网页文件并发布，所以这样文章的内容、标题、标签等信息就没必要存数据库里面了，是直接纯静态页面了，这就解决了数据库的问题。</p>
<p>既然提到了GitHub Page，那么github账号当然必不可少。首先去github官网，注册一个属于自己的账号，有了账号才能肆意妄为不是吗？！嘿嘿嘿。有了账号，那我们就可以开工啦！</p>
<center><u><h4>新建项目</h4></u></center>
首先在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如 NightTeam 的 GitHub 用户名就叫 NightTeam，那我就新建一个 nightteam.github.io，新建完成之后就可以进行后续操作了。

<p>另外如果 GitHub 没有配置 SSH 连接的建议配置一下，这样后面在部署博客的时候会更方便。</p>
<center><h4><u>安装环境</u></h4></center>
##### 安装 Node.js

<p>由于我的电脑是Linux系统，已经安装好了node，可以使用<code>npm</code>命令。（Windows可以下载安装，下载地址：<a href="https://nodejs.org/zh-cn/download/，可以安装" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。安装完毕之后，确保环境变量配置好，能正常使用 <code>npm</code> 命令。）</p>
<h5 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h5><p>Hexo 官方提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p>
<p>命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装完毕之后，确保环境变量配置好，能正常使用 <code>hexo</code> 命令。</p>
<center><h4><u>初始化项目</u><h4></h4></h4></center>
使用 Hexo命令行创建一个项目，并在本地跑起来，看一下效果。

<p>首先使用如下命令创建项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 name 就是项目名，创建 moxuan 的博客，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init moxuan</span><br></pre></td></tr></table></figure>

<p>初始化完成后会在 moxuan 文件夹下出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹。</p>
<p>接下来进入新生成的文件夹里面，调用 Hexo 的generate命令，将Hexo编译生成HTML代码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。然后利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>运行之后命令行输入如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>它告诉我们在本地 4000 端口上就可以查看博客站点了，如图所示：</p>
<p><img src="/2019/10/31/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%9D%E4%BD%93%E9%AA%8C/640.jpg" alt></p>
<p>这样一个博客的架子就出来了，我们只用了三个命令就完成了。</p>
<center><h4><u>部署</u></h4></center>
在部署之前，我们需要先知道博客的部署地址，它需要对应 GitHub 的一个 Repository 的地址，这个信息需要配置一下。

<p>打开根目录下的 <code>_config.yml</code>文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">	<span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">	<span class="attr">repo:</span> <span class="string">&#123;git</span> <span class="string">repo</span> <span class="string">ssh</span> <span class="string">address&#125;</span>  </span><br><span class="line">	<span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>另外我们还需要额外安装一个支持 Git 的部署插件，名字叫做 hexo-deployer-git，安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>完成了上面的工作，接下来就可以在github上面部署了,执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>运行结果类似下面这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">On branch masternothing to commit, working directory clean</span><br><span class="line">Counting objects: 46, done.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (36/36), done.</span><br><span class="line">Writing objects: 100% (46/46), 507.66 KiB | 0 bytes/s, done.</span><br><span class="line">Total 46 (delta 3), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (3/3), done.</span><br><span class="line">To git@github.com:NightTeam/nightteam.github.io.git </span><br><span class="line">* [new branch]      HEAD -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from git@github.com:NightTeam/nightteam.github.io.git.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure>

<p>如果出现类似上面的内容，就证明我们的博客已经成功部署到 GitHub Pages 上面了，这时候我们访问一下 GitHub Repository 同名的链接，就可以看到和本地一模一样的内容了。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎光临！</title>
    <url>/2019/10/28/hello-world/</url>
    <content><![CDATA[<p>哈喽，大家好呀！　^_^</p><p>欢迎来到墨轩的小家，这里有可爱的血小板（看板娘），还有我的一些笔记，想法等等，如果大家有什么好的建议或者想法都可以在文章下方评论，我都会及时回复的。</p><p>大家常来玩啊！ ^_^</p><p>正在建设中……尽情期待　^_^</p>]]></content>
      <categories>
        <category>欢迎页</category>
      </categories>
      <tags>
        <tag>欢迎</tag>
      </tags>
  </entry>
</search>
